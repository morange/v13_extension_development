<?php


use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\ParameterNotFoundException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class DependencyInjectionContainer_ca075fde6bd6f18277acaa816435a71239d0b55a extends Container
{
    protected $parameters = [];
    protected \Closure $getService;

    public function __construct()
    {
        $this->services = $this->privates = [];
        $this->syntheticIds = [
            '_early.Composer\\Autoload\\ClassLoader' => true,
            '_early.TYPO3\\CMS\\Core\\Configuration\\ConfigurationManager' => true,
            '_early.TYPO3\\CMS\\Core\\Core\\ApplicationContext' => true,
            '_early.TYPO3\\CMS\\Core\\Core\\RequestId' => true,
            '_early.TYPO3\\CMS\\Core\\DependencyInjection\\ContainerBuilder' => true,
            '_early.TYPO3\\CMS\\Core\\Log\\LogManager' => true,
            '_early.TYPO3\\CMS\\Core\\Package\\PackageManager' => true,
            '_early.boot-service' => true,
            '_early.boot.state' => true,
            '_early.cache.assets' => true,
            '_early.cache.core' => true,
            '_early.cache.di' => true,
            'service_provider_registry' => true,
        ];
        $this->methodMap = [
            'B13\\Container\\Backend\\Preview\\ContainerPreviewRenderer' => 'getContainerPreviewRendererService',
            'B13\\Container\\Command\\DeleteChildrenWithNonExistingParentCommand' => 'getDeleteChildrenWithNonExistingParentCommandService',
            'B13\\Container\\Command\\DeleteChildrenWithWrongPidCommand' => 'getDeleteChildrenWithWrongPidCommandService',
            'B13\\Container\\Command\\FixContainerParentForConnectedModeCommand' => 'getFixContainerParentForConnectedModeCommandService',
            'B13\\Container\\Command\\FixLanguageModeCommand' => 'getFixLanguageModeCommandService',
            'B13\\Container\\Command\\IntegrityCommand' => 'getIntegrityCommandService',
            'B13\\Container\\Command\\SortingCommand' => 'getSortingCommandService',
            'B13\\Container\\Command\\SortingInPageCommand' => 'getSortingInPageCommandService',
            'B13\\Container\\ContentDefender\\ContainerColumnConfigurationService' => 'getContainerColumnConfigurationServiceService',
            'B13\\Container\\ContentDefender\\Hooks\\ColumnConfigurationManipulationHook' => 'getColumnConfigurationManipulationHookService',
            'B13\\Container\\DataProcessing\\ContainerProcessor' => 'getContainerProcessorService',
            'B13\\Container\\Domain\\Factory\\ContainerFactory' => 'getContainerFactoryService',
            'B13\\Container\\Domain\\Factory\\Database' => 'getDatabaseService',
            'B13\\Container\\Domain\\Factory\\PageView\\Backend\\ContainerFactory' => 'getContainerFactory2Service',
            'B13\\Container\\Domain\\Factory\\PageView\\ContainerFactory' => 'getContainerFactory3Service',
            'B13\\Container\\Domain\\Factory\\PageView\\Frontend\\ContainerFactory' => 'getContainerFactory4Service',
            'B13\\Container\\Domain\\Service\\ContainerService' => 'getContainerServiceService',
            'B13\\Container\\Hooks\\Datahandler\\CommandMapAfterFinishHook' => 'getCommandMapAfterFinishHookService',
            'B13\\Container\\Hooks\\Datahandler\\CommandMapBeforeStartHook' => 'getCommandMapBeforeStartHookService',
            'B13\\Container\\Hooks\\Datahandler\\CommandMapPostProcessingHook' => 'getCommandMapPostProcessingHookService',
            'B13\\Container\\Hooks\\Datahandler\\Database' => 'getDatabase2Service',
            'B13\\Container\\Hooks\\Datahandler\\DatahandlerProcess' => 'getDatahandlerProcessService',
            'B13\\Container\\Hooks\\Datahandler\\DatamapBeforeStartHook' => 'getDatamapBeforeStartHookService',
            'B13\\Container\\Hooks\\Datahandler\\DatamapPreProcessFieldArrayHook' => 'getDatamapPreProcessFieldArrayHookService',
            'B13\\Container\\Hooks\\Datahandler\\DeleteHook' => 'getDeleteHookService',
            'B13\\Container\\Hooks\\TableConfigurationPostProcessing' => 'getTableConfigurationPostProcessingService',
            'B13\\Container\\Hooks\\UsedRecords' => 'getUsedRecordsService',
            'B13\\Container\\Integrity\\Database' => 'getDatabase3Service',
            'B13\\Container\\Integrity\\Integrity' => 'getIntegrityService',
            'B13\\Container\\Integrity\\IntegrityFix' => 'getIntegrityFixService',
            'B13\\Container\\Integrity\\Sorting' => 'getSortingService',
            'B13\\Container\\Integrity\\SortingInPage' => 'getSortingInPageService',
            'B13\\Container\\Listener\\BootCompleted' => 'getBootCompletedService',
            'B13\\Container\\Listener\\ContentUsedOnPage' => 'getContentUsedOnPageService',
            'B13\\Container\\Listener\\ModifyNewContentElementWizardItems' => 'getModifyNewContentElementWizardItemsService',
            'B13\\Container\\Listener\\PageTsConfig' => 'getPageTsConfigService',
            'B13\\Container\\Listener\\RecordSummaryForLocalization' => 'getRecordSummaryForLocalizationService',
            'B13\\Container\\Service\\RecordLocalizeSummaryModifier' => 'getRecordLocalizeSummaryModifierService',
            'B13\\Container\\Tca\\ItemProcFunc' => 'getItemProcFuncService',
            'B13\\Container\\Tca\\Registry' => 'getRegistryService',
            'B13\\Container\\Updates\\ContainerDeleteChildrenWithWrongPid' => 'getContainerDeleteChildrenWithWrongPidService',
            'B13\\Container\\Updates\\ContainerMigrateSorting' => 'getContainerMigrateSortingService',
            'B13\\Container\\ViewHelpers\\DrawChildrenViewHelper' => 'getDrawChildrenViewHelperService',
            'B13\\Container\\View\\ContainerLayoutView' => 'getContainerLayoutViewService',
            'Blueways\\BwFocuspointImages\\Form\\Wizard\\FocusPointWizard' => 'getFocusPointWizardService',
            'Blueways\\BwFocuspointImages\\Utility\\HelperUtility' => 'getHelperUtilityService',
            'GeorgRinger\\News\\Backend\\RecordList\\NewsDatabaseRecordList' => 'getNewsDatabaseRecordListService',
            'GeorgRinger\\News\\Command\\ProxyClassRebuildCommand' => 'getProxyClassRebuildCommandService',
            'GeorgRinger\\News\\Controller\\AdministrationController' => 'getAdministrationControllerService',
            'GeorgRinger\\News\\Controller\\CategoryController' => 'getCategoryControllerService',
            'GeorgRinger\\News\\Controller\\NewsBaseController' => 'getNewsBaseControllerService',
            'GeorgRinger\\News\\Controller\\NewsController' => 'getNewsControllerService',
            'GeorgRinger\\News\\Controller\\TagController' => 'getTagControllerService',
            'GeorgRinger\\News\\Domain\\Repository\\CategoryRepository' => 'getCategoryRepositoryService',
            'GeorgRinger\\News\\Domain\\Repository\\FileRepository' => 'getFileRepositoryService',
            'GeorgRinger\\News\\Domain\\Repository\\LinkRepository' => 'getLinkRepositoryService',
            'GeorgRinger\\News\\Domain\\Repository\\MediaRepository' => 'getMediaRepositoryService',
            'GeorgRinger\\News\\Domain\\Repository\\NewsDefaultRepository' => 'getNewsDefaultRepositoryService',
            'GeorgRinger\\News\\Domain\\Repository\\NewsRepository' => 'getNewsRepositoryService',
            'GeorgRinger\\News\\Domain\\Repository\\TagRepository' => 'getTagRepositoryService',
            'GeorgRinger\\News\\Domain\\Repository\\TtContentRepository' => 'getTtContentRepositoryService',
            'GeorgRinger\\News\\Domain\\Service\\NewsImportService' => 'getNewsImportServiceService',
            'GeorgRinger\\News\\Event\\Listener\\ModifyDatabaseQueryForContentEventListener' => 'getModifyDatabaseQueryForContentEventListenerService',
            'GeorgRinger\\News\\Event\\Listener\\ModifyDatabaseQueryForRecordListingEventListener' => 'getModifyDatabaseQueryForRecordListingEventListenerService',
            'GeorgRinger\\News\\Event\\Listener\\ModifyFileReferenceControlsEventListener' => 'getModifyFileReferenceControlsEventListenerService',
            'GeorgRinger\\News\\Hooks\\Backend\\RecordListQueryHook' => 'getRecordListQueryHookService',
            'GeorgRinger\\News\\Hooks\\DataHandlerHook' => 'getDataHandlerHookService',
            'GeorgRinger\\News\\Hooks\\ItemsProcFunc' => 'getItemsProcFuncService',
            'GeorgRinger\\News\\Hooks\\PluginPreviewRenderer' => 'getPluginPreviewRendererService',
            'GeorgRinger\\News\\Seo\\HrefLangEvent' => 'getHrefLangEventService',
            'GeorgRinger\\News\\Seo\\NewsTitleProvider' => 'getNewsTitleProviderService',
            'GeorgRinger\\News\\Updates\\NewsSlugUpdater' => 'getNewsSlugUpdaterService',
            'GeorgRinger\\News\\Updates\\RealurlAliasNewsSlugUpdater' => 'getRealurlAliasNewsSlugUpdaterService',
            'GeorgRinger\\News\\Utility\\ClassCacheManager' => 'getClassCacheManagerService',
            'GeorgRinger\\News\\Utility\\ClassLoader' => 'getClassLoaderService',
            'GeorgRinger\\News\\Utility\\TemplateLayout' => 'getTemplateLayoutService',
            'GeorgRinger\\News\\ViewHelpers\\Be\\IsCheckboxActiveViewHelper' => 'getIsCheckboxActiveViewHelperService',
            'GeorgRinger\\News\\ViewHelpers\\Category\\CountViewHelper' => 'getCountViewHelperService',
            'GeorgRinger\\News\\ViewHelpers\\Check\\PageAvailableInLanguageViewHelper' => 'getPageAvailableInLanguageViewHelperService',
            'GeorgRinger\\News\\ViewHelpers\\ExcludeDisplayedNewsViewHelper' => 'getExcludeDisplayedNewsViewHelperService',
            'GeorgRinger\\News\\ViewHelpers\\ExtensionLoadedViewHelper' => 'getExtensionLoadedViewHelperService',
            'GeorgRinger\\News\\ViewHelpers\\Format\\NothingViewHelper' => 'getNothingViewHelperService',
            'GeorgRinger\\News\\ViewHelpers\\HeaderDataViewHelper' => 'getHeaderDataViewHelperService',
            'GeorgRinger\\News\\ViewHelpers\\IfIsActiveViewHelper' => 'getIfIsActiveViewHelperService',
            'GeorgRinger\\News\\ViewHelpers\\ImageSizeViewHelper' => 'getImageSizeViewHelperService',
            'GeorgRinger\\News\\ViewHelpers\\Iterator\\ChunkViewHelper' => 'getChunkViewHelperService',
            'GeorgRinger\\News\\ViewHelpers\\LinkViewHelper' => 'getLinkViewHelperService',
            'GeorgRinger\\News\\ViewHelpers\\MetaTagViewHelper' => 'getMetaTagViewHelperService',
            'GeorgRinger\\News\\ViewHelpers\\MultiCategoryLink\\ArgumentsViewHelper' => 'getArgumentsViewHelperService',
            'GeorgRinger\\News\\ViewHelpers\\MultiCategoryLink\\IsCategoryActiveViewHelper' => 'getIsCategoryActiveViewHelperService',
            'GeorgRinger\\News\\ViewHelpers\\PaginateBodytextViewHelper' => 'getPaginateBodytextViewHelperService',
            'GeorgRinger\\News\\ViewHelpers\\RemoveMediaTagsViewHelper' => 'getRemoveMediaTagsViewHelperService',
            'GeorgRinger\\News\\ViewHelpers\\RenderMediaViewHelper' => 'getRenderMediaViewHelperService',
            'GeorgRinger\\News\\ViewHelpers\\SearchFormViewHelper' => 'getSearchFormViewHelperService',
            'GeorgRinger\\News\\ViewHelpers\\SimplePrevNextViewHelper' => 'getSimplePrevNextViewHelperService',
            'GeorgRinger\\News\\ViewHelpers\\Tag\\CountViewHelper' => 'getCountViewHelper2Service',
            'GeorgRinger\\News\\ViewHelpers\\TargetLinkViewHelper' => 'getTargetLinkViewHelperService',
            'GeorgRinger\\News\\ViewHelpers\\TitleTagViewHelper' => 'getTitleTagViewHelperService',
            'GeorgRinger\\News\\Xclass\\ExtensionServiceXclassed' => 'getExtensionServiceXclassedService',
            'HDNET\\Calendarize\\Command\\CleanupCommandController' => 'getCleanupCommandControllerService',
            'HDNET\\Calendarize\\Command\\ImportCommandController' => 'getImportCommandControllerService',
            'HDNET\\Calendarize\\Command\\ReindexCommandController' => 'getReindexCommandControllerService',
            'HDNET\\Calendarize\\Controller\\BackendController' => 'getBackendControllerService',
            'HDNET\\Calendarize\\Controller\\BookingController' => 'getBookingControllerService',
            'HDNET\\Calendarize\\Controller\\CalendarController' => 'getCalendarControllerService',
            'HDNET\\Calendarize\\Domain\\Repository\\AbstractRepository' => 'getAbstractRepositoryService',
            'HDNET\\Calendarize\\Domain\\Repository\\CategoryRepository' => 'getCategoryRepository2Service',
            'HDNET\\Calendarize\\Domain\\Repository\\ConfigurationGroupRepository' => 'getConfigurationGroupRepositoryService',
            'HDNET\\Calendarize\\Domain\\Repository\\ConfigurationRepository' => 'getConfigurationRepositoryService',
            'HDNET\\Calendarize\\Domain\\Repository\\EventRepository' => 'getEventRepositoryService',
            'HDNET\\Calendarize\\Domain\\Repository\\IndexRepository' => 'getIndexRepositoryService',
            'HDNET\\Calendarize\\EventListener\\BookingCountriesListener' => 'getBookingCountriesListenerService',
            'HDNET\\Calendarize\\EventListener\\CalendarizeFieldListener' => 'getCalendarizeFieldListenerService',
            'HDNET\\Calendarize\\EventListener\\CategoryConstraintEventListener' => 'getCategoryConstraintEventListenerService',
            'HDNET\\Calendarize\\EventListener\\CategoryFilterEventListener' => 'getCategoryFilterEventListenerService',
            'HDNET\\Calendarize\\EventListener\\ImportSingleIcalEventListener' => 'getImportSingleIcalEventListenerService',
            'HDNET\\Calendarize\\EventListener\\PreviewRenderingEventListener' => 'getPreviewRenderingEventListenerService',
            'HDNET\\Calendarize\\EventListener\\SearchConstraintEventListener' => 'getSearchConstraintEventListenerService',
            'HDNET\\Calendarize\\Property\\TypeConverter\\AbstractBookingRequest' => 'getAbstractBookingRequestService',
            'HDNET\\Calendarize\\Seo\\CalendarizeTitleProvider' => 'getCalendarizeTitleProviderService',
            'HDNET\\Calendarize\\Service\\AbstractService' => 'getAbstractServiceService',
            'HDNET\\Calendarize\\Service\\BreadcrumbService' => 'getBreadcrumbServiceService',
            'HDNET\\Calendarize\\Service\\ContentElementLayoutService' => 'getContentElementLayoutServiceService',
            'HDNET\\Calendarize\\Service\\EventConfigurationService' => 'getEventConfigurationServiceService',
            'HDNET\\Calendarize\\Service\\FlexFormService' => 'getFlexFormServiceService',
            'HDNET\\Calendarize\\Service\\Ical\\DissectICalService' => 'getDissectICalServiceService',
            'HDNET\\Calendarize\\Service\\Ical\\ICalUrlService' => 'getICalUrlServiceService',
            'HDNET\\Calendarize\\Service\\Ical\\VObjectICalService' => 'getVObjectICalServiceService',
            'HDNET\\Calendarize\\Service\\IndexPreparationService' => 'getIndexPreparationServiceService',
            'HDNET\\Calendarize\\Service\\IndexerService' => 'getIndexerServiceService',
            'HDNET\\Calendarize\\Service\\PluginConfigurationService' => 'getPluginConfigurationServiceService',
            'HDNET\\Calendarize\\Service\\RecurrenceService' => 'getRecurrenceServiceService',
            'HDNET\\Calendarize\\Service\\SecondaryTimeTableService' => 'getSecondaryTimeTableServiceService',
            'HDNET\\Calendarize\\Service\\TcaInformation' => 'getTcaInformationService',
            'HDNET\\Calendarize\\Service\\TcaService' => 'getTcaServiceService',
            'HDNET\\Calendarize\\Service\\TimeTableService' => 'getTimeTableServiceService',
            'HDNET\\Calendarize\\Service\\TimeTable\\ExternalTimeTable' => 'getExternalTimeTableService',
            'HDNET\\Calendarize\\Service\\TimeTable\\GroupTimeTable' => 'getGroupTimeTableService',
            'HDNET\\Calendarize\\Service\\TimeTable\\Secondary\\ManipulationTimeTable' => 'getManipulationTimeTableService',
            'HDNET\\Calendarize\\Service\\TimeTable\\TimeTimeTable' => 'getTimeTimeTableService',
            'HDNET\\Calendarize\\Service\\Url\\SlugService' => 'getSlugServiceService',
            'HDNET\\Calendarize\\Validation\\Validator\\BookingRequestValidator' => 'getBookingRequestValidatorService',
            'HDNET\\Calendarize\\ViewHelpers\\Be\\RecordRowViewHelper' => 'getRecordRowViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\DateTime\\FormatUtcDateViewHelper' => 'getFormatUtcDateViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\DateTime\\IndexOnDayViewHelper' => 'getIndexOnDayViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\DateTime\\ModifyViewHelper' => 'getModifyViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\Format\\DateViewHelper' => 'getDateViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\Format\\EscapeIcalTextViewHelper' => 'getEscapeIcalTextViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\Format\\LineFoldingViewHelper' => 'getLineFoldingViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\Format\\RemoveBlankLinesViewHelper' => 'getRemoveBlankLinesViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\IfDateLowerViewHelper' => 'getIfDateLowerViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\IfDateUpperViewHelper' => 'getIfDateUpperViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\IfExtensionLoadedViewHelper' => 'getIfExtensionLoadedViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\InArrayViewHelper' => 'getInArrayViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\IndexTraversingViewHelper' => 'getIndexTraversingViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\IndicesByObjectViewHelper' => 'getIndicesByObjectViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\JsQuoteViewHelper' => 'getJsQuoteViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\LanguageInformationViewHelper' => 'getLanguageInformationViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\LanguageViewHelper' => 'getLanguageViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\Link\\AbstractActionViewHelper' => 'getAbstractActionViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\Link\\BookingViewHelper' => 'getBookingViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\Link\\DayViewHelper' => 'getDayViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\Link\\IndexViewHelper' => 'getIndexViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\Link\\ListViewHelper' => 'getListViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\Link\\MonthViewHelper' => 'getMonthViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\Link\\QuarterViewHelper' => 'getQuarterViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\Link\\WeekViewHelper' => 'getWeekViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\Link\\YearViewHelper' => 'getYearViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\Loop\\DaysInMonthViewHelper' => 'getDaysInMonthViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\Loop\\DaysInWeekViewHelper' => 'getDaysInWeekViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\Loop\\MonthsInYearViewHelper' => 'getMonthsInYearViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\Loop\\WeeksInMonthViewHelper' => 'getWeeksInMonthViewHelperService',
            'HDNET\\Calendarize\\ViewHelpers\\TitleTagViewHelper' => 'getTitleTagViewHelper2Service',
            'HDNET\\Calendarize\\ViewHelpers\\Uri\\BookingViewHelper' => 'getBookingViewHelper2Service',
            'HDNET\\Calendarize\\ViewHelpers\\Uri\\DayViewHelper' => 'getDayViewHelper2Service',
            'HDNET\\Calendarize\\ViewHelpers\\Uri\\IndexViewHelper' => 'getIndexViewHelper2Service',
            'HDNET\\Calendarize\\ViewHelpers\\Uri\\ListViewHelper' => 'getListViewHelper2Service',
            'HDNET\\Calendarize\\ViewHelpers\\Uri\\MonthViewHelper' => 'getMonthViewHelper2Service',
            'HDNET\\Calendarize\\ViewHelpers\\Uri\\QuarterViewHelper' => 'getQuarterViewHelper2Service',
            'HDNET\\Calendarize\\ViewHelpers\\Uri\\WeekViewHelper' => 'getWeekViewHelper2Service',
            'HDNET\\Calendarize\\ViewHelpers\\Uri\\YearViewHelper' => 'getYearViewHelper2Service',
            'Masterminds\\HTML5' => 'getHTML5Service',
            'Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1' => 'getEventDispatcherInterfaceDecorated1Service',
            'Psr\\Http\\Client\\ClientInterface' => 'getClientInterfaceService',
            'Psr\\Http\\Message\\ResponseFactoryInterface' => 'getResponseFactoryInterfaceService',
            'Psr\\Http\\Message\\ServerRequestFactoryInterface' => 'getServerRequestFactoryInterfaceService',
            'Psr\\Http\\Message\\StreamFactoryInterface' => 'getStreamFactoryInterfaceService',
            'Psr\\Http\\Message\\UploadedFileFactoryInterface' => 'getUploadedFileFactoryInterfaceService',
            'Psr\\Http\\Message\\UriFactoryInterface' => 'getUriFactoryInterfaceService',
            'Symfony\\Component\\Console\\Command\\HelpCommand' => 'getHelpCommandService',
            'TYPO3Fluid\\Fluid\\Core\\Parser\\TemplateProcessor\\EscapingModifierTemplateProcessor' => 'getEscapingModifierTemplateProcessorService',
            'TYPO3Fluid\\Fluid\\Core\\Parser\\TemplateProcessor\\NamespaceDetectionTemplateProcessor' => 'getNamespaceDetectionTemplateProcessorService',
            'TYPO3Fluid\\Fluid\\Core\\Parser\\TemplateProcessor\\PassthroughSourceModifierTemplateProcessor' => 'getPassthroughSourceModifierTemplateProcessorService',
            'TYPO3\\CMS\\Adminpanel\\Controller\\AjaxController' => 'getAjaxControllerService',
            'TYPO3\\CMS\\Adminpanel\\Controller\\MainController' => 'getMainControllerService',
            'TYPO3\\CMS\\Adminpanel\\Log\\InMemoryLogWriter' => 'getInMemoryLogWriterService',
            'TYPO3\\CMS\\Adminpanel\\Middleware\\AdminPanelDataPersister' => 'getAdminPanelDataPersisterService',
            'TYPO3\\CMS\\Adminpanel\\Middleware\\AdminPanelInitiator' => 'getAdminPanelInitiatorService',
            'TYPO3\\CMS\\Adminpanel\\Middleware\\AdminPanelRenderer' => 'getAdminPanelRendererService',
            'TYPO3\\CMS\\Adminpanel\\Middleware\\SqlLogging' => 'getSqlLoggingService',
            'TYPO3\\CMS\\Adminpanel\\Modules\\CacheModule' => 'getCacheModuleService',
            'TYPO3\\CMS\\Adminpanel\\Modules\\DebugModule' => 'getDebugModuleService',
            'TYPO3\\CMS\\Adminpanel\\Modules\\Debug\\Events' => 'getEventsService',
            'TYPO3\\CMS\\Adminpanel\\Modules\\Debug\\Log' => 'getLogService',
            'TYPO3\\CMS\\Adminpanel\\Modules\\InfoModule' => 'getInfoModuleService',
            'TYPO3\\CMS\\Adminpanel\\Modules\\PreviewModule' => 'getPreviewModuleService',
            'TYPO3\\CMS\\Adminpanel\\Modules\\TsDebugModule' => 'getTsDebugModuleService',
            'TYPO3\\CMS\\Adminpanel\\Modules\\TsDebug\\TypoScriptWaterfall' => 'getTypoScriptWaterfallService',
            'TYPO3\\CMS\\Adminpanel\\Service\\ConfigurationService' => 'getConfigurationServiceService',
            'TYPO3\\CMS\\Adminpanel\\Service\\EventDispatcher' => 'getEventDispatcherService',
            'TYPO3\\CMS\\Adminpanel\\ViewHelpers\\IsArrayViewHelper' => 'getIsArrayViewHelperService',
            'TYPO3\\CMS\\Adminpanel\\ViewHelpers\\SubModuleRenderViewHelper' => 'getSubModuleRenderViewHelperService',
            'TYPO3\\CMS\\Backend\\Backend\\Avatar\\Avatar' => 'getAvatarService',
            'TYPO3\\CMS\\Backend\\Backend\\Shortcut\\ShortcutRepository' => 'getShortcutRepositoryService',
            'TYPO3\\CMS\\Backend\\Backend\\ToolbarItems\\ClearCacheToolbarItem' => 'getClearCacheToolbarItemService',
            'TYPO3\\CMS\\Backend\\Backend\\ToolbarItems\\ShortcutToolbarItem' => 'getShortcutToolbarItemService',
            'TYPO3\\CMS\\Backend\\Backend\\ToolbarItems\\SystemInformationToolbarItem' => 'getSystemInformationToolbarItemService',
            'TYPO3\\CMS\\Backend\\Clipboard\\Clipboard' => 'getClipboardService',
            'TYPO3\\CMS\\Backend\\Command\\CreateBackendUserCommand' => 'getCreateBackendUserCommandService',
            'TYPO3\\CMS\\Backend\\Command\\LockBackendCommand' => 'getLockBackendCommandService',
            'TYPO3\\CMS\\Backend\\Command\\ReferenceIndexUpdateCommand' => 'getReferenceIndexUpdateCommandService',
            'TYPO3\\CMS\\Backend\\Command\\ResetPasswordCommand' => 'getResetPasswordCommandService',
            'TYPO3\\CMS\\Backend\\Command\\UnlockBackendCommand' => 'getUnlockBackendCommandService',
            'TYPO3\\CMS\\Backend\\ContextMenu\\ContextMenu' => 'getContextMenuService',
            'TYPO3\\CMS\\Backend\\ContextMenu\\ImportMapConfigurator' => 'getImportMapConfiguratorService',
            'TYPO3\\CMS\\Backend\\Controller\\AboutController' => 'getAboutControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\AjaxLoginController' => 'getAjaxLoginControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\BackendController' => 'getBackendController2Service',
            'TYPO3\\CMS\\Backend\\Controller\\ClipboardController' => 'getClipboardControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\ColumnSelectorController' => 'getColumnSelectorControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\ContentElement\\ElementHistoryController' => 'getElementHistoryControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\ContentElement\\ElementInformationController' => 'getElementInformationControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\ContentElement\\MoveElementController' => 'getMoveElementControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\ContentElement\\NewContentElementController' => 'getNewContentElementControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\DummyController' => 'getDummyControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\EditDocumentController' => 'getEditDocumentControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\ElementBrowserController' => 'getElementBrowserControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\File\\FileController' => 'getFileControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\File\\ImageProcessController' => 'getImageProcessControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\FormFilesAjaxController' => 'getFormFilesAjaxControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\FormSlugAjaxController' => 'getFormSlugAjaxControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\LinkBrowserController' => 'getLinkBrowserControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\LinkController' => 'getLinkControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\LiveSearchController' => 'getLiveSearchControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\LoginController' => 'getLoginControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\LogoutController' => 'getLogoutControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\MfaAjaxController' => 'getMfaAjaxControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\MfaConfigurationController' => 'getMfaConfigurationControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\MfaController' => 'getMfaControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\MfaSetupController' => 'getMfaSetupControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\NewRecordController' => 'getNewRecordControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\OnlineMediaController' => 'getOnlineMediaControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\PageLayoutController' => 'getPageLayoutControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\PageTsConfig\\PageTsConfigActiveController' => 'getPageTsConfigActiveControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\PageTsConfig\\PageTsConfigIncludesController' => 'getPageTsConfigIncludesControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\PageTsConfig\\PageTsConfigRecordsOverviewController' => 'getPageTsConfigRecordsOverviewControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\Page\\MovePageController' => 'getMovePageControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\Page\\NewMultiplePagesController' => 'getNewMultiplePagesControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\Page\\SortSubPagesController' => 'getSortSubPagesControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\RecordListController' => 'getRecordListControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\RecordListDownloadController' => 'getRecordListDownloadControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\ResetPasswordController' => 'getResetPasswordControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\Resource\\ResourceController' => 'getResourceControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\Security\\SudoModeController' => 'getSudoModeControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\ShortcutController' => 'getShortcutControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\SiteConfigurationController' => 'getSiteConfigurationControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\SwitchUserController' => 'getSwitchUserControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\SystemInformationController' => 'getSystemInformationControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\Wizard\\ImageManipulationController' => 'getImageManipulationControllerService',
            'TYPO3\\CMS\\Backend\\EventListener\\AfterBackendPageRenderEventListener' => 'getAfterBackendPageRenderEventListenerService',
            'TYPO3\\CMS\\Backend\\EventListener\\FailedLoginAttemptNotification' => 'getFailedLoginAttemptNotificationService',
            'TYPO3\\CMS\\Backend\\EventListener\\SilentSiteLanguageFlagMigration' => 'getSilentSiteLanguageFlagMigrationService',
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\ReturnUrl' => 'getReturnUrlService',
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\SiteDatabaseEditRow' => 'getSiteDatabaseEditRowService',
            'TYPO3\\CMS\\Backend\\History\\RecordHistoryRollback' => 'getRecordHistoryRollbackService',
            'TYPO3\\CMS\\Backend\\Http\\Application' => 'getApplicationService',
            'TYPO3\\CMS\\Backend\\Http\\RequestHandler' => 'getRequestHandlerService',
            'TYPO3\\CMS\\Backend\\Http\\RouteDispatcher' => 'getRouteDispatcherService',
            'TYPO3\\CMS\\Backend\\LinkHandler\\RecordLinkHandler' => 'getRecordLinkHandlerService',
            'TYPO3\\CMS\\Backend\\Middleware\\AdditionalResponseHeaders' => 'getAdditionalResponseHeadersService',
            'TYPO3\\CMS\\Backend\\Middleware\\BackendModuleValidator' => 'getBackendModuleValidatorService',
            'TYPO3\\CMS\\Backend\\Middleware\\BackendRouteInitialization' => 'getBackendRouteInitializationService',
            'TYPO3\\CMS\\Backend\\Middleware\\BackendUserAuthenticator' => 'getBackendUserAuthenticatorService',
            'TYPO3\\CMS\\Backend\\Middleware\\ContentSecurityPolicyHeaders' => 'getContentSecurityPolicyHeadersService',
            'TYPO3\\CMS\\Backend\\Middleware\\ContentSecurityPolicyReporter' => 'getContentSecurityPolicyReporterService',
            'TYPO3\\CMS\\Backend\\Middleware\\ForcedHttpsBackendRedirector' => 'getForcedHttpsBackendRedirectorService',
            'TYPO3\\CMS\\Backend\\Middleware\\LockedBackendGuard' => 'getLockedBackendGuardService',
            'TYPO3\\CMS\\Backend\\Middleware\\OutputCompression' => 'getOutputCompressionService',
            'TYPO3\\CMS\\Backend\\Middleware\\SiteResolver' => 'getSiteResolverService',
            'TYPO3\\CMS\\Backend\\Middleware\\SudoModeInterceptor' => 'getSudoModeInterceptorService',
            'TYPO3\\CMS\\Backend\\Module\\ModuleFactory' => 'getModuleFactoryService',
            'TYPO3\\CMS\\Backend\\Module\\ModuleProvider' => 'getModuleProviderService',
            'TYPO3\\CMS\\Backend\\Module\\ModuleRegistry' => 'getModuleRegistryService',
            'TYPO3\\CMS\\Backend\\RecordList\\DatabaseRecordList' => 'getDatabaseRecordListService',
            'TYPO3\\CMS\\Backend\\RecordList\\ElementBrowserRecordList' => 'getElementBrowserRecordListService',
            'TYPO3\\CMS\\Backend\\Resource\\PublicUrlPrefixer' => 'getPublicUrlPrefixerService',
            'TYPO3\\CMS\\Backend\\Routing\\Router_decorated_1' => 'getRouterDecorated1Service',
            'TYPO3\\CMS\\Backend\\Routing\\UriBuilder' => 'getUriBuilderService',
            'TYPO3\\CMS\\Backend\\Search\\EventListener\\AddLiveSearchResultActionsListener' => 'getAddLiveSearchResultActionsListenerService',
            'TYPO3\\CMS\\Backend\\Search\\EventListener\\ExcludePagesFromSearchFieldsLookup' => 'getExcludePagesFromSearchFieldsLookupService',
            'TYPO3\\CMS\\Backend\\Security\\CategoryPermissionsAspect' => 'getCategoryPermissionsAspectService',
            'TYPO3\\CMS\\Backend\\Security\\ContentSecurityPolicy\\CspAjaxController' => 'getCspAjaxControllerService',
            'TYPO3\\CMS\\Backend\\Security\\ContentSecurityPolicy\\CspModuleController' => 'getCspModuleControllerService',
            'TYPO3\\CMS\\Backend\\Security\\EmailLoginNotification' => 'getEmailLoginNotificationService',
            'TYPO3\\CMS\\Backend\\Security\\SudoMode\\Access\\AccessFactory' => 'getAccessFactoryService',
            'TYPO3\\CMS\\Backend\\Security\\SudoMode\\Access\\AccessStorage' => 'getAccessStorageService',
            'TYPO3\\CMS\\Backend\\Template\\ModuleTemplateFactory' => 'getModuleTemplateFactoryService',
            'TYPO3\\CMS\\Backend\\Tree\\View\\ContentCreationPagePositionMap' => 'getContentCreationPagePositionMapService',
            'TYPO3\\CMS\\Backend\\Tree\\View\\ContentMovingPagePositionMap' => 'getContentMovingPagePositionMapService',
            'TYPO3\\CMS\\Backend\\ViewHelpers\\AvatarViewHelper' => 'getAvatarViewHelperService',
            'TYPO3\\CMS\\Backend\\ViewHelpers\\LanguageColumnViewHelper' => 'getLanguageColumnViewHelperService',
            'TYPO3\\CMS\\Backend\\ViewHelpers\\Link\\DocumentationViewHelper' => 'getDocumentationViewHelperService',
            'TYPO3\\CMS\\Backend\\ViewHelpers\\Link\\EditRecordViewHelper' => 'getEditRecordViewHelperService',
            'TYPO3\\CMS\\Backend\\ViewHelpers\\Link\\NewRecordViewHelper' => 'getNewRecordViewHelperService',
            'TYPO3\\CMS\\Backend\\ViewHelpers\\Mfa\\IfHasStateViewHelper' => 'getIfHasStateViewHelperService',
            'TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLinkViewHelper' => 'getModuleLinkViewHelperService',
            'TYPO3\\CMS\\Backend\\ViewHelpers\\ThumbnailViewHelper' => 'getThumbnailViewHelperService',
            'TYPO3\\CMS\\Backend\\ViewHelpers\\Toolbar\\AttributesViewHelper' => 'getAttributesViewHelperService',
            'TYPO3\\CMS\\Backend\\ViewHelpers\\Toolbar\\IfHasDropdownViewHelper' => 'getIfHasDropdownViewHelperService',
            'TYPO3\\CMS\\Backend\\ViewHelpers\\TypoScript\\FineDiffViewHelper' => 'getFineDiffViewHelperService',
            'TYPO3\\CMS\\Backend\\ViewHelpers\\Uri\\EditRecordViewHelper' => 'getEditRecordViewHelper2Service',
            'TYPO3\\CMS\\Backend\\ViewHelpers\\Uri\\NewRecordViewHelper' => 'getNewRecordViewHelper2Service',
            'TYPO3\\CMS\\Backend\\View\\AuthenticationStyleInformation' => 'getAuthenticationStyleInformationService',
            'TYPO3\\CMS\\Backend\\View\\BackendLayoutView' => 'getBackendLayoutViewService',
            'TYPO3\\CMS\\Backend\\View\\BackendLayout\\DataProviderCollection' => 'getDataProviderCollectionService',
            'TYPO3\\CMS\\Backend\\View\\BackendLayout\\DataProviderContext' => 'getDataProviderContextService',
            'TYPO3\\CMS\\Backend\\View\\BackendLayout\\RecordRememberer' => 'getRecordRemembererService',
            'TYPO3\\CMS\\Backend\\View\\PageLayoutViewDrawEmptyColposContent' => 'getPageLayoutViewDrawEmptyColposContentService',
            'TYPO3\\CMS\\Backend\\View\\RecordSearchBoxComponent' => 'getRecordSearchBoxComponentService',
            'TYPO3\\CMS\\Belog\\Controller\\BackendLogController' => 'getBackendLogControllerService',
            'TYPO3\\CMS\\Belog\\Controller\\SystemInformationController' => 'getSystemInformationController2Service',
            'TYPO3\\CMS\\Belog\\Domain\\Repository\\LogEntryRepository' => 'getLogEntryRepositoryService',
            'TYPO3\\CMS\\Belog\\ViewHelpers\\Be\\PagePathViewHelper' => 'getPagePathViewHelperService',
            'TYPO3\\CMS\\Belog\\ViewHelpers\\FormatDetailsViewHelper' => 'getFormatDetailsViewHelperService',
            'TYPO3\\CMS\\Belog\\ViewHelpers\\UsernameViewHelper' => 'getUsernameViewHelperService',
            'TYPO3\\CMS\\Belog\\ViewHelpers\\WorkspaceTitleViewHelper' => 'getWorkspaceTitleViewHelperService',
            'TYPO3\\CMS\\Beuser\\Controller\\BackendUserController' => 'getBackendUserControllerService',
            'TYPO3\\CMS\\Beuser\\Controller\\PermissionController' => 'getPermissionControllerService',
            'TYPO3\\CMS\\Beuser\\Domain\\Repository\\BackendUserGroupRepository' => 'getBackendUserGroupRepositoryService',
            'TYPO3\\CMS\\Beuser\\Domain\\Repository\\BackendUserRepository' => 'getBackendUserRepositoryService',
            'TYPO3\\CMS\\Beuser\\Domain\\Repository\\FileMountRepository' => 'getFileMountRepositoryService',
            'TYPO3\\CMS\\Beuser\\ViewHelpers\\ArrayElementViewHelper' => 'getArrayElementViewHelperService',
            'TYPO3\\CMS\\Beuser\\ViewHelpers\\Display\\TableAccessViewHelper' => 'getTableAccessViewHelperService',
            'TYPO3\\CMS\\Beuser\\ViewHelpers\\IsArrayViewHelper' => 'getIsArrayViewHelper2Service',
            'TYPO3\\CMS\\Beuser\\ViewHelpers\\MfaStatusViewHelper' => 'getMfaStatusViewHelperService',
            'TYPO3\\CMS\\Beuser\\ViewHelpers\\PermissionsViewHelper' => 'getPermissionsViewHelperService',
            'TYPO3\\CMS\\Beuser\\ViewHelpers\\SpriteIconForRecordViewHelper' => 'getSpriteIconForRecordViewHelperService',
            'TYPO3\\CMS\\Beuser\\ViewHelpers\\SwitchUserViewHelper' => 'getSwitchUserViewHelperService',
            'TYPO3\\CMS\\Core\\Adapter\\EventDispatcherAdapter' => 'getEventDispatcherAdapterService',
            'TYPO3\\CMS\\Core\\Authentication\\GroupResolver' => 'getGroupResolverService',
            'TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaProviderRegistry' => 'getMfaProviderRegistryService',
            'TYPO3\\CMS\\Core\\Authentication\\Mfa\\Provider\\RecoveryCodesProvider' => 'getRecoveryCodesProviderService',
            'TYPO3\\CMS\\Core\\Authentication\\Mfa\\Provider\\TotpProvider' => 'getTotpProviderService',
            'TYPO3\\CMS\\Core\\Cache\\CacheManager' => 'getCacheManagerService',
            'TYPO3\\CMS\\Core\\Cache\\DatabaseSchemaService' => 'getDatabaseSchemaServiceService',
            'TYPO3\\CMS\\Core\\Charset\\CharsetConverter' => 'getCharsetConverterService',
            'TYPO3\\CMS\\Core\\Command\\CacheFlushCommand' => 'getCacheFlushCommandService',
            'TYPO3\\CMS\\Core\\Command\\CacheWarmupCommand' => 'getCacheWarmupCommandService',
            'TYPO3\\CMS\\Core\\Command\\ConsumeMessagesCommand' => 'getConsumeMessagesCommandService',
            'TYPO3\\CMS\\Core\\Command\\DumpAutoloadCommand' => 'getDumpAutoloadCommandService',
            'TYPO3\\CMS\\Core\\Command\\ExtensionListCommand' => 'getExtensionListCommandService',
            'TYPO3\\CMS\\Core\\Command\\ListCommand' => 'getListCommandService',
            'TYPO3\\CMS\\Core\\Command\\SendEmailCommand' => 'getSendEmailCommandService',
            'TYPO3\\CMS\\Core\\Command\\SiteListCommand' => 'getSiteListCommandService',
            'TYPO3\\CMS\\Core\\Command\\SiteShowCommand' => 'getSiteShowCommandService',
            'TYPO3\\CMS\\Core\\Composer\\PackageArtifactBuilder' => 'getPackageArtifactBuilderService',
            'TYPO3\\CMS\\Core\\Configuration\\Loader\\PageTsConfigLoader_decorated_1' => 'getPageTsConfigLoaderDecorated1Service',
            'TYPO3\\CMS\\Core\\Configuration\\PageTsConfig' => 'getPageTsConfig2Service',
            'TYPO3\\CMS\\Core\\Configuration\\Parser\\PageTsConfigParser' => 'getPageTsConfigParserService',
            'TYPO3\\CMS\\Core\\Configuration\\SiteConfiguration' => 'getSiteConfigurationService',
            'TYPO3\\CMS\\Core\\Console\\CommandApplication' => 'getCommandApplicationService',
            'TYPO3\\CMS\\Core\\Console\\CommandRegistry_decorated_2' => 'getCommandRegistryDecorated2Service',
            'TYPO3\\CMS\\Core\\Context\\Context' => 'getContextService',
            'TYPO3\\CMS\\Core\\Controller\\FileDumpController' => 'getFileDumpControllerService',
            'TYPO3\\CMS\\Core\\Controller\\PasswordGeneratorController' => 'getPasswordGeneratorControllerService',
            'TYPO3\\CMS\\Core\\Core\\BootService' => 'getBootServiceService',
            'TYPO3\\CMS\\Core\\Core\\ClassLoadingInformation' => 'getClassLoadingInformationService',
            'TYPO3\\CMS\\Core\\Core\\Event\\WarmupBaseTcaCache' => 'getWarmupBaseTcaCacheService',
            'TYPO3\\CMS\\Core\\Crypto\\PasswordHashing\\PasswordHashFactory' => 'getPasswordHashFactoryService',
            'TYPO3\\CMS\\Core\\DataHandling\\ItemProcessingService' => 'getItemProcessingServiceService',
            'TYPO3\\CMS\\Core\\DataHandling\\PageDoktypeRegistry' => 'getPageDoktypeRegistryService',
            'TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\EmailSoftReferenceParser' => 'getEmailSoftReferenceParserService',
            'TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\ExtensionPathSoftReferenceParser' => 'getExtensionPathSoftReferenceParserService',
            'TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\NotifySoftReferenceParser' => 'getNotifySoftReferenceParserService',
            'TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\SoftReferenceParserFactory' => 'getSoftReferenceParserFactoryService',
            'TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\SubstituteSoftReferenceParser' => 'getSubstituteSoftReferenceParserService',
            'TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\TypolinkSoftReferenceParser' => 'getTypolinkSoftReferenceParserService',
            'TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\TypolinkTagSoftReferenceParser' => 'getTypolinkTagSoftReferenceParserService',
            'TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\UrlSoftReferenceParser' => 'getUrlSoftReferenceParserService',
            'TYPO3\\CMS\\Core\\Database\\ConnectionPool' => 'getConnectionPoolService',
            'TYPO3\\CMS\\Core\\Database\\Schema\\SchemaMigrator' => 'getSchemaMigratorService',
            'TYPO3\\CMS\\Core\\Database\\Schema\\SqlReader' => 'getSqlReaderService',
            'TYPO3\\CMS\\Core\\Domain\\Access\\RecordAccessVoter' => 'getRecordAccessVoterService',
            'TYPO3\\CMS\\Core\\Error\\DebugExceptionHandler' => 'getDebugExceptionHandlerService',
            'TYPO3\\CMS\\Core\\Error\\ProductionExceptionHandler' => 'getProductionExceptionHandlerService',
            'TYPO3\\CMS\\Core\\EventDispatcher\\EventDispatcher' => 'getEventDispatcher2Service',
            'TYPO3\\CMS\\Core\\EventDispatcher\\ListenerProvider_decorated_3' => 'getListenerProviderDecorated3Service',
            'TYPO3\\CMS\\Core\\ExpressionLanguage\\DefaultProvider' => 'getDefaultProviderService',
            'TYPO3\\CMS\\Core\\ExpressionLanguage\\ProviderConfigurationLoader' => 'getProviderConfigurationLoaderService',
            'TYPO3\\CMS\\Core\\FormProtection\\FormProtectionFactory' => 'getFormProtectionFactoryService',
            'TYPO3\\CMS\\Core\\Html\\DefaultSanitizerBuilder' => 'getDefaultSanitizerBuilderService',
            'TYPO3\\CMS\\Core\\Html\\RteHtmlParser' => 'getRteHtmlParserService',
            'TYPO3\\CMS\\Core\\Http\\Client\\GuzzleClientFactory' => 'getGuzzleClientFactoryService',
            'TYPO3\\CMS\\Core\\Http\\MiddlewareStackResolver' => 'getMiddlewareStackResolverService',
            'TYPO3\\CMS\\Core\\Http\\RequestFactory' => 'getRequestFactoryService',
            'TYPO3\\CMS\\Core\\Imaging\\IconFactory' => 'getIconFactoryService',
            'TYPO3\\CMS\\Core\\Imaging\\IconRegistry_decorated_1' => 'getIconRegistryDecorated1Service',
            'TYPO3\\CMS\\Core\\LinkHandling\\LinkService' => 'getLinkServiceService',
            'TYPO3\\CMS\\Core\\Localization\\CacheWarmer' => 'getCacheWarmerService',
            'TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory' => 'getLanguageServiceFactoryService',
            'TYPO3\\CMS\\Core\\Localization\\LanguageStore' => 'getLanguageStoreService',
            'TYPO3\\CMS\\Core\\Localization\\Locales' => 'getLocalesService',
            'TYPO3\\CMS\\Core\\Localization\\LocalizationFactory' => 'getLocalizationFactoryService',
            'TYPO3\\CMS\\Core\\Localization\\TcaSystemLanguageCollector' => 'getTcaSystemLanguageCollectorService',
            'TYPO3\\CMS\\Core\\Locking\\LockFactory' => 'getLockFactoryService',
            'TYPO3\\CMS\\Core\\Locking\\ResourceMutex' => 'getResourceMutexService',
            'TYPO3\\CMS\\Core\\Mail\\Mailer' => 'getMailerService',
            'TYPO3\\CMS\\Core\\Mail\\MemorySpool' => 'getMemorySpoolService',
            'TYPO3\\CMS\\Core\\Mail\\TransportFactory' => 'getTransportFactoryService',
            'TYPO3\\CMS\\Core\\Messaging\\FlashMessageService' => 'getFlashMessageServiceService',
            'TYPO3\\CMS\\Core\\Messenger\\EventListener\\StopWorkerOnTimeLimitListener' => 'getStopWorkerOnTimeLimitListenerService',
            'TYPO3\\CMS\\Core\\MetaTag\\MetaTagManagerRegistry' => 'getMetaTagManagerRegistryService',
            'TYPO3\\CMS\\Core\\Middleware\\NormalizedParamsAttribute' => 'getNormalizedParamsAttributeService',
            'TYPO3\\CMS\\Core\\Middleware\\RequestTokenMiddleware' => 'getRequestTokenMiddlewareService',
            'TYPO3\\CMS\\Core\\Middleware\\ResponsePropagation' => 'getResponsePropagationService',
            'TYPO3\\CMS\\Core\\Middleware\\VerifyHostHeader' => 'getVerifyHostHeaderService',
            'TYPO3\\CMS\\Core\\Package\\Cache\\PackageDependentCacheIdentifier' => 'getPackageDependentCacheIdentifierService',
            'TYPO3\\CMS\\Core\\Package\\FailsafePackageManager' => 'getFailsafePackageManagerService',
            'TYPO3\\CMS\\Core\\PageTitle\\PageTitleProviderManager' => 'getPageTitleProviderManagerService',
            'TYPO3\\CMS\\Core\\PageTitle\\RecordPageTitleProvider' => 'getRecordPageTitleProviderService',
            'TYPO3\\CMS\\Core\\Page\\AssetCollector' => 'getAssetCollectorService',
            'TYPO3\\CMS\\Core\\Page\\AssetRenderer' => 'getAssetRendererService',
            'TYPO3\\CMS\\Core\\Page\\ImportMapCacheWarmer' => 'getImportMapCacheWarmerService',
            'TYPO3\\CMS\\Core\\Page\\ImportMapFactory' => 'getImportMapFactoryService',
            'TYPO3\\CMS\\Core\\Page\\PageRenderer' => 'getPageRendererService',
            'TYPO3\\CMS\\Core\\RateLimiter\\RateLimiterFactory' => 'getRateLimiterFactoryService',
            'TYPO3\\CMS\\Core\\RateLimiter\\Storage\\CachingFrameworkStorage' => 'getCachingFrameworkStorageService',
            'TYPO3\\CMS\\Core\\Registry' => 'getRegistry2Service',
            'TYPO3\\CMS\\Core\\Resource\\Collection\\FileCollectionRegistry' => 'getFileCollectionRegistryService',
            'TYPO3\\CMS\\Core\\Resource\\DefaultUploadFolderResolver' => 'getDefaultUploadFolderResolverService',
            'TYPO3\\CMS\\Core\\Resource\\Driver\\DriverRegistry' => 'getDriverRegistryService',
            'TYPO3\\CMS\\Core\\Resource\\FileRepository' => 'getFileRepository2Service',
            'TYPO3\\CMS\\Core\\Resource\\Index\\ExtractorRegistry' => 'getExtractorRegistryService',
            'TYPO3\\CMS\\Core\\Resource\\Index\\FileIndexRepository' => 'getFileIndexRepositoryService',
            'TYPO3\\CMS\\Core\\Resource\\Index\\MetaDataRepository' => 'getMetaDataRepositoryService',
            'TYPO3\\CMS\\Core\\Resource\\MetaDataEventListener' => 'getMetaDataEventListenerService',
            'TYPO3\\CMS\\Core\\Resource\\OnlineMedia\\Helpers\\OnlineMediaHelperRegistry' => 'getOnlineMediaHelperRegistryService',
            'TYPO3\\CMS\\Core\\Resource\\OnlineMedia\\Processing\\PreviewProcessing' => 'getPreviewProcessingService',
            'TYPO3\\CMS\\Core\\Resource\\ProcessedFileRepository' => 'getProcessedFileRepositoryService',
            'TYPO3\\CMS\\Core\\Resource\\Processing\\FileDeletionAspect' => 'getFileDeletionAspectService',
            'TYPO3\\CMS\\Core\\Resource\\Processing\\ProcessorRegistry' => 'getProcessorRegistryService',
            'TYPO3\\CMS\\Core\\Resource\\Processing\\TaskTypeRegistry' => 'getTaskTypeRegistryService',
            'TYPO3\\CMS\\Core\\Resource\\Rendering\\AudioTagRenderer' => 'getAudioTagRendererService',
            'TYPO3\\CMS\\Core\\Resource\\Rendering\\RendererRegistry' => 'getRendererRegistryService',
            'TYPO3\\CMS\\Core\\Resource\\Rendering\\VideoTagRenderer' => 'getVideoTagRendererService',
            'TYPO3\\CMS\\Core\\Resource\\Rendering\\VimeoRenderer' => 'getVimeoRendererService',
            'TYPO3\\CMS\\Core\\Resource\\Rendering\\YouTubeRenderer' => 'getYouTubeRendererService',
            'TYPO3\\CMS\\Core\\Resource\\ResourceFactory' => 'getResourceFactoryService',
            'TYPO3\\CMS\\Core\\Resource\\Security\\FileMetadataPermissionsAspect' => 'getFileMetadataPermissionsAspectService',
            'TYPO3\\CMS\\Core\\Resource\\Security\\StoragePermissionsAspect' => 'getStoragePermissionsAspectService',
            'TYPO3\\CMS\\Core\\Resource\\Security\\SvgEventListener' => 'getSvgEventListenerService',
            'TYPO3\\CMS\\Core\\Resource\\Security\\SvgHookHandler' => 'getSvgHookHandlerService',
            'TYPO3\\CMS\\Core\\Resource\\Security\\SvgTypeCheck' => 'getSvgTypeCheckService',
            'TYPO3\\CMS\\Core\\Resource\\StorageRepository' => 'getStorageRepositoryService',
            'TYPO3\\CMS\\Core\\Resource\\SynchronizeFolderRelations' => 'getSynchronizeFolderRelationsService',
            'TYPO3\\CMS\\Core\\Resource\\TextExtraction\\TextExtractorRegistry' => 'getTextExtractorRegistryService',
            'TYPO3\\CMS\\Core\\Routing\\BackendEntryPointResolver' => 'getBackendEntryPointResolverService',
            'TYPO3\\CMS\\Core\\Routing\\Enhancer\\VariableProcessor' => 'getVariableProcessorService',
            'TYPO3\\CMS\\Core\\Routing\\RequestContextFactory' => 'getRequestContextFactoryService',
            'TYPO3\\CMS\\Core\\Routing\\SiteMatcher' => 'getSiteMatcherService',
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\PolicyProvider' => 'getPolicyProviderService',
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\PolicyRegistry' => 'getPolicyRegistryService',
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Processing\\AssetHandler' => 'getAssetHandlerService',
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Processing\\GoogleMapsHandler' => 'getGoogleMapsHandlerService',
            'TYPO3\\CMS\\Core\\Service\\DependencyOrderingService' => 'getDependencyOrderingServiceService',
            'TYPO3\\CMS\\Core\\Service\\FlexFormService' => 'getFlexFormService2Service',
            'TYPO3\\CMS\\Core\\Service\\MarkerBasedTemplateService' => 'getMarkerBasedTemplateServiceService',
            'TYPO3\\CMS\\Core\\Service\\OpcodeCacheService' => 'getOpcodeCacheServiceService',
            'TYPO3\\CMS\\Core\\Session\\SessionManager' => 'getSessionManagerService',
            'TYPO3\\CMS\\Core\\TimeTracker\\TimeTracker' => 'getTimeTrackerService',
            'TYPO3\\CMS\\Core\\Tree\\TableConfiguration\\DatabaseTreeDataProvider' => 'getDatabaseTreeDataProviderService',
            'TYPO3\\CMS\\Core\\TypoScript\\AST\\AstBuilder' => 'getAstBuilderService',
            'TYPO3\\CMS\\Core\\TypoScript\\AST\\CommentAwareAstBuilder' => 'getCommentAwareAstBuilderService',
            'TYPO3\\CMS\\Core\\TypoScript\\AST\\Traverser\\AstTraverser' => 'getAstTraverserService',
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\StringTreeBuilder' => 'getStringTreeBuilderService',
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\SysTemplateRepository' => 'getSysTemplateRepositoryService',
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\SysTemplateTreeBuilder' => 'getSysTemplateTreeBuilderService',
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\TsConfigTreeBuilder' => 'getTsConfigTreeBuilderService',
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Visitor\\IncludeTreeAstBuilderVisitor' => 'getIncludeTreeAstBuilderVisitorService',
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Visitor\\IncludeTreeCommentAwareAstBuilderVisitor' => 'getIncludeTreeCommentAwareAstBuilderVisitorService',
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Visitor\\IncludeTreeConditionMatcherVisitor' => 'getIncludeTreeConditionMatcherVisitorService',
            'TYPO3\\CMS\\Core\\TypoScript\\PageTsConfigFactory' => 'getPageTsConfigFactoryService',
            'TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\LosslessTokenizer' => 'getLosslessTokenizerService',
            'TYPO3\\CMS\\Core\\TypoScript\\TypoScriptService' => 'getTypoScriptServiceService',
            'TYPO3\\CMS\\Core\\TypoScript\\TypoScriptStringFactory' => 'getTypoScriptStringFactoryService',
            'TYPO3\\CMS\\Core\\TypoScript\\UserTsConfigFactory' => 'getUserTsConfigFactoryService',
            'TYPO3\\CMS\\Core\\ViewHelpers\\IconForRecordViewHelper' => 'getIconForRecordViewHelperService',
            'TYPO3\\CMS\\Core\\ViewHelpers\\IconForResourceViewHelper' => 'getIconForResourceViewHelperService',
            'TYPO3\\CMS\\Core\\ViewHelpers\\IconViewHelper' => 'getIconViewHelperService',
            'TYPO3\\CMS\\Core\\ViewHelpers\\NormalizedUrlViewHelper' => 'getNormalizedUrlViewHelperService',
            'TYPO3\\CMS\\Dashboard\\Controller\\DashboardController' => 'getDashboardControllerService',
            'TYPO3\\CMS\\Dashboard\\Controller\\WidgetAjaxController' => 'getWidgetAjaxControllerService',
            'TYPO3\\CMS\\Dashboard\\DashboardPresetRegistry_decorated_1' => 'getDashboardPresetRegistryDecorated1Service',
            'TYPO3\\CMS\\Dashboard\\EventListener\\AfterBackendPageRenderEventListener' => 'getAfterBackendPageRenderEventListener2Service',
            'TYPO3\\CMS\\Dashboard\\ViewHelpers\\Widget\\ButtonViewHelper' => 'getButtonViewHelperService',
            'TYPO3\\CMS\\Dashboard\\WidgetGroupRegistry_decorated_1' => 'getWidgetGroupRegistryDecorated1Service',
            'TYPO3\\CMS\\Dashboard\\WidgetRegistry' => 'getWidgetRegistryService',
            'TYPO3\\CMS\\Extbase\\Configuration\\BackendConfigurationManager' => 'getBackendConfigurationManagerService',
            'TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager' => 'getConfigurationManagerService',
            'TYPO3\\CMS\\Extbase\\Configuration\\FrontendConfigurationManager' => 'getFrontendConfigurationManagerService',
            'TYPO3\\CMS\\Extbase\\Core\\Bootstrap' => 'getBootstrapService',
            'TYPO3\\CMS\\Extbase\\EventListener\\AddDefaultModuleIcon' => 'getAddDefaultModuleIconService',
            'TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService' => 'getMvcPropertyMappingConfigurationServiceService',
            'TYPO3\\CMS\\Extbase\\Mvc\\View\\JsonView' => 'getJsonViewService',
            'TYPO3\\CMS\\Extbase\\Mvc\\Web\\RequestBuilder' => 'getRequestBuilderService',
            'TYPO3\\CMS\\Extbase\\Mvc\\Web\\Routing\\UriBuilder' => 'getUriBuilder2Service',
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Backend' => 'getBackendService',
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\DataMapFactory' => 'getDataMapFactoryService',
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\DataMapper' => 'getDataMapperService',
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager' => 'getPersistenceManagerService',
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\QueryObjectModelFactory' => 'getQueryObjectModelFactoryService',
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Query' => 'getQueryService',
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryFactory' => 'getQueryFactoryService',
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryResult' => 'getQueryResultService',
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Storage\\Typo3DbBackend' => 'getTypo3DbBackendService',
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Storage\\Typo3DbQueryParser' => 'getTypo3DbQueryParserService',
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Typo3QuerySettings' => 'getTypo3QuerySettingsService',
            'TYPO3\\CMS\\Extbase\\Persistence\\Repository' => 'getRepositoryService',
            'TYPO3\\CMS\\Extbase\\Property\\PropertyMapper' => 'getPropertyMapperService',
            'TYPO3\\CMS\\Extbase\\Property\\PropertyMappingConfigurationBuilder' => 'getPropertyMappingConfigurationBuilderService',
            'TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\ArrayConverter' => 'getArrayConverterService',
            'TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\BooleanConverter' => 'getBooleanConverterService',
            'TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\CoreTypeConverter' => 'getCoreTypeConverterService',
            'TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\DateTimeConverter' => 'getDateTimeConverterService',
            'TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\EnumConverter' => 'getEnumConverterService',
            'TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\FileConverter' => 'getFileConverterService',
            'TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\FileReferenceConverter' => 'getFileReferenceConverterService',
            'TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\FloatConverter' => 'getFloatConverterService',
            'TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\FolderConverter' => 'getFolderConverterService',
            'TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\IntegerConverter' => 'getIntegerConverterService',
            'TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\ObjectConverter' => 'getObjectConverterService',
            'TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\ObjectStorageConverter' => 'getObjectStorageConverterService',
            'TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\PersistentObjectConverter' => 'getPersistentObjectConverterService',
            'TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\StringConverter' => 'getStringConverterService',
            'TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService' => 'getReflectionServiceService',
            'TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService' => 'getHashServiceService',
            'TYPO3\\CMS\\Extbase\\Service\\CacheService' => 'getCacheServiceService',
            'TYPO3\\CMS\\Extbase\\Service\\ExtensionService' => 'getExtensionServiceService',
            'TYPO3\\CMS\\Extbase\\Service\\ImageService' => 'getImageServiceService',
            'TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver' => 'getValidatorResolverService',
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\AlphanumericValidator' => 'getAlphanumericValidatorService',
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\BooleanValidator' => 'getBooleanValidatorService',
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\CollectionValidator' => 'getCollectionValidatorService',
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\ConjunctionValidator' => 'getConjunctionValidatorService',
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\DateTimeValidator' => 'getDateTimeValidatorService',
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\DisjunctionValidator' => 'getDisjunctionValidatorService',
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\EmailAddressValidator' => 'getEmailAddressValidatorService',
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\FloatValidator' => 'getFloatValidatorService',
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\GenericObjectValidator' => 'getGenericObjectValidatorService',
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\IntegerValidator' => 'getIntegerValidatorService',
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\NotEmptyValidator' => 'getNotEmptyValidatorService',
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\NumberRangeValidator' => 'getNumberRangeValidatorService',
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\NumberValidator' => 'getNumberValidatorService',
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\RegularExpressionValidator' => 'getRegularExpressionValidatorService',
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\StringLengthValidator' => 'getStringLengthValidatorService',
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\StringValidator' => 'getStringValidatorService',
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\TextValidator' => 'getTextValidatorService',
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\UrlValidator' => 'getUrlValidatorService',
            'TYPO3\\CMS\\Extensionmanager\\Command\\ActivateExtensionCommand' => 'getActivateExtensionCommandService',
            'TYPO3\\CMS\\Extensionmanager\\Command\\DeactivateExtensionCommand' => 'getDeactivateExtensionCommandService',
            'TYPO3\\CMS\\Extensionmanager\\Command\\SetupExtensionsCommand' => 'getSetupExtensionsCommandService',
            'TYPO3\\CMS\\Extensionmanager\\Controller\\AbstractController' => 'getAbstractControllerService',
            'TYPO3\\CMS\\Extensionmanager\\Controller\\ActionController' => 'getActionControllerService',
            'TYPO3\\CMS\\Extensionmanager\\Controller\\DistributionController' => 'getDistributionControllerService',
            'TYPO3\\CMS\\Extensionmanager\\Controller\\DownloadController' => 'getDownloadControllerService',
            'TYPO3\\CMS\\Extensionmanager\\Controller\\ExtensionComposerStatusController' => 'getExtensionComposerStatusControllerService',
            'TYPO3\\CMS\\Extensionmanager\\Controller\\ListController' => 'getListControllerService',
            'TYPO3\\CMS\\Extensionmanager\\Controller\\UpdateFromTerController' => 'getUpdateFromTerControllerService',
            'TYPO3\\CMS\\Extensionmanager\\Controller\\UploadExtensionFileController' => 'getUploadExtensionFileControllerService',
            'TYPO3\\CMS\\Extensionmanager\\Domain\\Model\\DownloadQueue' => 'getDownloadQueueService',
            'TYPO3\\CMS\\Extensionmanager\\Domain\\Repository\\BulkExtensionRepositoryWriter' => 'getBulkExtensionRepositoryWriterService',
            'TYPO3\\CMS\\Extensionmanager\\Domain\\Repository\\ExtensionRepository' => 'getExtensionRepositoryService',
            'TYPO3\\CMS\\Extensionmanager\\Remote\\RemoteRegistry' => 'getRemoteRegistryService',
            'TYPO3\\CMS\\Extensionmanager\\Report\\ExtensionComposerStatus' => 'getExtensionComposerStatusService',
            'TYPO3\\CMS\\Extensionmanager\\Service\\ExtensionManagementService' => 'getExtensionManagementServiceService',
            'TYPO3\\CMS\\Extensionmanager\\Utility\\DependencyUtility' => 'getDependencyUtilityService',
            'TYPO3\\CMS\\Extensionmanager\\Utility\\EmConfUtility' => 'getEmConfUtilityService',
            'TYPO3\\CMS\\Extensionmanager\\Utility\\FileHandlingUtility' => 'getFileHandlingUtilityService',
            'TYPO3\\CMS\\Extensionmanager\\Utility\\InstallUtility' => 'getInstallUtilityService',
            'TYPO3\\CMS\\Extensionmanager\\Utility\\ListUtility' => 'getListUtilityService',
            'TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\Be\\TriggerViewHelper' => 'getTriggerViewHelperService',
            'TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ConstraintsViewHelper' => 'getConstraintsViewHelperService',
            'TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\DownloadExtensionViewHelper' => 'getDownloadExtensionViewHelperService',
            'TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\InstallationStateCssClassViewHelper' => 'getInstallationStateCssClassViewHelperService',
            'TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ProcessAvailableActionsViewHelper' => 'getProcessAvailableActionsViewHelperService',
            'TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ReloadSqlDataViewHelper' => 'getReloadSqlDataViewHelperService',
            'TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\RemoveExtensionViewHelper' => 'getRemoveExtensionViewHelperService',
            'TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ToggleExtensionInstallationStateViewHelper' => 'getToggleExtensionInstallationStateViewHelperService',
            'TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\Typo3DependencyViewHelper' => 'getTypo3DependencyViewHelperService',
            'TYPO3\\CMS\\Filelist\\Controller\\FileDownloadController' => 'getFileDownloadControllerService',
            'TYPO3\\CMS\\Filelist\\Controller\\FileListController' => 'getFileListControllerService',
            'TYPO3\\CMS\\Filelist\\Controller\\File\\CreateFileController' => 'getCreateFileControllerService',
            'TYPO3\\CMS\\Filelist\\Controller\\File\\CreateFolderController' => 'getCreateFolderControllerService',
            'TYPO3\\CMS\\Filelist\\Controller\\File\\EditFileController' => 'getEditFileControllerService',
            'TYPO3\\CMS\\Filelist\\Controller\\File\\FileUploadController' => 'getFileUploadControllerService',
            'TYPO3\\CMS\\Filelist\\Controller\\File\\RenameFileController' => 'getRenameFileControllerService',
            'TYPO3\\CMS\\Filelist\\Controller\\File\\ReplaceFileController' => 'getReplaceFileControllerService',
            'TYPO3\\CMS\\Filelist\\LinkHandler\\FileLinkHandler' => 'getFileLinkHandlerService',
            'TYPO3\\CMS\\Filelist\\LinkHandler\\FolderLinkHandler' => 'getFolderLinkHandlerService',
            'TYPO3\\CMS\\FluidStyledContent\\ViewHelpers\\Link\\ClickEnlargeViewHelper' => 'getClickEnlargeViewHelperService',
            'TYPO3\\CMS\\Fluid\\Core\\Rendering\\RenderingContextFactory' => 'getRenderingContextFactoryService',
            'TYPO3\\CMS\\Fluid\\Core\\ViewHelper\\ViewHelperResolverFactory' => 'getViewHelperResolverFactoryService',
            'TYPO3\\CMS\\Fluid\\Core\\ViewHelper\\ViewHelperResolverFactoryInterface' => 'getViewHelperResolverFactoryInterfaceService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Asset\\CssViewHelper' => 'getCssViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Asset\\ScriptViewHelper' => 'getScriptViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Buttons\\CshViewHelper' => 'getCshViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\InfoboxViewHelper' => 'getInfoboxViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Labels\\CshViewHelper' => 'getCshViewHelper2Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\LinkViewHelper' => 'getLinkViewHelper2Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Menus\\ActionMenuItemGroupViewHelper' => 'getActionMenuItemGroupViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Menus\\ActionMenuItemViewHelper' => 'getActionMenuItemViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Menus\\ActionMenuViewHelper' => 'getActionMenuViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\PageInfoViewHelper' => 'getPageInfoViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\PagePathViewHelper' => 'getPagePathViewHelper2Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\PageRendererViewHelper' => 'getPageRendererViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Security\\IfAuthenticatedViewHelper' => 'getIfAuthenticatedViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Security\\IfHasRoleViewHelper' => 'getIfHasRoleViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\TableListViewHelper' => 'getTableListViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\UriViewHelper' => 'getUriViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\CObjectViewHelper' => 'getCObjectViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\DebugViewHelper' => 'getDebugViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Debug\\RenderViewHelper' => 'getRenderViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\FlashMessagesViewHelper' => 'getFlashMessagesViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\FormViewHelper' => 'getFormViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\ButtonViewHelper' => 'getButtonViewHelper2Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\CheckboxViewHelper' => 'getCheckboxViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\CountrySelectViewHelper' => 'getCountrySelectViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\HiddenViewHelper' => 'getHiddenViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\PasswordViewHelper' => 'getPasswordViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\RadioViewHelper' => 'getRadioViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\SelectViewHelper' => 'getSelectViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\Select\\OptgroupViewHelper' => 'getOptgroupViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\Select\\OptionViewHelper' => 'getOptionViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\SubmitViewHelper' => 'getSubmitViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\TextareaViewHelper' => 'getTextareaViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\TextfieldViewHelper' => 'getTextfieldViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\UploadViewHelper' => 'getUploadViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\ValidationResultsViewHelper' => 'getValidationResultsViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\BytesViewHelper' => 'getBytesViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\CaseViewHelper' => 'getCaseViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\CropViewHelper' => 'getCropViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\CurrencyViewHelper' => 'getCurrencyViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\DateViewHelper' => 'getDateViewHelper2Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\HtmlViewHelper' => 'getHtmlViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\HtmlentitiesDecodeViewHelper' => 'getHtmlentitiesDecodeViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\HtmlentitiesViewHelper' => 'getHtmlentitiesViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\JsonViewHelper' => 'getJsonViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\Nl2brViewHelper' => 'getNl2brViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\NumberViewHelper' => 'getNumberViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\PaddingViewHelper' => 'getPaddingViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\StripTagsViewHelper' => 'getStripTagsViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\TrimViewHelper' => 'getTrimViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\UrlencodeViewHelper' => 'getUrlencodeViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\ImageViewHelper' => 'getImageViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\ActionViewHelper' => 'getActionViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\EmailViewHelper' => 'getEmailViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\ExternalViewHelper' => 'getExternalViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\FileViewHelper' => 'getFileViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\PageViewHelper' => 'getPageViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\TypolinkViewHelper' => 'getTypolinkViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\MediaViewHelper' => 'getMediaViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\RenderViewHelper' => 'getRenderViewHelper2Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Sanitize\\HtmlViewHelper' => 'getHtmlViewHelper2Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Security\\IfAuthenticatedViewHelper' => 'getIfAuthenticatedViewHelper2Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Security\\IfHasRoleViewHelper' => 'getIfHasRoleViewHelper2Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Security\\NonceViewHelper' => 'getNonceViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Transform\\HtmlViewHelper' => 'getHtmlViewHelper3Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\TranslateViewHelper' => 'getTranslateViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ActionViewHelper' => 'getActionViewHelper2Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ExternalViewHelper' => 'getExternalViewHelper2Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ImageViewHelper' => 'getImageViewHelper2Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\PageViewHelper' => 'getPageViewHelper2Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ResourceViewHelper' => 'getResourceViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\TypolinkViewHelper' => 'getTypolinkViewHelper2Service',
            'TYPO3\\CMS\\Fluid\\View\\StandaloneView' => 'getStandaloneViewService',
            'TYPO3\\CMS\\Fluid\\View\\TemplateView' => 'getTemplateViewService',
            'TYPO3\\CMS\\Form\\Controller\\FormEditorController' => 'getFormEditorControllerService',
            'TYPO3\\CMS\\Form\\Controller\\FormFrontendController' => 'getFormFrontendControllerService',
            'TYPO3\\CMS\\Form\\Controller\\FormManagerController' => 'getFormManagerControllerService',
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\ConfigurationService' => 'getConfigurationService2Service',
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinitionConversionService' => 'getFormDefinitionConversionServiceService',
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinitionValidationService' => 'getFormDefinitionValidationServiceService',
            'TYPO3\\CMS\\Form\\Domain\\Factory\\ArrayFormFactory' => 'getArrayFormFactoryService',
            'TYPO3\\CMS\\Form\\Domain\\Finishers\\ClosureFinisher' => 'getClosureFinisherService',
            'TYPO3\\CMS\\Form\\Domain\\Finishers\\ConfirmationFinisher' => 'getConfirmationFinisherService',
            'TYPO3\\CMS\\Form\\Domain\\Finishers\\DeleteUploadsFinisher' => 'getDeleteUploadsFinisherService',
            'TYPO3\\CMS\\Form\\Domain\\Finishers\\EmailFinisher' => 'getEmailFinisherService',
            'TYPO3\\CMS\\Form\\Domain\\Finishers\\FlashMessageFinisher' => 'getFlashMessageFinisherService',
            'TYPO3\\CMS\\Form\\Domain\\Finishers\\RedirectFinisher' => 'getRedirectFinisherService',
            'TYPO3\\CMS\\Form\\Domain\\Finishers\\SaveToDatabaseFinisher' => 'getSaveToDatabaseFinisherService',
            'TYPO3\\CMS\\Form\\Domain\\Renderer\\FluidFormRenderer' => 'getFluidFormRendererService',
            'TYPO3\\CMS\\Form\\Domain\\Runtime\\FormRuntime' => 'getFormRuntimeService',
            'TYPO3\\CMS\\Form\\EventListener\\DataStructureIdentifierListener' => 'getDataStructureIdentifierListenerService',
            'TYPO3\\CMS\\Form\\EventListener\\ProcessFileListActionsEventListener' => 'getProcessFileListActionsEventListenerService',
            'TYPO3\\CMS\\Form\\Mvc\\Configuration\\ConfigurationManager' => 'getConfigurationManager2Service',
            'TYPO3\\CMS\\Form\\Mvc\\Configuration\\TypoScriptService' => 'getTypoScriptService2Service',
            'TYPO3\\CMS\\Form\\Mvc\\Persistence\\FormPersistenceManagerInterface' => 'getFormPersistenceManagerInterfaceService',
            'TYPO3\\CMS\\Form\\Mvc\\ProcessingRule' => 'getProcessingRuleService',
            'TYPO3\\CMS\\Form\\Mvc\\Property\\PropertyMappingConfiguration' => 'getPropertyMappingConfigurationService',
            'TYPO3\\CMS\\Form\\Mvc\\Property\\TypeConverter\\FormDefinitionArrayConverter' => 'getFormDefinitionArrayConverterService',
            'TYPO3\\CMS\\Form\\Mvc\\Property\\TypeConverter\\UploadedFileReferenceConverter' => 'getUploadedFileReferenceConverterService',
            'TYPO3\\CMS\\Form\\Mvc\\Validation\\CountValidator' => 'getCountValidatorService',
            'TYPO3\\CMS\\Form\\Mvc\\Validation\\DateRangeValidator' => 'getDateRangeValidatorService',
            'TYPO3\\CMS\\Form\\Mvc\\Validation\\EmptyValidator' => 'getEmptyValidatorService',
            'TYPO3\\CMS\\Form\\Mvc\\Validation\\FileSizeValidator' => 'getFileSizeValidatorService',
            'TYPO3\\CMS\\Form\\Mvc\\Validation\\MimeTypeValidator' => 'getMimeTypeValidatorService',
            'TYPO3\\CMS\\Form\\Service\\TranslationService' => 'getTranslationServiceService',
            'TYPO3\\CMS\\Form\\Slot\\FilePersistenceSlot' => 'getFilePersistenceSlotService',
            'TYPO3\\CMS\\Form\\Slot\\ResourcePublicationSlot' => 'getResourcePublicationSlotService',
            'TYPO3\\CMS\\Form\\SoftReference\\FormPersistenceIdentifierSoftReferenceParser' => 'getFormPersistenceIdentifierSoftReferenceParserService',
            'TYPO3\\CMS\\Form\\ViewHelpers\\Be\\MaximumFileSizeViewHelper' => 'getMaximumFileSizeViewHelperService',
            'TYPO3\\CMS\\Form\\ViewHelpers\\Be\\RenderContentElementPreviewViewHelper' => 'getRenderContentElementPreviewViewHelperService',
            'TYPO3\\CMS\\Form\\ViewHelpers\\FormViewHelper' => 'getFormViewHelper2Service',
            'TYPO3\\CMS\\Form\\ViewHelpers\\Form\\DatePickerViewHelper' => 'getDatePickerViewHelperService',
            'TYPO3\\CMS\\Form\\ViewHelpers\\Form\\TimePickerViewHelper' => 'getTimePickerViewHelperService',
            'TYPO3\\CMS\\Form\\ViewHelpers\\Form\\UploadedResourceViewHelper' => 'getUploadedResourceViewHelperService',
            'TYPO3\\CMS\\Form\\ViewHelpers\\GridColumnClassAutoConfigurationViewHelper' => 'getGridColumnClassAutoConfigurationViewHelperService',
            'TYPO3\\CMS\\Form\\ViewHelpers\\RenderAllFormValuesViewHelper' => 'getRenderAllFormValuesViewHelperService',
            'TYPO3\\CMS\\Form\\ViewHelpers\\RenderFormValueViewHelper' => 'getRenderFormValueViewHelperService',
            'TYPO3\\CMS\\Form\\ViewHelpers\\RenderRenderableViewHelper' => 'getRenderRenderableViewHelperService',
            'TYPO3\\CMS\\Form\\ViewHelpers\\RenderViewHelper' => 'getRenderViewHelper3Service',
            'TYPO3\\CMS\\Form\\ViewHelpers\\TranslateElementErrorViewHelper' => 'getTranslateElementErrorViewHelperService',
            'TYPO3\\CMS\\Form\\ViewHelpers\\TranslateElementPropertyViewHelper' => 'getTranslateElementPropertyViewHelperService',
            'TYPO3\\CMS\\FrontendLogin\\Controller\\LoginController' => 'getLoginController2Service',
            'TYPO3\\CMS\\FrontendLogin\\Controller\\PasswordRecoveryController' => 'getPasswordRecoveryControllerService',
            'TYPO3\\CMS\\FrontendLogin\\Event\\ProcessRequestTokenListener' => 'getProcessRequestTokenListenerService',
            'TYPO3\\CMS\\FrontendLogin\\Service\\ValidatorResolverService' => 'getValidatorResolverServiceService',
            'TYPO3\\CMS\\Frontend\\Aspect\\FileMetadataOverlayAspect' => 'getFileMetadataOverlayAspectService',
            'TYPO3\\CMS\\Frontend\\Cache\\CacheLifetimeCalculator' => 'getCacheLifetimeCalculatorService',
            'TYPO3\\CMS\\Frontend\\ContentObject\\ContentDataProcessor' => 'getContentDataProcessorService',
            'TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectFactory' => 'getContentObjectFactoryService',
            'TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer' => 'getContentObjectRendererService',
            'TYPO3\\CMS\\Frontend\\ContentObject\\Exception\\ProductionExceptionHandler' => 'getProductionExceptionHandler2Service',
            'TYPO3\\CMS\\Frontend\\ContentObject\\Menu\\MenuContentObjectFactory' => 'getMenuContentObjectFactoryService',
            'TYPO3\\CMS\\Frontend\\Controller\\ShowImageController' => 'getShowImageControllerService',
            'TYPO3\\CMS\\Frontend\\DataProcessing\\DatabaseQueryProcessor' => 'getDatabaseQueryProcessorService',
            'TYPO3\\CMS\\Frontend\\DataProcessing\\MenuProcessor' => 'getMenuProcessorService',
            'TYPO3\\CMS\\Frontend\\Html\\HtmlWorker' => 'getHtmlWorkerService',
            'TYPO3\\CMS\\Frontend\\Http\\Application' => 'getApplication2Service',
            'TYPO3\\CMS\\Frontend\\Http\\RequestHandler' => 'getRequestHandler2Service',
            'TYPO3\\CMS\\Frontend\\Middleware\\BackendUserAuthenticator' => 'getBackendUserAuthenticator2Service',
            'TYPO3\\CMS\\Frontend\\Middleware\\ContentLengthResponseHeader' => 'getContentLengthResponseHeaderService',
            'TYPO3\\CMS\\Frontend\\Middleware\\ContentSecurityPolicyHeaders' => 'getContentSecurityPolicyHeaders2Service',
            'TYPO3\\CMS\\Frontend\\Middleware\\ContentSecurityPolicyReporter' => 'getContentSecurityPolicyReporter2Service',
            'TYPO3\\CMS\\Frontend\\Middleware\\EidHandler' => 'getEidHandlerService',
            'TYPO3\\CMS\\Frontend\\Middleware\\FrontendUserAuthenticator' => 'getFrontendUserAuthenticatorService',
            'TYPO3\\CMS\\Frontend\\Middleware\\MaintenanceMode' => 'getMaintenanceModeService',
            'TYPO3\\CMS\\Frontend\\Middleware\\OutputCompression' => 'getOutputCompression2Service',
            'TYPO3\\CMS\\Frontend\\Middleware\\PageArgumentValidator' => 'getPageArgumentValidatorService',
            'TYPO3\\CMS\\Frontend\\Middleware\\PageResolver' => 'getPageResolverService',
            'TYPO3\\CMS\\Frontend\\Middleware\\PrepareTypoScriptFrontendRendering' => 'getPrepareTypoScriptFrontendRenderingService',
            'TYPO3\\CMS\\Frontend\\Middleware\\PreviewSimulator' => 'getPreviewSimulatorService',
            'TYPO3\\CMS\\Frontend\\Middleware\\ShortcutAndMountPointRedirect' => 'getShortcutAndMountPointRedirectService',
            'TYPO3\\CMS\\Frontend\\Middleware\\SiteBaseRedirectResolver' => 'getSiteBaseRedirectResolverService',
            'TYPO3\\CMS\\Frontend\\Middleware\\SiteResolver' => 'getSiteResolver2Service',
            'TYPO3\\CMS\\Frontend\\Middleware\\StaticRouteResolver' => 'getStaticRouteResolverService',
            'TYPO3\\CMS\\Frontend\\Middleware\\TimeTrackerInitialization' => 'getTimeTrackerInitializationService',
            'TYPO3\\CMS\\Frontend\\Middleware\\TypoScriptFrontendInitialization' => 'getTypoScriptFrontendInitializationService',
            'TYPO3\\CMS\\Frontend\\Page\\CacheHashCalculator' => 'getCacheHashCalculatorService',
            'TYPO3\\CMS\\Frontend\\Resource\\PublicUrlPrefixer' => 'getPublicUrlPrefixer2Service',
            'TYPO3\\CMS\\Frontend\\Typolink\\LinkFactory' => 'getLinkFactoryService',
            'TYPO3\\CMS\\Frontend\\Utility\\CompressionUtility' => 'getCompressionUtilityService',
            'TYPO3\\CMS\\Impexp\\Command\\ExportCommand' => 'getExportCommandService',
            'TYPO3\\CMS\\Impexp\\Command\\ImportCommand' => 'getImportCommandService',
            'TYPO3\\CMS\\Impexp\\Controller\\ExportController' => 'getExportControllerService',
            'TYPO3\\CMS\\Impexp\\Controller\\ImportController' => 'getImportControllerService',
            'TYPO3\\CMS\\Impexp\\Utility\\ImportExportUtility' => 'getImportExportUtilityService',
            'TYPO3\\CMS\\Impexp\\ViewHelpers\\InArrayViewHelper' => 'getInArrayViewHelper2Service',
            'TYPO3\\CMS\\IndexedSearch\\Controller\\AdministrationController' => 'getAdministrationController2Service',
            'TYPO3\\CMS\\IndexedSearch\\Controller\\SearchController' => 'getSearchControllerService',
            'TYPO3\\CMS\\IndexedSearch\\EventListener\\FrontendGenerationPageIndexingTrigger' => 'getFrontendGenerationPageIndexingTriggerService',
            'TYPO3\\CMS\\IndexedSearch\\Service\\DatabaseSchemaService' => 'getDatabaseSchemaService2Service',
            'TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\Format\\DateTimeViewHelper' => 'getDateTimeViewHelperService',
            'TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\Format\\FlagValueViewHelper' => 'getFlagValueViewHelperService',
            'TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\Format\\GroupListViewHelper' => 'getGroupListViewHelperService',
            'TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\PageBrowsingResultsViewHelper' => 'getPageBrowsingResultsViewHelperService',
            'TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\PageBrowsingViewHelper' => 'getPageBrowsingViewHelperService',
            'TYPO3\\CMS\\Info\\Controller\\InfoModuleController' => 'getInfoModuleControllerService',
            'TYPO3\\CMS\\Info\\Controller\\InfoPageTyposcriptConfigController' => 'getInfoPageTyposcriptConfigControllerService',
            'TYPO3\\CMS\\Info\\Controller\\PageInformationController' => 'getPageInformationControllerService',
            'TYPO3\\CMS\\Info\\Controller\\TranslationStatusController' => 'getTranslationStatusControllerService',
            'TYPO3\\CMS\\Install\\Authentication\\AuthenticationService' => 'getAuthenticationServiceService',
            'TYPO3\\CMS\\Install\\Command\\LanguagePackCommand' => 'getLanguagePackCommandService',
            'TYPO3\\CMS\\Install\\Command\\SetupCommand' => 'getSetupCommandService',
            'TYPO3\\CMS\\Install\\Command\\UpgradeWizardListCommand' => 'getUpgradeWizardListCommandService',
            'TYPO3\\CMS\\Install\\Command\\UpgradeWizardRunCommand' => 'getUpgradeWizardRunCommandService',
            'TYPO3\\CMS\\Install\\Controller\\BackendModuleController' => 'getBackendModuleControllerService',
            'TYPO3\\CMS\\Install\\Controller\\EnvironmentController' => 'getEnvironmentControllerService',
            'TYPO3\\CMS\\Install\\Controller\\IconController' => 'getIconControllerService',
            'TYPO3\\CMS\\Install\\Controller\\InstallerController' => 'getInstallerControllerService',
            'TYPO3\\CMS\\Install\\Controller\\LayoutController' => 'getLayoutControllerService',
            'TYPO3\\CMS\\Install\\Controller\\LoginController' => 'getLoginController3Service',
            'TYPO3\\CMS\\Install\\Controller\\MaintenanceController' => 'getMaintenanceControllerService',
            'TYPO3\\CMS\\Install\\Controller\\SettingsController' => 'getSettingsControllerService',
            'TYPO3\\CMS\\Install\\Controller\\UpgradeController' => 'getUpgradeControllerService',
            'TYPO3\\CMS\\Install\\Database\\PermissionsCheck' => 'getPermissionsCheckService',
            'TYPO3\\CMS\\Install\\Http\\Application' => 'getApplication3Service',
            'TYPO3\\CMS\\Install\\Http\\NotFoundRequestHandler' => 'getNotFoundRequestHandlerService',
            'TYPO3\\CMS\\Install\\Middleware\\Installer' => 'getInstallerService',
            'TYPO3\\CMS\\Install\\Middleware\\Maintenance' => 'getMaintenanceService',
            'TYPO3\\CMS\\Install\\Service\\ClearCacheService' => 'getClearCacheServiceService',
            'TYPO3\\CMS\\Install\\Service\\CoreUpdateService' => 'getCoreUpdateServiceService',
            'TYPO3\\CMS\\Install\\Service\\CoreVersionService' => 'getCoreVersionServiceService',
            'TYPO3\\CMS\\Install\\Service\\DatabaseUpgradeWizardsService' => 'getDatabaseUpgradeWizardsServiceService',
            'TYPO3\\CMS\\Install\\Service\\LanguagePackService' => 'getLanguagePackServiceService',
            'TYPO3\\CMS\\Install\\Service\\LateBootService' => 'getLateBootServiceService',
            'TYPO3\\CMS\\Install\\Service\\LoadTcaService' => 'getLoadTcaServiceService',
            'TYPO3\\CMS\\Install\\Service\\SetupDatabaseService' => 'getSetupDatabaseServiceService',
            'TYPO3\\CMS\\Install\\Service\\SetupService' => 'getSetupServiceService',
            'TYPO3\\CMS\\Install\\Service\\SilentConfigurationUpgradeService' => 'getSilentConfigurationUpgradeServiceService',
            'TYPO3\\CMS\\Install\\Service\\SilentTemplateFileUpgradeService' => 'getSilentTemplateFileUpgradeServiceService',
            'TYPO3\\CMS\\Install\\Service\\Typo3tempFileService' => 'getTypo3tempFileServiceService',
            'TYPO3\\CMS\\Install\\Service\\UpgradeWizardsService' => 'getUpgradeWizardsServiceService',
            'TYPO3\\CMS\\Install\\Service\\WebServerConfigurationFileService' => 'getWebServerConfigurationFileServiceService',
            'TYPO3\\CMS\\Install\\Updates\\RowUpdater\\SysRedirectRootPageMoveMigration' => 'getSysRedirectRootPageMoveMigrationService',
            'TYPO3\\CMS\\Linkvalidator\\Controller\\LinkValidatorController' => 'getLinkValidatorControllerService',
            'TYPO3\\CMS\\Linkvalidator\\EventListener\\CheckBrokenRteLinkEventListener' => 'getCheckBrokenRteLinkEventListenerService',
            'TYPO3\\CMS\\Linkvalidator\\LinkAnalyzer' => 'getLinkAnalyzerService',
            'TYPO3\\CMS\\Linkvalidator\\Linktype\\ExternalLinktype' => 'getExternalLinktypeService',
            'TYPO3\\CMS\\Linkvalidator\\Linktype\\LinktypeRegistry' => 'getLinktypeRegistryService',
            'TYPO3\\CMS\\Linkvalidator\\Repository\\BrokenLinkRepository' => 'getBrokenLinkRepositoryService',
            'TYPO3\\CMS\\Linkvalidator\\Result\\LinkAnalyzerResult' => 'getLinkAnalyzerResultService',
            'TYPO3\\CMS\\Lowlevel\\Command\\CleanFlexFormsCommand' => 'getCleanFlexFormsCommandService',
            'TYPO3\\CMS\\Lowlevel\\Command\\CleanUpLocalProcessedFilesCommand' => 'getCleanUpLocalProcessedFilesCommandService',
            'TYPO3\\CMS\\Lowlevel\\Command\\DeletedRecordsCommand' => 'getDeletedRecordsCommandService',
            'TYPO3\\CMS\\Lowlevel\\Command\\ListSysLogCommand' => 'getListSysLogCommandService',
            'TYPO3\\CMS\\Lowlevel\\Command\\MissingRelationsCommand' => 'getMissingRelationsCommandService',
            'TYPO3\\CMS\\Lowlevel\\Command\\OrphanRecordsCommand' => 'getOrphanRecordsCommandService',
            'TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\ProviderRegistry' => 'getProviderRegistryService',
            'TYPO3\\CMS\\Lowlevel\\Controller\\ConfigurationController' => 'getConfigurationControllerService',
            'TYPO3\\CMS\\Lowlevel\\Controller\\DatabaseIntegrityController' => 'getDatabaseIntegrityControllerService',
            'TYPO3\\CMS\\Lowlevel\\HookProvider\\ModifyBlindedConfigurationOptionsHookProvider' => 'getModifyBlindedConfigurationOptionsHookProviderService',
            'TYPO3\\CMS\\Opendocs\\Backend\\ToolbarItems\\OpendocsToolbarItem' => 'getOpendocsToolbarItemService',
            'TYPO3\\CMS\\Opendocs\\Controller\\OpenDocumentController' => 'getOpenDocumentControllerService',
            'TYPO3\\CMS\\Reactions\\Controller\\ManagementController' => 'getManagementControllerService',
            'TYPO3\\CMS\\Reactions\\Form\\ReactionItemsProcFunc' => 'getReactionItemsProcFuncService',
            'TYPO3\\CMS\\Reactions\\Http\\Middleware\\ReactionResolver' => 'getReactionResolverService',
            'TYPO3\\CMS\\Reactions\\Reaction\\CreateRecordReaction' => 'getCreateRecordReactionService',
            'TYPO3\\CMS\\Recycler\\Controller\\RecyclerAjaxController' => 'getRecyclerAjaxControllerService',
            'TYPO3\\CMS\\Recycler\\Controller\\RecyclerModuleController' => 'getRecyclerModuleControllerService',
            'TYPO3\\CMS\\Redirects\\Command\\CheckIntegrityCommand' => 'getCheckIntegrityCommandService',
            'TYPO3\\CMS\\Redirects\\Command\\CleanupRedirectsCommand' => 'getCleanupRedirectsCommandService',
            'TYPO3\\CMS\\Redirects\\Controller\\ManagementController' => 'getManagementController2Service',
            'TYPO3\\CMS\\Redirects\\Controller\\RecordHistoryRollbackController' => 'getRecordHistoryRollbackControllerService',
            'TYPO3\\CMS\\Redirects\\EventListener\\AddPageTypeZeroSource' => 'getAddPageTypeZeroSourceService',
            'TYPO3\\CMS\\Redirects\\EventListener\\AddPlainSlugReplacementSource' => 'getAddPlainSlugReplacementSourceService',
            'TYPO3\\CMS\\Redirects\\EventListener\\AfterBackendPageRendererEventListener' => 'getAfterBackendPageRendererEventListenerService',
            'TYPO3\\CMS\\Redirects\\EventListener\\IncrementHitCount' => 'getIncrementHitCountService',
            'TYPO3\\CMS\\Redirects\\EventListener\\RecordHistoryRollbackEventsListener' => 'getRecordHistoryRollbackEventsListenerService',
            'TYPO3\\CMS\\Redirects\\Hooks\\DataHandlerSlugUpdateHook' => 'getDataHandlerSlugUpdateHookService',
            'TYPO3\\CMS\\Redirects\\Http\\Middleware\\RedirectHandler' => 'getRedirectHandlerService',
            'TYPO3\\CMS\\Redirects\\Report\\Status\\RedirectStatus' => 'getRedirectStatusService',
            'TYPO3\\CMS\\Redirects\\ViewHelpers\\TargetPageIdViewHelper' => 'getTargetPageIdViewHelperService',
            'TYPO3\\CMS\\Reports\\Controller\\ReportController' => 'getReportControllerService',
            'TYPO3\\CMS\\Reports\\Report\\Status\\Status' => 'getStatusService',
            'TYPO3\\CMS\\Reports\\Report\\WarningsForAboutModule' => 'getWarningsForAboutModuleService',
            'TYPO3\\CMS\\RteCKEditor\\Controller\\BrowseLinksController' => 'getBrowseLinksControllerService',
            'TYPO3\\CMS\\Scheduler\\Command\\SchedulerCommand' => 'getSchedulerCommandService',
            'TYPO3\\CMS\\Scheduler\\Command\\SchedulerExecuteCommand' => 'getSchedulerExecuteCommandService',
            'TYPO3\\CMS\\Scheduler\\Command\\SchedulerListCommand' => 'getSchedulerListCommandService',
            'TYPO3\\CMS\\Scheduler\\Controller\\AvailableSchedulerTasksController' => 'getAvailableSchedulerTasksControllerService',
            'TYPO3\\CMS\\Scheduler\\Controller\\SchedulerModuleController' => 'getSchedulerModuleControllerService',
            'TYPO3\\CMS\\Scheduler\\Controller\\SchedulerSetupCheckController' => 'getSchedulerSetupCheckControllerService',
            'TYPO3\\CMS\\Scheduler\\Domain\\Repository\\SchedulerTaskRepository' => 'getSchedulerTaskRepositoryService',
            'TYPO3\\CMS\\Scheduler\\Scheduler' => 'getSchedulerService',
            'TYPO3\\CMS\\Scheduler\\SystemInformation\\ToolbarItemProvider' => 'getToolbarItemProviderService',
            'TYPO3\\CMS\\Seo\\HrefLang\\HrefLangGenerator' => 'getHrefLangGeneratorService',
            'TYPO3\\CMS\\Seo\\MetaTag\\MetaTagGenerator' => 'getMetaTagGeneratorService',
            'TYPO3\\CMS\\Seo\\PageTitle\\SeoTitlePageTitleProvider' => 'getSeoTitlePageTitleProviderService',
            'TYPO3\\CMS\\Seo\\XmlSitemap\\XmlSitemapRenderer' => 'getXmlSitemapRendererService',
            'TYPO3\\CMS\\Setup\\Controller\\SetupModuleController' => 'getSetupModuleControllerService',
            'TYPO3\\CMS\\SysNote\\Provider\\ButtonBarProvider' => 'getButtonBarProviderService',
            'TYPO3\\CMS\\SysNote\\Provider\\InfoModuleProvider' => 'getInfoModuleProviderService',
            'TYPO3\\CMS\\SysNote\\Provider\\PageModuleProvider' => 'getPageModuleProviderService',
            'TYPO3\\CMS\\SysNote\\Provider\\RecordListProvider' => 'getRecordListProviderService',
            'TYPO3\\CMS\\T3editor\\Controller\\CodeCompletionController' => 'getCodeCompletionControllerService',
            'TYPO3\\CMS\\T3editor\\EventListener\\InitializeT3editorInEditFileForm' => 'getInitializeT3editorInEditFileFormService',
            'TYPO3\\CMS\\T3editor\\Registry\\AddonRegistry' => 'getAddonRegistryService',
            'TYPO3\\CMS\\T3editor\\Registry\\ModeRegistry' => 'getModeRegistryService',
            'TYPO3\\CMS\\T3editor\\T3editor' => 'getT3editorService',
            'TYPO3\\CMS\\Tstemplate\\Controller\\ActiveTypoScriptController' => 'getActiveTypoScriptControllerService',
            'TYPO3\\CMS\\Tstemplate\\Controller\\ConstantEditorController' => 'getConstantEditorControllerService',
            'TYPO3\\CMS\\Tstemplate\\Controller\\InfoModifyController' => 'getInfoModifyControllerService',
            'TYPO3\\CMS\\Tstemplate\\Controller\\TemplateAnalyzerController' => 'getTemplateAnalyzerControllerService',
            'TYPO3\\CMS\\Tstemplate\\Controller\\TemplateRecordsOverviewController' => 'getTemplateRecordsOverviewControllerService',
            'TYPO3\\CMS\\Tstemplate\\Hooks\\DataHandlerClearCachePostProcHook' => 'getDataHandlerClearCachePostProcHookService',
            'TYPO3\\CMS\\Viewpage\\Controller\\ViewModuleController' => 'getViewModuleControllerService',
            'TYPO3\\CMS\\Webhooks\\Controller\\ManagementController' => 'getManagementController3Service',
            'TYPO3\\CMS\\Webhooks\\Listener\\MessageListener' => 'getMessageListenerService',
            'TYPO3\\CMS\\Webhooks\\Listener\\PageModificationListener' => 'getPageModificationListenerService',
            'TYPO3\\CMS\\Webhooks\\MessageHandler\\WebhookMessageHandler' => 'getWebhookMessageHandlerService',
            'TYPO3\\CMS\\Webhooks\\Repository\\WebhookRepository' => 'getWebhookRepositoryService',
            'TYPO3\\CMS\\Webhooks\\Tca\\ItemsProcFunc\\WebhookTypesItemsProcFunc' => 'getWebhookTypesItemsProcFuncService',
            'TYPO3\\CMS\\Webhooks\\WebhookTypesRegistry' => 'getWebhookTypesRegistryService',
            'TYPO3\\CMS\\Workspaces\\Command\\AutoPublishCommand' => 'getAutoPublishCommandService',
            'TYPO3\\CMS\\Workspaces\\Command\\CleanupPreviewLinksCommand' => 'getCleanupPreviewLinksCommandService',
            'TYPO3\\CMS\\Workspaces\\Command\\WorkspaceVersionRecordsCommand' => 'getWorkspaceVersionRecordsCommandService',
            'TYPO3\\CMS\\Workspaces\\Controller\\AjaxController' => 'getAjaxController2Service',
            'TYPO3\\CMS\\Workspaces\\Controller\\PreviewController' => 'getPreviewControllerService',
            'TYPO3\\CMS\\Workspaces\\Controller\\Remote\\ActionHandler' => 'getActionHandlerService',
            'TYPO3\\CMS\\Workspaces\\Controller\\Remote\\RemoteServer' => 'getRemoteServerService',
            'TYPO3\\CMS\\Workspaces\\Controller\\ReviewController' => 'getReviewControllerService',
            'TYPO3\\CMS\\Workspaces\\EventListener\\PageTreeItemsHighlighter' => 'getPageTreeItemsHighlighterService',
            'TYPO3\\CMS\\Workspaces\\Hook\\BackendUtilityHook' => 'getBackendUtilityHookService',
            'TYPO3\\CMS\\Workspaces\\Hook\\DataHandlerHook' => 'getDataHandlerHook2Service',
            'TYPO3\\CMS\\Workspaces\\MessageHandler\\StageChangeNotificationHandler' => 'getStageChangeNotificationHandlerService',
            'TYPO3\\CMS\\Workspaces\\Middleware\\WorkspacePreview' => 'getWorkspacePreviewService',
            'TYPO3\\CMS\\Workspaces\\Middleware\\WorkspacePreviewPermissions' => 'getWorkspacePreviewPermissionsService',
            'TYPO3\\CMS\\Workspaces\\Notification\\StageChangeNotification' => 'getStageChangeNotificationService',
            'TYPO3\\CMS\\Workspaces\\Preview\\PreviewUriBuilder' => 'getPreviewUriBuilderService',
            'TYPO3\\CMS\\Workspaces\\Service\\Dependency\\CollectionService' => 'getCollectionServiceService',
            'TYPO3\\CMS\\Workspaces\\Service\\GridDataService' => 'getGridDataServiceService',
            'TYPO3\\CMS\\Workspaces\\Service\\HistoryService' => 'getHistoryServiceService',
            'TYPO3\\CMS\\Workspaces\\Service\\RecordService' => 'getRecordServiceService',
            'TYPO3\\CMS\\Workspaces\\Service\\StagesService' => 'getStagesServiceService',
            'TYPO3\\CMS\\Workspaces\\Service\\WorkspaceService' => 'getWorkspaceServiceService',
            'backend.middlewares' => 'getBackend_MiddlewaresService',
            'backend.modules.warmer' => 'getBackend_Modules_WarmerService',
            'backend.modules_decorated_42' => 'getBackend_ModulesDecorated42Service',
            'backend.routes.warmer' => 'getBackend_Routes_WarmerService',
            'backend.routes_decorated_42' => 'getBackend_RoutesDecorated42Service',
            'calendarizeIndexAmountWidgetConfiguration' => 'getCalendarizeIndexAmountWidgetConfigurationService',
            'calendarizeNextEventsWidgetConfiguration' => 'getCalendarizeNextEventsWidgetConfigurationService',
            'container.env_var_processors_locator' => 'getContainer_EnvVarProcessorsLocatorService',
            'content.security.policies_decorated_41' => 'getContent_Security_PoliciesDecorated41Service',
            'country.provider' => 'getCountry_ProviderService',
            'dashboard.configuration.warmer' => 'getDashboard_Configuration_WarmerService',
            'dashboard.presets_decorated_1' => 'getDashboard_PresetsDecorated1Service',
            'dashboard.views.widget' => 'getDashboard_Views_WidgetService',
            'dashboard.widget.docGettingStarted' => 'getDashboard_Widget_DocGettingStartedService',
            'dashboard.widget.docTSconfig' => 'getDashboard_Widget_DocTSconfigService',
            'dashboard.widget.docTypoScriptReference' => 'getDashboard_Widget_DocTypoScriptReferenceService',
            'dashboard.widget.failedLogins' => 'getDashboard_Widget_FailedLoginsService',
            'dashboard.widget.pagesWithoutMetaDescription' => 'getDashboard_Widget_PagesWithoutMetaDescriptionService',
            'dashboard.widget.sysLogErrors' => 'getDashboard_Widget_SysLogErrorsService',
            'dashboard.widget.t3information' => 'getDashboard_Widget_T3informationService',
            'dashboard.widget.t3news' => 'getDashboard_Widget_T3newsService',
            'dashboard.widget.t3securityAdvisories' => 'getDashboard_Widget_T3securityAdvisoriesService',
            'dashboard.widget.typeOfUsers' => 'getDashboard_Widget_TypeOfUsersService',
            'dashboard.widgetGroups_decorated_1' => 'getDashboard_WidgetGroupsDecorated1Service',
            'dashboard.widgets.calendarizeIndexAmount' => 'getDashboard_Widgets_CalendarizeIndexAmountService',
            'dashboard.widgets.calendarizeNextEvents' => 'getDashboard_Widgets_CalendarizeNextEventsService',
            'dashboard.widgets_decorated_1' => 'getDashboard_WidgetsDecorated1Service',
            'docGettingStartedWidgetConfiguration' => 'getDocGettingStartedWidgetConfigurationService',
            'docTSconfigWidgetConfiguration' => 'getDocTSconfigWidgetConfigurationService',
            'docTypoScriptReferenceWidgetConfiguration' => 'getDocTypoScriptReferenceWidgetConfigurationService',
            'failedLoginsWidgetConfiguration' => 'getFailedLoginsWidgetConfigurationService',
            'frontend.middlewares' => 'getFrontend_MiddlewaresService',
            'globalPageTsConfig_decorated_41' => 'getGlobalPageTsConfigDecorated41Service',
            'icons_decorated_42' => 'getIconsDecorated42Service',
            'lowlevel.configuration.module.provider.formyamlconfiguration' => 'getLowlevel_Configuration_Module_Provider_FormyamlconfigurationService',
            'lowlevel.configuration.module.provider.reactions' => 'getLowlevel_Configuration_Module_Provider_ReactionsService',
            'lowlevel.configuration.module.provider.webhooks' => 'getLowlevel_Configuration_Module_Provider_WebhooksService',
            'middlewares_decorated_41' => 'getMiddlewaresDecorated41Service',
            'seo-pagesWithoutMetaDescriptionWidgetConfiguration' => 'getSeopagesWithoutMetaDescriptionWidgetConfigurationService',
            'sysLogErrorsWidgetConfiguration' => 'getSysLogErrorsWidgetConfigurationService',
            't3informationWidgetConfiguration' => 'getT3informationWidgetConfigurationService',
            't3newsWidgetConfiguration' => 'getT3newsWidgetConfigurationService',
            't3securityAdvisoriesWidgetConfiguration' => 'getT3securityAdvisoriesWidgetConfigurationService',
            'typeOfUsersWidgetConfiguration' => 'getTypeOfUsersWidgetConfigurationService',
            'TYPO3\\CMS\\Recordlist\\LinkHandler\\RecordLinkHandler' => 'getRecordLinkHandler2Service',
        ];
        $this->aliases = [
            'Composer\\Autoload\\ClassLoader' => '_early.Composer\\Autoload\\ClassLoader',
            'GuzzleHttp\\ClientInterface' => 'Psr\\Http\\Client\\ClientInterface',
            'Psr\\Container\\ContainerInterface' => 'service_container',
            'Psr\\EventDispatcher\\EventDispatcherInterface' => 'Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1',
            'Psr\\Http\\Message\\RequestFactoryInterface' => 'TYPO3\\CMS\\Core\\Http\\RequestFactory',
            'Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface' => 'TYPO3\\CMS\\Core\\Adapter\\EventDispatcherAdapter',
            'TYPO3\\CMS\\Backend\\Routing\\Router' => 'TYPO3\\CMS\\Backend\\Routing\\Router_decorated_1',
            'TYPO3\\CMS\\Core\\Configuration\\ConfigurationManager' => '_early.TYPO3\\CMS\\Core\\Configuration\\ConfigurationManager',
            'TYPO3\\CMS\\Core\\Configuration\\Loader\\PageTsConfigLoader' => 'TYPO3\\CMS\\Core\\Configuration\\Loader\\PageTsConfigLoader_decorated_1',
            'TYPO3\\CMS\\Core\\Console\\CommandRegistry' => 'TYPO3\\CMS\\Core\\Console\\CommandRegistry_decorated_2',
            'TYPO3\\CMS\\Core\\Console\\CommandRegistry_decorated_1' => 'TYPO3\\CMS\\Core\\Console\\CommandRegistry_decorated_2',
            'TYPO3\\CMS\\Core\\Core\\ApplicationContext' => '_early.TYPO3\\CMS\\Core\\Core\\ApplicationContext',
            'TYPO3\\CMS\\Core\\Core\\RequestId' => '_early.TYPO3\\CMS\\Core\\Core\\RequestId',
            'TYPO3\\CMS\\Core\\DependencyInjection\\ContainerBuilder' => '_early.TYPO3\\CMS\\Core\\DependencyInjection\\ContainerBuilder',
            'TYPO3\\CMS\\Core\\EventDispatcher\\ListenerProvider' => 'TYPO3\\CMS\\Core\\EventDispatcher\\ListenerProvider_decorated_3',
            'TYPO3\\CMS\\Core\\EventDispatcher\\ListenerProvider_decorated_1' => 'TYPO3\\CMS\\Core\\EventDispatcher\\ListenerProvider_decorated_3',
            'TYPO3\\CMS\\Core\\EventDispatcher\\ListenerProvider_decorated_2' => 'TYPO3\\CMS\\Core\\EventDispatcher\\ListenerProvider_decorated_3',
            'TYPO3\\CMS\\Core\\Imaging\\IconRegistry' => 'TYPO3\\CMS\\Core\\Imaging\\IconRegistry_decorated_1',
            'TYPO3\\CMS\\Core\\Log\\LogManager' => '_early.TYPO3\\CMS\\Core\\Log\\LogManager',
            'TYPO3\\CMS\\Core\\Mail\\MailerInterface' => 'TYPO3\\CMS\\Core\\Mail\\Mailer',
            'TYPO3\\CMS\\Core\\Package\\PackageManager' => '_early.TYPO3\\CMS\\Core\\Package\\PackageManager',
            'TYPO3\\CMS\\Dashboard\\DashboardPresetRegistry' => 'TYPO3\\CMS\\Dashboard\\DashboardPresetRegistry_decorated_1',
            'TYPO3\\CMS\\Dashboard\\WidgetGroupRegistry' => 'TYPO3\\CMS\\Dashboard\\WidgetGroupRegistry_decorated_1',
            'TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManagerInterface' => 'TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager',
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QuerySettingsInterface' => 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Typo3QuerySettings',
            'TYPO3\\CMS\\Extbase\\Persistence\\PersistenceManagerInterface' => 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager',
            'TYPO3\\CMS\\Extbase\\Persistence\\QueryInterface' => 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Query',
            'TYPO3\\CMS\\Extbase\\Persistence\\QueryResultInterface' => 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryResult',
            'TYPO3\\CMS\\Form\\Mvc\\Configuration\\ConfigurationManagerInterface' => 'TYPO3\\CMS\\Form\\Mvc\\Configuration\\ConfigurationManager',
            'TYPO3\\CMS\\Frontend\\Typolink\\LinkResultFactory' => 'TYPO3\\CMS\\Frontend\\Typolink\\LinkFactory',
            'backend.modules' => 'backend.modules_decorated_42',
            'backend.modules_decorated_1' => 'backend.modules_decorated_42',
            'backend.modules_decorated_10' => 'backend.modules_decorated_42',
            'backend.modules_decorated_11' => 'backend.modules_decorated_42',
            'backend.modules_decorated_12' => 'backend.modules_decorated_42',
            'backend.modules_decorated_13' => 'backend.modules_decorated_42',
            'backend.modules_decorated_14' => 'backend.modules_decorated_42',
            'backend.modules_decorated_15' => 'backend.modules_decorated_42',
            'backend.modules_decorated_16' => 'backend.modules_decorated_42',
            'backend.modules_decorated_17' => 'backend.modules_decorated_42',
            'backend.modules_decorated_18' => 'backend.modules_decorated_42',
            'backend.modules_decorated_19' => 'backend.modules_decorated_42',
            'backend.modules_decorated_2' => 'backend.modules_decorated_42',
            'backend.modules_decorated_20' => 'backend.modules_decorated_42',
            'backend.modules_decorated_21' => 'backend.modules_decorated_42',
            'backend.modules_decorated_22' => 'backend.modules_decorated_42',
            'backend.modules_decorated_23' => 'backend.modules_decorated_42',
            'backend.modules_decorated_24' => 'backend.modules_decorated_42',
            'backend.modules_decorated_25' => 'backend.modules_decorated_42',
            'backend.modules_decorated_26' => 'backend.modules_decorated_42',
            'backend.modules_decorated_27' => 'backend.modules_decorated_42',
            'backend.modules_decorated_28' => 'backend.modules_decorated_42',
            'backend.modules_decorated_29' => 'backend.modules_decorated_42',
            'backend.modules_decorated_3' => 'backend.modules_decorated_42',
            'backend.modules_decorated_30' => 'backend.modules_decorated_42',
            'backend.modules_decorated_31' => 'backend.modules_decorated_42',
            'backend.modules_decorated_32' => 'backend.modules_decorated_42',
            'backend.modules_decorated_33' => 'backend.modules_decorated_42',
            'backend.modules_decorated_34' => 'backend.modules_decorated_42',
            'backend.modules_decorated_35' => 'backend.modules_decorated_42',
            'backend.modules_decorated_36' => 'backend.modules_decorated_42',
            'backend.modules_decorated_37' => 'backend.modules_decorated_42',
            'backend.modules_decorated_38' => 'backend.modules_decorated_42',
            'backend.modules_decorated_39' => 'backend.modules_decorated_42',
            'backend.modules_decorated_4' => 'backend.modules_decorated_42',
            'backend.modules_decorated_40' => 'backend.modules_decorated_42',
            'backend.modules_decorated_41' => 'backend.modules_decorated_42',
            'backend.modules_decorated_5' => 'backend.modules_decorated_42',
            'backend.modules_decorated_6' => 'backend.modules_decorated_42',
            'backend.modules_decorated_7' => 'backend.modules_decorated_42',
            'backend.modules_decorated_8' => 'backend.modules_decorated_42',
            'backend.modules_decorated_9' => 'backend.modules_decorated_42',
            'backend.routes' => 'backend.routes_decorated_42',
            'backend.routes_decorated_1' => 'backend.routes_decorated_42',
            'backend.routes_decorated_10' => 'backend.routes_decorated_42',
            'backend.routes_decorated_11' => 'backend.routes_decorated_42',
            'backend.routes_decorated_12' => 'backend.routes_decorated_42',
            'backend.routes_decorated_13' => 'backend.routes_decorated_42',
            'backend.routes_decorated_14' => 'backend.routes_decorated_42',
            'backend.routes_decorated_15' => 'backend.routes_decorated_42',
            'backend.routes_decorated_16' => 'backend.routes_decorated_42',
            'backend.routes_decorated_17' => 'backend.routes_decorated_42',
            'backend.routes_decorated_18' => 'backend.routes_decorated_42',
            'backend.routes_decorated_19' => 'backend.routes_decorated_42',
            'backend.routes_decorated_2' => 'backend.routes_decorated_42',
            'backend.routes_decorated_20' => 'backend.routes_decorated_42',
            'backend.routes_decorated_21' => 'backend.routes_decorated_42',
            'backend.routes_decorated_22' => 'backend.routes_decorated_42',
            'backend.routes_decorated_23' => 'backend.routes_decorated_42',
            'backend.routes_decorated_24' => 'backend.routes_decorated_42',
            'backend.routes_decorated_25' => 'backend.routes_decorated_42',
            'backend.routes_decorated_26' => 'backend.routes_decorated_42',
            'backend.routes_decorated_27' => 'backend.routes_decorated_42',
            'backend.routes_decorated_28' => 'backend.routes_decorated_42',
            'backend.routes_decorated_29' => 'backend.routes_decorated_42',
            'backend.routes_decorated_3' => 'backend.routes_decorated_42',
            'backend.routes_decorated_30' => 'backend.routes_decorated_42',
            'backend.routes_decorated_31' => 'backend.routes_decorated_42',
            'backend.routes_decorated_32' => 'backend.routes_decorated_42',
            'backend.routes_decorated_33' => 'backend.routes_decorated_42',
            'backend.routes_decorated_34' => 'backend.routes_decorated_42',
            'backend.routes_decorated_35' => 'backend.routes_decorated_42',
            'backend.routes_decorated_36' => 'backend.routes_decorated_42',
            'backend.routes_decorated_37' => 'backend.routes_decorated_42',
            'backend.routes_decorated_38' => 'backend.routes_decorated_42',
            'backend.routes_decorated_39' => 'backend.routes_decorated_42',
            'backend.routes_decorated_4' => 'backend.routes_decorated_42',
            'backend.routes_decorated_40' => 'backend.routes_decorated_42',
            'backend.routes_decorated_41' => 'backend.routes_decorated_42',
            'backend.routes_decorated_5' => 'backend.routes_decorated_42',
            'backend.routes_decorated_6' => 'backend.routes_decorated_42',
            'backend.routes_decorated_7' => 'backend.routes_decorated_42',
            'backend.routes_decorated_8' => 'backend.routes_decorated_42',
            'backend.routes_decorated_9' => 'backend.routes_decorated_42',
            'boot.state' => '_early.boot.state',
            'cache.assets' => '_early.cache.assets',
            'cache.core' => '_early.cache.core',
            'cache.di' => '_early.cache.di',
            'content.security.policies' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_1' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_10' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_11' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_12' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_13' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_14' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_15' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_16' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_17' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_18' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_19' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_2' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_20' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_21' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_22' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_23' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_24' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_25' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_26' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_27' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_28' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_29' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_3' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_30' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_31' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_32' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_33' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_34' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_35' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_36' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_37' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_38' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_39' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_4' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_40' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_5' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_6' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_7' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_8' => 'content.security.policies_decorated_41',
            'content.security.policies_decorated_9' => 'content.security.policies_decorated_41',
            'dashboard.presets' => 'dashboard.presets_decorated_1',
            'dashboard.widgetGroups' => 'dashboard.widgetGroups_decorated_1',
            'dashboard.widgets' => 'dashboard.widgets_decorated_1',
            'globalPageTsConfig' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_1' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_10' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_11' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_12' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_13' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_14' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_15' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_16' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_17' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_18' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_19' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_2' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_20' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_21' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_22' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_23' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_24' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_25' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_26' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_27' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_28' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_29' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_3' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_30' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_31' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_32' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_33' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_34' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_35' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_36' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_37' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_38' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_39' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_4' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_40' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_5' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_6' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_7' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_8' => 'globalPageTsConfig_decorated_41',
            'globalPageTsConfig_decorated_9' => 'globalPageTsConfig_decorated_41',
            'icons' => 'icons_decorated_42',
            'icons_decorated_1' => 'icons_decorated_42',
            'icons_decorated_10' => 'icons_decorated_42',
            'icons_decorated_11' => 'icons_decorated_42',
            'icons_decorated_12' => 'icons_decorated_42',
            'icons_decorated_13' => 'icons_decorated_42',
            'icons_decorated_14' => 'icons_decorated_42',
            'icons_decorated_15' => 'icons_decorated_42',
            'icons_decorated_16' => 'icons_decorated_42',
            'icons_decorated_17' => 'icons_decorated_42',
            'icons_decorated_18' => 'icons_decorated_42',
            'icons_decorated_19' => 'icons_decorated_42',
            'icons_decorated_2' => 'icons_decorated_42',
            'icons_decorated_20' => 'icons_decorated_42',
            'icons_decorated_21' => 'icons_decorated_42',
            'icons_decorated_22' => 'icons_decorated_42',
            'icons_decorated_23' => 'icons_decorated_42',
            'icons_decorated_24' => 'icons_decorated_42',
            'icons_decorated_25' => 'icons_decorated_42',
            'icons_decorated_26' => 'icons_decorated_42',
            'icons_decorated_27' => 'icons_decorated_42',
            'icons_decorated_28' => 'icons_decorated_42',
            'icons_decorated_29' => 'icons_decorated_42',
            'icons_decorated_3' => 'icons_decorated_42',
            'icons_decorated_30' => 'icons_decorated_42',
            'icons_decorated_31' => 'icons_decorated_42',
            'icons_decorated_32' => 'icons_decorated_42',
            'icons_decorated_33' => 'icons_decorated_42',
            'icons_decorated_34' => 'icons_decorated_42',
            'icons_decorated_35' => 'icons_decorated_42',
            'icons_decorated_36' => 'icons_decorated_42',
            'icons_decorated_37' => 'icons_decorated_42',
            'icons_decorated_38' => 'icons_decorated_42',
            'icons_decorated_39' => 'icons_decorated_42',
            'icons_decorated_4' => 'icons_decorated_42',
            'icons_decorated_40' => 'icons_decorated_42',
            'icons_decorated_41' => 'icons_decorated_42',
            'icons_decorated_5' => 'icons_decorated_42',
            'icons_decorated_6' => 'icons_decorated_42',
            'icons_decorated_7' => 'icons_decorated_42',
            'icons_decorated_8' => 'icons_decorated_42',
            'icons_decorated_9' => 'icons_decorated_42',
            'middlewares' => 'middlewares_decorated_41',
            'middlewares_decorated_1' => 'middlewares_decorated_41',
            'middlewares_decorated_10' => 'middlewares_decorated_41',
            'middlewares_decorated_11' => 'middlewares_decorated_41',
            'middlewares_decorated_12' => 'middlewares_decorated_41',
            'middlewares_decorated_13' => 'middlewares_decorated_41',
            'middlewares_decorated_14' => 'middlewares_decorated_41',
            'middlewares_decorated_15' => 'middlewares_decorated_41',
            'middlewares_decorated_16' => 'middlewares_decorated_41',
            'middlewares_decorated_17' => 'middlewares_decorated_41',
            'middlewares_decorated_18' => 'middlewares_decorated_41',
            'middlewares_decorated_19' => 'middlewares_decorated_41',
            'middlewares_decorated_2' => 'middlewares_decorated_41',
            'middlewares_decorated_20' => 'middlewares_decorated_41',
            'middlewares_decorated_21' => 'middlewares_decorated_41',
            'middlewares_decorated_22' => 'middlewares_decorated_41',
            'middlewares_decorated_23' => 'middlewares_decorated_41',
            'middlewares_decorated_24' => 'middlewares_decorated_41',
            'middlewares_decorated_25' => 'middlewares_decorated_41',
            'middlewares_decorated_26' => 'middlewares_decorated_41',
            'middlewares_decorated_27' => 'middlewares_decorated_41',
            'middlewares_decorated_28' => 'middlewares_decorated_41',
            'middlewares_decorated_29' => 'middlewares_decorated_41',
            'middlewares_decorated_3' => 'middlewares_decorated_41',
            'middlewares_decorated_30' => 'middlewares_decorated_41',
            'middlewares_decorated_31' => 'middlewares_decorated_41',
            'middlewares_decorated_32' => 'middlewares_decorated_41',
            'middlewares_decorated_33' => 'middlewares_decorated_41',
            'middlewares_decorated_34' => 'middlewares_decorated_41',
            'middlewares_decorated_35' => 'middlewares_decorated_41',
            'middlewares_decorated_36' => 'middlewares_decorated_41',
            'middlewares_decorated_37' => 'middlewares_decorated_41',
            'middlewares_decorated_38' => 'middlewares_decorated_41',
            'middlewares_decorated_39' => 'middlewares_decorated_41',
            'middlewares_decorated_4' => 'middlewares_decorated_41',
            'middlewares_decorated_40' => 'middlewares_decorated_41',
            'middlewares_decorated_5' => 'middlewares_decorated_41',
            'middlewares_decorated_6' => 'middlewares_decorated_41',
            'middlewares_decorated_7' => 'middlewares_decorated_41',
            'middlewares_decorated_8' => 'middlewares_decorated_41',
            'middlewares_decorated_9' => 'middlewares_decorated_41',
        ];
    }

    public function compile(): void
    {
        throw \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(LogicException::class, 'You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return [
            'B13\\Container\\Backend\\Grid\\ContainerGridColumn' => true,
            'B13\\Container\\Backend\\Grid\\ContainerGridColumnItem' => true,
            'B13\\Container\\ContentDefender\\Xclasses\\CommandMapHook' => true,
            'B13\\Container\\ContentDefender\\Xclasses\\DatamapHook' => true,
            'B13\\Container\\DataProcessing\\ContainerDataProcessingFailedException' => true,
            'B13\\Container\\Domain\\Factory\\Exception' => true,
            'B13\\Container\\Domain\\Factory\\PageView\\Backend\\ContentStorage' => true,
            'B13\\Container\\Domain\\Factory\\PageView\\Frontend\\ContentStorage' => true,
            'B13\\Container\\Domain\\Model\\Container' => true,
            'B13\\Container\\Exception' => true,
            'B13\\Container\\Hooks\\DrawItem' => true,
            'B13\\Container\\Hooks\\WizardItems' => true,
            'B13\\Container\\Integrity\\Error\\ChildInTranslatedContainerError' => true,
            'B13\\Container\\Integrity\\Error\\ErrorInterface' => true,
            'B13\\Container\\Integrity\\Error\\NonExistingParentWarning' => true,
            'B13\\Container\\Integrity\\Error\\UnusedColPosWarning' => true,
            'B13\\Container\\Integrity\\Error\\WrongL18nParentError' => true,
            'B13\\Container\\Integrity\\Error\\WrongLanguageWarning' => true,
            'B13\\Container\\Integrity\\Error\\WrongParentError' => true,
            'B13\\Container\\Integrity\\Error\\WrongPidError' => true,
            'B13\\Container\\Tca\\ContainerConfiguration' => true,
            'B13\\Container\\Xclasses\\LocalizationController' => true,
            'Blueways\\BwFocuspointImages\\DataProcessing\\FocuspointProcessor' => true,
            'Blueways\\BwFocuspointImages\\Form\\Element\\InputFocuspointElement' => true,
            'Blueways\\BwFocuspointImages\\Hooks\\BwFocuspointSvgPreviewRenderer' => true,
            'Blueways\\BwFocuspointImages\\Preview\\FocuspointPreviewRenderer' => true,
            'Doctrine\\Instantiator\\InstantiatorInterface' => true,
            'GeorgRinger\\News\\Backend\\FormDataProvider\\NewsRowInitializeNew' => true,
            'GeorgRinger\\News\\Backend\\FormEngine\\SlugPrefix' => true,
            'GeorgRinger\\News\\Backend\\RecordList\\RecordListConstraint' => true,
            'GeorgRinger\\News\\DataProcessing\\AddNewsToMenuProcessor' => true,
            'GeorgRinger\\News\\DataProcessing\\DisableLanguageMenuProcessor' => true,
            'GeorgRinger\\News\\Database\\QueryGenerator' => true,
            'GeorgRinger\\News\\Domain\\Model\\Category' => true,
            'GeorgRinger\\News\\Domain\\Model\\DemandInterface' => true,
            'GeorgRinger\\News\\Domain\\Model\\Dto' => true,
            'GeorgRinger\\News\\Domain\\Model\\FileReference' => true,
            'GeorgRinger\\News\\Domain\\Model\\Link' => true,
            'GeorgRinger\\News\\Domain\\Model\\News' => true,
            'GeorgRinger\\News\\Domain\\Model\\NewsDefault' => true,
            'GeorgRinger\\News\\Domain\\Model\\NewsExternal' => true,
            'GeorgRinger\\News\\Domain\\Model\\NewsInternal' => true,
            'GeorgRinger\\News\\Domain\\Model\\Tag' => true,
            'GeorgRinger\\News\\Domain\\Model\\TtContent' => true,
            'GeorgRinger\\News\\Domain\\Repository\\AdministrationRepository' => true,
            'GeorgRinger\\News\\Domain\\Service\\AbstractImportService' => true,
            'GeorgRinger\\News\\Domain\\Service\\CategoryImportService' => true,
            'GeorgRinger\\News\\Event\\CategoryImportPostHydrateEvent' => true,
            'GeorgRinger\\News\\Event\\CategoryListActionEvent' => true,
            'GeorgRinger\\News\\Event\\ModifyCacheTagsFromDemandEvent' => true,
            'GeorgRinger\\News\\Event\\ModifyCacheTagsFromNewsEvent' => true,
            'GeorgRinger\\News\\Event\\NewsCheckPidOfNewsRecordFailedInDetailActionEvent' => true,
            'GeorgRinger\\News\\Event\\NewsDateMenuActionEvent' => true,
            'GeorgRinger\\News\\Event\\NewsDetailActionEvent' => true,
            'GeorgRinger\\News\\Event\\NewsImportPostHydrateEvent' => true,
            'GeorgRinger\\News\\Event\\NewsImportPreHydrateEvent' => true,
            'GeorgRinger\\News\\Event\\NewsListActionEvent' => true,
            'GeorgRinger\\News\\Event\\NewsListSelectedActionEvent' => true,
            'GeorgRinger\\News\\Event\\NewsPostImportEvent' => true,
            'GeorgRinger\\News\\Event\\NewsPreImportEvent' => true,
            'GeorgRinger\\News\\Event\\NewsSearchFormActionEvent' => true,
            'GeorgRinger\\News\\Event\\NewsSearchResultActionEvent' => true,
            'GeorgRinger\\News\\Event\\PluginUpdaterListTypeEvent' => true,
            'GeorgRinger\\News\\Event\\TagListActionEvent' => true,
            'GeorgRinger\\News\\Hooks\\Backend\\PageViewQueryHook' => true,
            'GeorgRinger\\News\\Hooks\\InlineElementHook' => true,
            'GeorgRinger\\News\\Hooks\\Labels' => true,
            'GeorgRinger\\News\\Pagination\\QueryResultPaginator' => true,
            'GeorgRinger\\News\\Routing\\Aspect\\LargeStaticRangeMapper' => true,
            'GeorgRinger\\News\\Routing\\NewsAliasMapper' => true,
            'GeorgRinger\\News\\Routing\\NewsCategoryMapper' => true,
            'GeorgRinger\\News\\Routing\\NewsTagMapper' => true,
            'GeorgRinger\\News\\Routing\\NewsTitleMapper' => true,
            'GeorgRinger\\News\\Seo\\NewsAvailability' => true,
            'GeorgRinger\\News\\Seo\\NewsXmlSitemapDataProvider' => true,
            'GeorgRinger\\News\\Service\\AccessControlService' => true,
            'GeorgRinger\\News\\Service\\CategoryService' => true,
            'GeorgRinger\\News\\Service\\LinkHandlerTargetPageService' => true,
            'GeorgRinger\\News\\Service\\SettingsService' => true,
            'GeorgRinger\\News\\Service\\SlugService' => true,
            'GeorgRinger\\News\\TreeProvider\\DatabaseTreeDataProvider' => true,
            'GeorgRinger\\News\\Updates\\PluginPermissionUpdater' => true,
            'GeorgRinger\\News\\Updates\\PluginUpdater' => true,
            'GeorgRinger\\News\\Updates\\PopulateCategorySlugs' => true,
            'GeorgRinger\\News\\Updates\\PopulateTagSlugs' => true,
            'GeorgRinger\\News\\Updates\\RelatedLinkIntegerDefault' => true,
            'GeorgRinger\\News\\Updates\\TitleFieldDefault' => true,
            'GeorgRinger\\News\\Utility\\Cache' => true,
            'GeorgRinger\\News\\Utility\\ClassParser' => true,
            'GeorgRinger\\News\\Utility\\ConstraintHelper' => true,
            'GeorgRinger\\News\\Utility\\ImportJob' => true,
            'GeorgRinger\\News\\Utility\\Page' => true,
            'GeorgRinger\\News\\Utility\\TypoScript' => true,
            'GeorgRinger\\News\\Utility\\Validation' => true,
            'GuzzleHttp\\Client' => true,
            'HDNET\\Calendarize\\DataProcessing\\DisableLanguageMenuProcessor' => true,
            'HDNET\\Calendarize\\Domain\\Model\\AbstractModel' => true,
            'HDNET\\Calendarize\\Domain\\Model\\Configuration' => true,
            'HDNET\\Calendarize\\Domain\\Model\\ConfigurationGroup' => true,
            'HDNET\\Calendarize\\Domain\\Model\\ConfigurationInterface' => true,
            'HDNET\\Calendarize\\Domain\\Model\\Dto\\Search' => true,
            'HDNET\\Calendarize\\Domain\\Model\\Event' => true,
            'HDNET\\Calendarize\\Domain\\Model\\Index' => true,
            'HDNET\\Calendarize\\Domain\\Model\\PluginConfiguration' => true,
            'HDNET\\Calendarize\\Domain\\Model\\Request\\DefaultBookingRequest' => true,
            'HDNET\\Calendarize\\Domain\\Model\\Request\\OptionRequest' => true,
            'HDNET\\Calendarize\\Domain\\Repository\\RawIndexRepository' => true,
            'HDNET\\Calendarize\\EventListener\\DefaultEventConstraintsListener' => true,
            'HDNET\\Calendarize\\Event\\AddTimeFrameConstraintsEvent' => true,
            'HDNET\\Calendarize\\Event\\BaseSlugGenerationEvent' => true,
            'HDNET\\Calendarize\\Event\\CleanupEvent' => true,
            'HDNET\\Calendarize\\Event\\DetermineSearchEvent' => true,
            'HDNET\\Calendarize\\Event\\GenericActionAssignmentEvent' => true,
            'HDNET\\Calendarize\\Event\\GenericActionRedirectEvent' => true,
            'HDNET\\Calendarize\\Event\\ImportSingleIcalEvent' => true,
            'HDNET\\Calendarize\\Event\\IndexAllEvent' => true,
            'HDNET\\Calendarize\\Event\\IndexPreUpdateEvent' => true,
            'HDNET\\Calendarize\\Event\\IndexRepositoryDefaultConstraintEvent' => true,
            'HDNET\\Calendarize\\Event\\IndexRepositoryFindBySearchEvent' => true,
            'HDNET\\Calendarize\\Event\\IndexRepositoryTimeSlotEvent' => true,
            'HDNET\\Calendarize\\Event\\IndexSingleEvent' => true,
            'HDNET\\Calendarize\\Event\\InitializeActionEvent' => true,
            'HDNET\\Calendarize\\Event\\InitializeViewEvent' => true,
            'HDNET\\Calendarize\\Event\\ModifyIndexingQueryBuilderEvent' => true,
            'HDNET\\Calendarize\\Event\\PaginationEvent' => true,
            'HDNET\\Calendarize\\Event\\PluginConfigurationSettingsEvent' => true,
            'HDNET\\Calendarize\\Event\\SlugSuffixGenerationEvent' => true,
            'HDNET\\Calendarize\\Exception\\InvalidConfigurationException' => true,
            'HDNET\\Calendarize\\Exception\\UnableToGetEventsException' => true,
            'HDNET\\Calendarize\\Exception\\UnableToGetFileForUrlException' => true,
            'HDNET\\Calendarize\\Features\\FeedInterface' => true,
            'HDNET\\Calendarize\\Features\\KeSearchIndexInterface' => true,
            'HDNET\\Calendarize\\Features\\SpeakingUrlInterface' => true,
            'HDNET\\Calendarize\\Form\\Element\\CalendarizeInfoElement' => true,
            'HDNET\\Calendarize\\Hooks\\KeSearchIndexer' => true,
            'HDNET\\Calendarize\\Hooks\\ProcessCmdmapClass' => true,
            'HDNET\\Calendarize\\Hooks\\ProcessDatamapClass' => true,
            'HDNET\\Calendarize\\Ical\\DissectEventAdapter' => true,
            'HDNET\\Calendarize\\Ical\\VObjectEventAdapter' => true,
            'HDNET\\Calendarize\\Register' => true,
            'HDNET\\Calendarize\\Service\\Ical\\ICalServiceInterface' => true,
            'HDNET\\Calendarize\\Service\\TimeTable\\TimeTableInterface' => true,
            'HDNET\\Calendarize\\Typolink\\DatabaseRecordLinkBuilder' => true,
            'HDNET\\Calendarize\\Updates\\DateFieldUpdate' => true,
            'HDNET\\Calendarize\\Updates\\NewIncludeExcludeStructureUpdate' => true,
            'HDNET\\Calendarize\\Updates\\PluginUpdater' => true,
            'HDNET\\Calendarize\\Updates\\PopulateEventSlugs' => true,
            'HDNET\\Calendarize\\Updates\\TillDateFieldUpdate' => true,
            'HDNET\\Calendarize\\Utility\\ArrayUtility' => true,
            'HDNET\\Calendarize\\Utility\\ConfigurationUtility' => true,
            'HDNET\\Calendarize\\Utility\\DateTimeUtility' => true,
            'HDNET\\Calendarize\\Utility\\EventUtility' => true,
            'HDNET\\Calendarize\\Utility\\ExtensionConfigurationUtility' => true,
            'HDNET\\Calendarize\\Utility\\HelperUtility' => true,
            'HDNET\\Calendarize\\Utility\\IndexUtility' => true,
            'HDNET\\Calendarize\\Utility\\TranslateUtility' => true,
            'HDNET\\Calendarize\\Utility\\WorkspaceUtility' => true,
            'HDNET\\Calendarize\\Widgets\\DataProvider\\IndexAmountDataProvider' => true,
            'HDNET\\Calendarize\\Widgets\\DataProvider\\NextEventsDataProvider' => true,
            'HDNET\\Calendarize\\Xclass\\WorkspaceRemoteServer' => true,
            'Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1.inner' => true,
            'Psr\\EventDispatcher\\ListenerProviderInterface' => true,
            'QueryBuilder.be_groups' => true,
            'QueryBuilder.tt_content' => true,
            'Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport' => true,
            'Symfony\\Component\\Messenger\\Handler\\HandlersLocatorInterface' => true,
            'Symfony\\Component\\Messenger\\MessageBusInterface' => true,
            'Symfony\\Component\\Messenger\\Middleware\\HandleMessageMiddleware' => true,
            'Symfony\\Component\\Messenger\\Middleware\\SendMessageMiddleware' => true,
            'Symfony\\Component\\Messenger\\Transport\\Sender\\SendersLocatorInterface' => true,
            'Symfony\\Component\\Messenger\\Transport\\Serialization\\PhpSerializer' => true,
            'Symfony\\Component\\Messenger\\Transport\\Serialization\\SerializerInterface' => true,
            'Symfony\\Component\\Messenger\\Transport\\Sync\\SyncTransport' => true,
            'TYPO3\\CMS\\Adminpanel\\Log\\DoctrineSqlLogger' => true,
            'TYPO3\\CMS\\Adminpanel\\Log\\DoctrineSqlLoggingMiddleware' => true,
            'TYPO3\\CMS\\Adminpanel\\Log\\LoggingConnection' => true,
            'TYPO3\\CMS\\Adminpanel\\Log\\LoggingDriver' => true,
            'TYPO3\\CMS\\Adminpanel\\Log\\LoggingStatement' => true,
            'TYPO3\\CMS\\Adminpanel\\ModuleApi\\ModuleData' => true,
            'TYPO3\\CMS\\Adminpanel\\ModuleApi\\ModuleDataStorageCollection' => true,
            'TYPO3\\CMS\\Adminpanel\\ModuleApi\\OnSubmitActorInterface' => true,
            'TYPO3\\CMS\\Adminpanel\\Modules\\Debug\\PageTitle' => true,
            'TYPO3\\CMS\\Adminpanel\\Modules\\Debug\\QueryInformation' => true,
            'TYPO3\\CMS\\Adminpanel\\Modules\\Info\\GeneralInformation' => true,
            'TYPO3\\CMS\\Adminpanel\\Modules\\Info\\PhpInformation' => true,
            'TYPO3\\CMS\\Adminpanel\\Modules\\Info\\RequestInformation' => true,
            'TYPO3\\CMS\\Adminpanel\\Modules\\Info\\UserIntInformation' => true,
            'TYPO3\\CMS\\Adminpanel\\Repositories\\FrontendGroupsRepository' => true,
            'TYPO3\\CMS\\Adminpanel\\Service\\ModuleLoader' => true,
            'TYPO3\\CMS\\Adminpanel\\Utility\\HtmlDumper' => true,
            'TYPO3\\CMS\\Adminpanel\\Utility\\MemoryUtility' => true,
            'TYPO3\\CMS\\Adminpanel\\Utility\\ResourceUtility' => true,
            'TYPO3\\CMS\\Adminpanel\\Utility\\StateUtility' => true,
            'TYPO3\\CMS\\Backend\\Attribute\\AsController' => true,
            'TYPO3\\CMS\\Backend\\Attribute\\Controller' => true,
            'TYPO3\\CMS\\Backend\\Authentication\\Event\\SwitchUserEvent' => true,
            'TYPO3\\CMS\\Backend\\Authentication\\PasswordReset' => true,
            'TYPO3\\CMS\\Backend\\Backend\\Avatar\\AvatarProviderInterface' => true,
            'TYPO3\\CMS\\Backend\\Backend\\Avatar\\DefaultAvatarProvider' => true,
            'TYPO3\\CMS\\Backend\\Backend\\Avatar\\Image' => true,
            'TYPO3\\CMS\\Backend\\Backend\\Event\\ModifyClearCacheActionsEvent' => true,
            'TYPO3\\CMS\\Backend\\Backend\\Event\\SystemInformationToolbarCollectorEvent' => true,
            'TYPO3\\CMS\\Backend\\Backend\\ToolbarItems\\HelpToolbarItem' => true,
            'TYPO3\\CMS\\Backend\\Backend\\ToolbarItems\\LiveSearchToolbarItem' => true,
            'TYPO3\\CMS\\Backend\\Backend\\ToolbarItems\\UserToolbarItem' => true,
            'TYPO3\\CMS\\Backend\\Command\\ProgressListener\\ReferenceIndexProgressListener' => true,
            'TYPO3\\CMS\\Backend\\Composer\\InstallerScripts' => true,
            'TYPO3\\CMS\\Backend\\Configuration\\BackendUserConfiguration' => true,
            'TYPO3\\CMS\\Backend\\Configuration\\SiteTcaConfiguration' => true,
            'TYPO3\\CMS\\Backend\\Configuration\\TCA\\ItemsProcessorFunctions' => true,
            'TYPO3\\CMS\\Backend\\Configuration\\TCA\\UserFunctions' => true,
            'TYPO3\\CMS\\Backend\\Configuration\\TranslationConfigurationProvider' => true,
            'TYPO3\\CMS\\Backend\\Configuration\\TypoScript\\ConditionMatching\\ConditionMatcher' => true,
            'TYPO3\\CMS\\Backend\\ContextMenu\\ItemProviders\\AbstractProvider' => true,
            'TYPO3\\CMS\\Backend\\ContextMenu\\ItemProviders\\ItemProvidersRegistry' => true,
            'TYPO3\\CMS\\Backend\\ContextMenu\\ItemProviders\\PageProvider' => true,
            'TYPO3\\CMS\\Backend\\ContextMenu\\ItemProviders\\RecordProvider' => true,
            'TYPO3\\CMS\\Backend\\Controller\\ClearPageCacheController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\ContextMenuController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\Event\\AfterBackendPageRenderEvent' => true,
            'TYPO3\\CMS\\Backend\\Controller\\Event\\AfterFormEnginePageInitializedEvent' => true,
            'TYPO3\\CMS\\Backend\\Controller\\Event\\AfterPageColumnsSelectedForLocalizationEvent' => true,
            'TYPO3\\CMS\\Backend\\Controller\\Event\\AfterPageTreeItemsPreparedEvent' => true,
            'TYPO3\\CMS\\Backend\\Controller\\Event\\AfterRecordSummaryForLocalizationEvent' => true,
            'TYPO3\\CMS\\Backend\\Controller\\Event\\BeforeFormEnginePageInitializedEvent' => true,
            'TYPO3\\CMS\\Backend\\Controller\\Event\\ModifyAllowedItemsEvent' => true,
            'TYPO3\\CMS\\Backend\\Controller\\Event\\ModifyGenericBackendMessagesEvent' => true,
            'TYPO3\\CMS\\Backend\\Controller\\Event\\ModifyLinkHandlersEvent' => true,
            'TYPO3\\CMS\\Backend\\Controller\\Event\\ModifyNewContentElementWizardItemsEvent' => true,
            'TYPO3\\CMS\\Backend\\Controller\\Event\\ModifyPageLayoutContentEvent' => true,
            'TYPO3\\CMS\\Backend\\Controller\\Event\\RenderAdditionalContentToRecordListEvent' => true,
            'TYPO3\\CMS\\Backend\\Controller\\FileStorage\\TreeController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\File\\ThumbnailController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\FlashMessageController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\FormFlexAjaxController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\FormInlineAjaxController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\FormSelectTreeAjaxController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\Page\\LocalizationController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\Page\\TreeController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\SimpleDataHandlerController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\SiteInlineAjaxController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\StateTrackerController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\UserSettingsController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\Wizard\\AddController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\Wizard\\EditController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\Wizard\\ListController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\Wizard\\SuggestWizardController' => true,
            'TYPO3\\CMS\\Backend\\Domain\\Repository\\Localization\\LocalizationRepository' => true,
            'TYPO3\\CMS\\Backend\\ElementBrowser\\DatabaseBrowser' => true,
            'TYPO3\\CMS\\Backend\\ElementBrowser\\ElementBrowserInterface' => true,
            'TYPO3\\CMS\\Backend\\ElementBrowser\\ElementBrowserRegistry' => true,
            'TYPO3\\CMS\\Backend\\ElementBrowser\\Event\\IsFileSelectableEvent' => true,
            'TYPO3\\CMS\\Backend\\Exception' => true,
            'TYPO3\\CMS\\Backend\\Exception\\AccessDeniedException' => true,
            'TYPO3\\CMS\\Backend\\Exception\\BackendAccessDeniedException' => true,
            'TYPO3\\CMS\\Backend\\Exception\\BackendLockedException' => true,
            'TYPO3\\CMS\\Backend\\Exception\\ModuleAccessDeniedException' => true,
            'TYPO3\\CMS\\Backend\\Exception\\NoAccessibleModuleException' => true,
            'TYPO3\\CMS\\Backend\\Exception\\NonRoutableModuleException' => true,
            'TYPO3\\CMS\\Backend\\Exception\\SiteValidationErrorException' => true,
            'TYPO3\\CMS\\Backend\\Form\\Behavior\\ReloadOnFieldChange' => true,
            'TYPO3\\CMS\\Backend\\Form\\Behavior\\UpdateBitmaskOnFieldChange' => true,
            'TYPO3\\CMS\\Backend\\Form\\Behavior\\UpdateValueOnFieldChange' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\FileReferenceContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\FilesControlContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\FlexFormContainerContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\FlexFormElementContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\FlexFormEntryContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\FlexFormNoTabsContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\FlexFormSectionContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\FlexFormTabsContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\FullRecordContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\InlineControlContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\InlineRecordContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\ListOfFieldsContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\NoTabsContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\OuterWrapContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\PaletteAndSingleContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\SingleFieldContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\SiteLanguageContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\TabsContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\BackendLayoutWizardElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\CategoryElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\CheckboxElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\CheckboxLabeledToggleElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\CheckboxToggleElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\ColorElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\DatetimeElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\EmailElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\FileInfoElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\FolderElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\GroupElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\ImageManipulationElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\InputHiddenElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\InputSlugElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\InputTextElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\JsonElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\LinkElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\MfaInfoElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\NoneElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\NumberElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\PassThroughElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\PasswordElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\RadioElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\SelectCheckBoxElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\SelectMultipleSideBySideElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\SelectSingleBoxElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\SelectSingleElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\SelectTreeElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\TextElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\TextTableElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\UnknownElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\UserElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\UserSysFileStorageIsPublicElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\UuidElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Event\\CustomFileControlsEvent' => true,
            'TYPO3\\CMS\\Backend\\Form\\Event\\ModifyEditFormUserAccessEvent' => true,
            'TYPO3\\CMS\\Backend\\Form\\Event\\ModifyFileReferenceControlsEvent' => true,
            'TYPO3\\CMS\\Backend\\Form\\Event\\ModifyFileReferenceEnabledControlsEvent' => true,
            'TYPO3\\CMS\\Backend\\Form\\Event\\ModifyImageManipulationPreviewUrlEvent' => true,
            'TYPO3\\CMS\\Backend\\Form\\Event\\ModifyInlineElementControlsEvent' => true,
            'TYPO3\\CMS\\Backend\\Form\\Event\\ModifyInlineElementEnabledControlsEvent' => true,
            'TYPO3\\CMS\\Backend\\Form\\Event\\ModifyLinkExplanationEvent' => true,
            'TYPO3\\CMS\\Backend\\Form\\Exception' => true,
            'TYPO3\\CMS\\Backend\\Form\\Exception\\AccessDeniedContentEditException' => true,
            'TYPO3\\CMS\\Backend\\Form\\Exception\\AccessDeniedEditInternalsException' => true,
            'TYPO3\\CMS\\Backend\\Form\\Exception\\AccessDeniedListenerException' => true,
            'TYPO3\\CMS\\Backend\\Form\\Exception\\AccessDeniedPageEditException' => true,
            'TYPO3\\CMS\\Backend\\Form\\Exception\\AccessDeniedPageNewException' => true,
            'TYPO3\\CMS\\Backend\\Form\\Exception\\AccessDeniedRootNodeException' => true,
            'TYPO3\\CMS\\Backend\\Form\\Exception\\AccessDeniedTableModifyException' => true,
            'TYPO3\\CMS\\Backend\\Form\\Exception\\DatabaseDefaultLanguageException' => true,
            'TYPO3\\CMS\\Backend\\Form\\Exception\\DatabaseRecordException' => true,
            'TYPO3\\CMS\\Backend\\Form\\Exception\\DatabaseRecordWorkspaceDeletePlaceholderException' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldControl\\AddRecord' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldControl\\EditPopup' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldControl\\ElementBrowser' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldControl\\InsertClipboard' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldControl\\LinkPopup' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldControl\\ListModule' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldControl\\PasswordGenerator' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldControl\\ResetSelection' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldInformation\\AdminIsSystemMaintainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldInformation\\BackendLayoutFromParentPage' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldInformation\\TcaDescription' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldWizard\\DefaultLanguageDifferences' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldWizard\\LocalizationStateSelector' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldWizard\\OtherLanguageContent' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldWizard\\OtherLanguageThumbnails' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldWizard\\RecordsOverview' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldWizard\\SelectIcons' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldWizard\\TableList' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataCompiler' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataGroup\\FlexFormSegment' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataGroup\\OnTheFly' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataGroup\\OrderedProviderList' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataGroup\\SiteConfigurationDataGroup' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataGroup\\TcaDatabaseRecord' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataGroup\\TcaInputPlaceholderRecord' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataGroup\\TcaSelectTreeAjaxFieldData' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseDefaultLanguagePageRow' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseEditRow' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseEffectivePid' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseLanguageRows' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabasePageLanguageOverlayRows' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabasePageRootline' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseParentPageRow' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseRecordOverrideValues' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseRecordTypeValue' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseRowDateTimeFields' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseRowDefaultAsReadonly' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseRowDefaultValues' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseRowInitializeNew' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseSystemLanguageRows' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseUniqueUidNewRow' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseUserPermissionCheck' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\EvaluateDisplayConditions' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\InitializeProcessedTca' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\InlineOverrideChildTca' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\PageTsConfig' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\PageTsConfigMerged' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\SiteResolving' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\SiteTcaInline' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaCategory' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaCheckboxItems' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaColumnsOverrides' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaColumnsProcessCommon' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaColumnsProcessFieldDescriptions' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaColumnsProcessFieldLabels' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaColumnsProcessPlaceholders' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaColumnsProcessRecordTitle' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaColumnsProcessShowitem' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaColumnsRemoveUnused' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaFiles' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaFlexPrepare' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaFlexProcess' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaFolder' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaGroup' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaInline' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaInlineConfiguration' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaInlineExpandCollapseState' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaInlineIsOnSymmetricSide' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaInputPlaceholders' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaJson' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaLanguage' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaRadioItems' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaRecordTitle' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaSelectItems' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaSelectTreeItems' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaSiteLanguage' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaSlug' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaText' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaTypesShowitem' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaUuid' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\UserTsConfig' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormResultCompiler' => true,
            'TYPO3\\CMS\\Backend\\Form\\InlineStackProcessor' => true,
            'TYPO3\\CMS\\Backend\\Form\\NodeExpansion\\FieldControl' => true,
            'TYPO3\\CMS\\Backend\\Form\\NodeExpansion\\FieldInformation' => true,
            'TYPO3\\CMS\\Backend\\Form\\NodeExpansion\\FieldWizard' => true,
            'TYPO3\\CMS\\Backend\\Form\\NodeFactory' => true,
            'TYPO3\\CMS\\Backend\\Form\\Utility\\FormEngineUtility' => true,
            'TYPO3\\CMS\\Backend\\Form\\Wizard\\SuggestWizardDefaultReceiver' => true,
            'TYPO3\\CMS\\Backend\\FrontendBackendUserAuthentication' => true,
            'TYPO3\\CMS\\Backend\\History\\Event\\AfterHistoryRollbackFinishedEvent' => true,
            'TYPO3\\CMS\\Backend\\History\\Event\\BeforeHistoryRollbackStartEvent' => true,
            'TYPO3\\CMS\\Backend\\History\\RecordHistory' => true,
            'TYPO3\\CMS\\Backend\\LinkHandler\\MailLinkHandler' => true,
            'TYPO3\\CMS\\Backend\\LinkHandler\\PageLinkHandler' => true,
            'TYPO3\\CMS\\Backend\\LinkHandler\\TelephoneLinkHandler' => true,
            'TYPO3\\CMS\\Backend\\LinkHandler\\UrlLinkHandler' => true,
            'TYPO3\\CMS\\Backend\\LoginProvider\\Event\\ModifyPageLayoutOnLoginProviderSelectionEvent' => true,
            'TYPO3\\CMS\\Backend\\LoginProvider\\LoginProviderInterface' => true,
            'TYPO3\\CMS\\Backend\\LoginProvider\\LoginProviderResolver' => true,
            'TYPO3\\CMS\\Backend\\LoginProvider\\UsernamePasswordLoginProvider' => true,
            'TYPO3\\CMS\\Backend\\Module\\BeforeModuleCreationEvent' => true,
            'TYPO3\\CMS\\Backend\\Module\\MenuModule' => true,
            'TYPO3\\CMS\\Backend\\Module\\ModuleData' => true,
            'TYPO3\\CMS\\Backend\\Module\\ModuleInterface' => true,
            'TYPO3\\CMS\\Backend\\Preview\\PreviewRendererInterface' => true,
            'TYPO3\\CMS\\Backend\\Preview\\StandardContentPreviewRenderer' => true,
            'TYPO3\\CMS\\Backend\\Preview\\StandardPreviewRendererResolver' => true,
            'TYPO3\\CMS\\Backend\\RecordList\\DownloadRecordList' => true,
            'TYPO3\\CMS\\Backend\\RecordList\\Event\\ModifyRecordListHeaderColumnsEvent' => true,
            'TYPO3\\CMS\\Backend\\RecordList\\Event\\ModifyRecordListRecordActionsEvent' => true,
            'TYPO3\\CMS\\Backend\\RecordList\\Event\\ModifyRecordListTableActionsEvent' => true,
            'TYPO3\\CMS\\Backend\\Resource\\Processing\\DeferredBackendImageProcessor' => true,
            'TYPO3\\CMS\\Backend\\Routing\\Event\\AfterPagePreviewUriGeneratedEvent' => true,
            'TYPO3\\CMS\\Backend\\Routing\\Event\\BeforePagePreviewUriGeneratedEvent' => true,
            'TYPO3\\CMS\\Backend\\Routing\\Exception\\InvalidRequestTokenException' => true,
            'TYPO3\\CMS\\Backend\\Routing\\Exception\\MethodNotAllowedException' => true,
            'TYPO3\\CMS\\Backend\\Routing\\Exception\\MissingRequestTokenException' => true,
            'TYPO3\\CMS\\Backend\\Routing\\Exception\\ResourceNotFoundException' => true,
            'TYPO3\\CMS\\Backend\\Routing\\Exception\\RouteNotFoundException' => true,
            'TYPO3\\CMS\\Backend\\Routing\\Exception\\RouteTypeNotAllowedException' => true,
            'TYPO3\\CMS\\Backend\\Routing\\PreviewUriBuilder' => true,
            'TYPO3\\CMS\\Backend\\Routing\\Route' => true,
            'TYPO3\\CMS\\Backend\\Routing\\RouteResult' => true,
            'TYPO3\\CMS\\Backend\\Routing\\Router_decorated_1.inner' => true,
            'TYPO3\\CMS\\Backend\\Search\\Event\\BeforeSearchInDatabaseRecordProviderEvent' => true,
            'TYPO3\\CMS\\Backend\\Search\\Event\\ModifyQueryForLiveSearchEvent' => true,
            'TYPO3\\CMS\\Backend\\Search\\Event\\ModifyResultItemInLiveSearchEvent' => true,
            'TYPO3\\CMS\\Backend\\Search\\LiveSearch\\DatabaseRecordProvider' => true,
            'TYPO3\\CMS\\Backend\\Search\\LiveSearch\\PageRecordProvider' => true,
            'TYPO3\\CMS\\Backend\\Search\\LiveSearch\\QueryParser' => true,
            'TYPO3\\CMS\\Backend\\Search\\LiveSearch\\ResultItem' => true,
            'TYPO3\\CMS\\Backend\\Search\\LiveSearch\\ResultItemAction' => true,
            'TYPO3\\CMS\\Backend\\Search\\LiveSearch\\SearchDemand\\DemandProperty' => true,
            'TYPO3\\CMS\\Backend\\Search\\LiveSearch\\SearchDemand\\MutableSearchDemand' => true,
            'TYPO3\\CMS\\Backend\\Search\\LiveSearch\\SearchDemand\\SearchDemand' => true,
            'TYPO3\\CMS\\Backend\\Search\\LiveSearch\\SearchProviderRegistry' => true,
            'TYPO3\\CMS\\Backend\\Search\\LiveSearch\\SearchRepository' => true,
            'TYPO3\\CMS\\Backend\\Security\\SudoMode\\Access\\AccessClaim' => true,
            'TYPO3\\CMS\\Backend\\Security\\SudoMode\\Access\\AccessGrant' => true,
            'TYPO3\\CMS\\Backend\\Security\\SudoMode\\Access\\AccessSubjectInterface' => true,
            'TYPO3\\CMS\\Backend\\Security\\SudoMode\\Access\\RouteAccessSubject' => true,
            'TYPO3\\CMS\\Backend\\Security\\SudoMode\\Exception\\RequestGrantedException' => true,
            'TYPO3\\CMS\\Backend\\Security\\SudoMode\\Exception\\VerificationRequiredException' => true,
            'TYPO3\\CMS\\Backend\\Security\\SudoMode\\PasswordVerification' => true,
            'TYPO3\\CMS\\Backend\\ServiceProvider' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\AbstractControl' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\ButtonBar' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\Buttons\\AbstractButton' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\Buttons\\Action\\HelpButton' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\Buttons\\Action\\ShortcutButton' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\Buttons\\DropDownButton' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\Buttons\\DropDown\\DropDownDivider' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\Buttons\\DropDown\\DropDownHeader' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\Buttons\\DropDown\\DropDownItem' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\Buttons\\DropDown\\DropDownRadio' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\Buttons\\DropDown\\DropDownToggle' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\Buttons\\FullyRenderedButton' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\Buttons\\GenericButton' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\Buttons\\InputButton' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\Buttons\\LinkButton' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\Buttons\\SplitButton' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\DocHeaderComponent' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\MenuRegistry' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\Menu\\Menu' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\Menu\\MenuItem' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\MetaInformation' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\ModifyButtonBarEvent' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\MultiRecordSelection\\Action' => true,
            'TYPO3\\CMS\\Backend\\Template\\ModuleTemplate' => true,
            'TYPO3\\CMS\\Backend\\Toolbar\\Enumeration\\InformationStatus' => true,
            'TYPO3\\CMS\\Backend\\Toolbar\\ToolbarItemsRegistry' => true,
            'TYPO3\\CMS\\Backend\\Tree\\FileStorageTreeProvider' => true,
            'TYPO3\\CMS\\Backend\\Tree\\Renderer\\UnorderedListTreeRenderer' => true,
            'TYPO3\\CMS\\Backend\\Tree\\Repository\\PageTreeRepository' => true,
            'TYPO3\\CMS\\Backend\\Tree\\SortedTreeNodeCollection' => true,
            'TYPO3\\CMS\\Backend\\Tree\\TreeNode' => true,
            'TYPO3\\CMS\\Backend\\Tree\\TreeNodeCollection' => true,
            'TYPO3\\CMS\\Backend\\Tree\\TreeRepresentationNode' => true,
            'TYPO3\\CMS\\Backend\\Tree\\View\\BrowseTreeView' => true,
            'TYPO3\\CMS\\Backend\\Tree\\View\\ElementBrowserPageTreeView' => true,
            'TYPO3\\CMS\\Backend\\Tree\\View\\NewRecordPageTreeView' => true,
            'TYPO3\\CMS\\Backend\\Tree\\View\\PageMovingPagePositionMap' => true,
            'TYPO3\\CMS\\Backend\\Tree\\View\\PagePositionMap' => true,
            'TYPO3\\CMS\\Backend\\Tree\\View\\PageTreeView' => true,
            'TYPO3\\CMS\\Backend\\Utility\\BackendUtility' => true,
            'TYPO3\\CMS\\Backend\\View\\BackendLayout\\BackendLayout' => true,
            'TYPO3\\CMS\\Backend\\View\\BackendLayout\\BackendLayoutCollection' => true,
            'TYPO3\\CMS\\Backend\\View\\BackendLayout\\ContentFetcher' => true,
            'TYPO3\\CMS\\Backend\\View\\BackendLayout\\DefaultDataProvider' => true,
            'TYPO3\\CMS\\Backend\\View\\BackendLayout\\Grid\\Grid' => true,
            'TYPO3\\CMS\\Backend\\View\\BackendLayout\\Grid\\GridColumn' => true,
            'TYPO3\\CMS\\Backend\\View\\BackendLayout\\Grid\\GridColumnItem' => true,
            'TYPO3\\CMS\\Backend\\View\\BackendLayout\\Grid\\GridRow' => true,
            'TYPO3\\CMS\\Backend\\View\\BackendLayout\\Grid\\LanguageColumn' => true,
            'TYPO3\\CMS\\Backend\\View\\BackendLayout\\PageTsBackendLayoutDataProvider' => true,
            'TYPO3\\CMS\\Backend\\View\\BackendViewFactory' => true,
            'TYPO3\\CMS\\Backend\\View\\Drawing\\BackendLayoutRenderer' => true,
            'TYPO3\\CMS\\Backend\\View\\Drawing\\DrawingConfiguration' => true,
            'TYPO3\\CMS\\Backend\\View\\Event\\AfterSectionMarkupGeneratedEvent' => true,
            'TYPO3\\CMS\\Backend\\View\\Event\\BeforeSectionMarkupGeneratedEvent' => true,
            'TYPO3\\CMS\\Backend\\View\\Event\\IsContentUsedOnPageLayoutEvent' => true,
            'TYPO3\\CMS\\Backend\\View\\Event\\ModifyDatabaseQueryForContentEvent' => true,
            'TYPO3\\CMS\\Backend\\View\\Event\\ModifyDatabaseQueryForRecordListingEvent' => true,
            'TYPO3\\CMS\\Backend\\View\\Event\\PageContentPreviewRenderingEvent' => true,
            'TYPO3\\CMS\\Backend\\View\\FolderUtilityRenderer' => true,
            'TYPO3\\CMS\\Backend\\View\\PageLayoutContext' => true,
            'TYPO3\\CMS\\Backend\\View\\ProgressListenerInterface' => true,
            'TYPO3\\CMS\\Backend\\View\\ValueFormatter\\FlexFormValueFormatter' => true,
            'TYPO3\\CMS\\Belog\\Domain\\Model\\Constraint' => true,
            'TYPO3\\CMS\\Belog\\Domain\\Model\\LogEntry' => true,
            'TYPO3\\CMS\\Beuser\\Domain\\Dto\\BackendUserGroup' => true,
            'TYPO3\\CMS\\Beuser\\Domain\\Model\\BackendUser' => true,
            'TYPO3\\CMS\\Beuser\\Domain\\Model\\BackendUserGroup' => true,
            'TYPO3\\CMS\\Beuser\\Domain\\Model\\Demand' => true,
            'TYPO3\\CMS\\Beuser\\Domain\\Model\\FileMount' => true,
            'TYPO3\\CMS\\Beuser\\Domain\\Repository\\BackendUserSessionRepository' => true,
            'TYPO3\\CMS\\Beuser\\Exception' => true,
            'TYPO3\\CMS\\Beuser\\Service\\UserInformationService' => true,
            'TYPO3\\CMS\\Core\\Attribute\\WebhookMessage' => true,
            'TYPO3\\CMS\\Core\\Authentication\\AbstractAuthenticationService' => true,
            'TYPO3\\CMS\\Core\\Authentication\\AuthenticationService' => true,
            'TYPO3\\CMS\\Core\\Authentication\\BackendUserAuthentication' => true,
            'TYPO3\\CMS\\Core\\Authentication\\CommandLineUserAuthentication' => true,
            'TYPO3\\CMS\\Core\\Authentication\\Event\\AfterGroupsResolvedEvent' => true,
            'TYPO3\\CMS\\Core\\Authentication\\Event\\AfterUserLoggedInEvent' => true,
            'TYPO3\\CMS\\Core\\Authentication\\Event\\AfterUserLoggedOutEvent' => true,
            'TYPO3\\CMS\\Core\\Authentication\\Event\\BeforeRequestTokenProcessedEvent' => true,
            'TYPO3\\CMS\\Core\\Authentication\\Event\\BeforeUserLogoutEvent' => true,
            'TYPO3\\CMS\\Core\\Authentication\\Event\\LoginAttemptFailedEvent' => true,
            'TYPO3\\CMS\\Core\\Authentication\\Event\\MfaVerificationFailedEvent' => true,
            'TYPO3\\CMS\\Core\\Authentication\\IpLocker' => true,
            'TYPO3\\CMS\\Core\\Authentication\\LoginType' => true,
            'TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaProviderManifest' => true,
            'TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaProviderManifestInterface' => true,
            'TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaProviderPropertyManager' => true,
            'TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaRequiredException' => true,
            'TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaViewType' => true,
            'TYPO3\\CMS\\Core\\Authentication\\Mfa\\Provider\\RecoveryCodes' => true,
            'TYPO3\\CMS\\Core\\Authentication\\Mfa\\Provider\\Totp' => true,
            'TYPO3\\CMS\\Core\\Authentication\\MimicServiceInterface' => true,
            'TYPO3\\CMS\\Core\\Cache\\Backend\\ApcuBackend' => true,
            'TYPO3\\CMS\\Core\\Cache\\Backend\\FileBackend' => true,
            'TYPO3\\CMS\\Core\\Cache\\Backend\\FreezableBackendInterface' => true,
            'TYPO3\\CMS\\Core\\Cache\\Backend\\MemcachedBackend' => true,
            'TYPO3\\CMS\\Core\\Cache\\Backend\\NullBackend' => true,
            'TYPO3\\CMS\\Core\\Cache\\Backend\\RedisBackend' => true,
            'TYPO3\\CMS\\Core\\Cache\\Backend\\SimpleFileBackend' => true,
            'TYPO3\\CMS\\Core\\Cache\\Backend\\TransientMemoryBackend' => true,
            'TYPO3\\CMS\\Core\\Cache\\Backend\\Typo3DatabaseBackend' => true,
            'TYPO3\\CMS\\Core\\Cache\\Event\\CacheFlushEvent' => true,
            'TYPO3\\CMS\\Core\\Cache\\Event\\CacheWarmupEvent' => true,
            'TYPO3\\CMS\\Core\\Cache\\Exception' => true,
            'TYPO3\\CMS\\Core\\Cache\\Exception\\DuplicateIdentifierException' => true,
            'TYPO3\\CMS\\Core\\Cache\\Exception\\InvalidBackendException' => true,
            'TYPO3\\CMS\\Core\\Cache\\Exception\\InvalidCacheException' => true,
            'TYPO3\\CMS\\Core\\Cache\\Exception\\InvalidDataException' => true,
            'TYPO3\\CMS\\Core\\Cache\\Exception\\NoSuchCacheException' => true,
            'TYPO3\\CMS\\Core\\Cache\\Exception\\NoSuchCacheGroupException' => true,
            'TYPO3\\CMS\\Core\\Cache\\Frontend\\NullFrontend' => true,
            'TYPO3\\CMS\\Core\\Cache\\Frontend\\PhpFrontend' => true,
            'TYPO3\\CMS\\Core\\Cache\\Frontend\\VariableFrontend' => true,
            'TYPO3\\CMS\\Core\\Category\\Collection\\CategoryCollection' => true,
            'TYPO3\\CMS\\Core\\Charset\\UnknownCharsetException' => true,
            'TYPO3\\CMS\\Core\\Collection\\EditableCollectionInterface' => true,
            'TYPO3\\CMS\\Core\\Command\\Descriptor\\TextDescriptor' => true,
            'TYPO3\\CMS\\Core\\Compatibility\\PseudoSiteTcaDisplayCondition' => true,
            'TYPO3\\CMS\\Core\\Composer\\CliEntryPoint' => true,
            'TYPO3\\CMS\\Core\\Composer\\InstallerScripts' => true,
            'TYPO3\\CMS\\Core\\Configuration\\CKEditor5Migrator' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Event\\AfterFlexFormDataStructureIdentifierInitializedEvent' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Event\\AfterFlexFormDataStructureParsedEvent' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Event\\AfterTcaCompilationEvent' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Event\\BeforeFlexFormDataStructureIdentifierInitializedEvent' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Event\\BeforeFlexFormDataStructureParsedEvent' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Event\\ModifyLoadedPageTsConfigEvent' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Event\\SiteConfigurationBeforeWriteEvent' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Event\\SiteConfigurationLoadedEvent' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Exception\\ExtensionConfigurationExtensionNotConfiguredException' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Exception\\ExtensionConfigurationPathDoesNotExistException' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Exception\\SiteConfigurationWriteException' => true,
            'TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Features' => true,
            'TYPO3\\CMS\\Core\\Configuration\\FlexForm\\Exception\\InvalidCombinedPointerFieldException' => true,
            'TYPO3\\CMS\\Core\\Configuration\\FlexForm\\Exception\\InvalidIdentifierException' => true,
            'TYPO3\\CMS\\Core\\Configuration\\FlexForm\\Exception\\InvalidParentRowException' => true,
            'TYPO3\\CMS\\Core\\Configuration\\FlexForm\\Exception\\InvalidParentRowLoopException' => true,
            'TYPO3\\CMS\\Core\\Configuration\\FlexForm\\Exception\\InvalidParentRowRootException' => true,
            'TYPO3\\CMS\\Core\\Configuration\\FlexForm\\Exception\\InvalidPointerFieldValueException' => true,
            'TYPO3\\CMS\\Core\\Configuration\\FlexForm\\Exception\\InvalidSinglePointerFieldException' => true,
            'TYPO3\\CMS\\Core\\Configuration\\FlexForm\\Exception\\InvalidTcaException' => true,
            'TYPO3\\CMS\\Core\\Configuration\\FlexForm\\FlexFormTools' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Loader\\Exception\\YamlFileLoadingException' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Loader\\Exception\\YamlParseException' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Loader\\Exception\\YamlPlaceholderException' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Loader\\PageTsConfigLoader_decorated_1.inner' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Loader\\YamlFileLoader' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Loader\\YamlPlaceholderGuard' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Processor\\PlaceholderProcessorList' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Processor\\Placeholder\\EnvVariableProcessor' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Processor\\Placeholder\\ValueFromReferenceArrayProcessor' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Richtext' => true,
            'TYPO3\\CMS\\Core\\Configuration\\TypoScript\\Exception\\InvalidTypoScriptConditionException' => true,
            'TYPO3\\CMS\\Core\\Console\\Application' => true,
            'TYPO3\\CMS\\Core\\Console\\CommandNameAlreadyInUseException' => true,
            'TYPO3\\CMS\\Core\\Console\\CommandRegistry_decorated_1.inner' => true,
            'TYPO3\\CMS\\Core\\Console\\CommandRegistry_decorated_2.inner' => true,
            'TYPO3\\CMS\\Core\\Console\\UnknownCommandException' => true,
            'TYPO3\\CMS\\Core\\Context\\DateTimeAspect' => true,
            'TYPO3\\CMS\\Core\\Context\\Exception\\AspectNotFoundException' => true,
            'TYPO3\\CMS\\Core\\Context\\Exception\\AspectPropertyNotFoundException' => true,
            'TYPO3\\CMS\\Core\\Context\\FileProcessingAspect' => true,
            'TYPO3\\CMS\\Core\\Context\\LanguageAspect' => true,
            'TYPO3\\CMS\\Core\\Context\\LanguageAspectFactory' => true,
            'TYPO3\\CMS\\Core\\Context\\SecurityAspect' => true,
            'TYPO3\\CMS\\Core\\Context\\TypoScriptAspect' => true,
            'TYPO3\\CMS\\Core\\Context\\UserAspect' => true,
            'TYPO3\\CMS\\Core\\Context\\VisibilityAspect' => true,
            'TYPO3\\CMS\\Core\\Context\\WorkspaceAspect' => true,
            'TYPO3\\CMS\\Core\\Controller\\ErrorPageController' => true,
            'TYPO3\\CMS\\Core\\Controller\\IconController' => true,
            'TYPO3\\CMS\\Core\\Controller\\RequireJsController' => true,
            'TYPO3\\CMS\\Core\\Core\\ApplicationInterface' => true,
            'TYPO3\\CMS\\Core\\Core\\Bootstrap' => true,
            'TYPO3\\CMS\\Core\\Core\\ClassLoadingInformationGenerator' => true,
            'TYPO3\\CMS\\Core\\Core\\Environment' => true,
            'TYPO3\\CMS\\Core\\Core\\Event\\BootCompletedEvent' => true,
            'TYPO3\\CMS\\Core\\Core\\SystemEnvironmentBuilder' => true,
            'TYPO3\\CMS\\Core\\Country\\Country' => true,
            'TYPO3\\CMS\\Core\\Country\\CountryFilter' => true,
            'TYPO3\\CMS\\Core\\Country\\CountryProvider' => true,
            'TYPO3\\CMS\\Core\\Crypto\\PasswordHashing\\Argon2iPasswordHash' => true,
            'TYPO3\\CMS\\Core\\Crypto\\PasswordHashing\\Argon2idPasswordHash' => true,
            'TYPO3\\CMS\\Core\\Crypto\\PasswordHashing\\BcryptPasswordHash' => true,
            'TYPO3\\CMS\\Core\\Crypto\\PasswordHashing\\BlowfishPasswordHash' => true,
            'TYPO3\\CMS\\Core\\Crypto\\PasswordHashing\\InvalidPasswordHashException' => true,
            'TYPO3\\CMS\\Core\\Crypto\\PasswordHashing\\Md5PasswordHash' => true,
            'TYPO3\\CMS\\Core\\Crypto\\PasswordHashing\\Pbkdf2PasswordHash' => true,
            'TYPO3\\CMS\\Core\\Crypto\\PasswordHashing\\PhpassPasswordHash' => true,
            'TYPO3\\CMS\\Core\\Crypto\\Random' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\DataHandler' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\Event\\AppendLinkHandlerElementsEvent' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\Event\\IsTableExcludedFromReferenceIndexEvent' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\History\\RecordHistoryStore' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\Localization\\DataMapItem' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\Localization\\DataMapProcessor' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\Localization\\State' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\Model\\CorrelationId' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\Model\\EntityContext' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\Model\\EntityPointer' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\Model\\EntityPointerLink' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\Model\\EntityUidPointer' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\Model\\RecordState' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\Model\\RecordStateFactory' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\PagePermissionAssembler' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\PlainDataResolver' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\ReferenceIndexUpdater' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\SlugEnricher' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\SlugHelper' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\SoftReferenceParserResult' => true,
            'TYPO3\\CMS\\Core\\Database\\Connection' => true,
            'TYPO3\\CMS\\Core\\Database\\Driver\\DriverConnection' => true,
            'TYPO3\\CMS\\Core\\Database\\Driver\\DriverResult' => true,
            'TYPO3\\CMS\\Core\\Database\\Driver\\DriverStatement' => true,
            'TYPO3\\CMS\\Core\\Database\\Driver\\PDOMySql\\Driver' => true,
            'TYPO3\\CMS\\Core\\Database\\Driver\\PDOPgSql\\Driver' => true,
            'TYPO3\\CMS\\Core\\Database\\Driver\\PDOSqlite\\Driver' => true,
            'TYPO3\\CMS\\Core\\Database\\Event\\AlterTableDefinitionStatementsEvent' => true,
            'TYPO3\\CMS\\Core\\Database\\Platform\\PlatformInformation' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\BulkInsertQuery' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Expression\\CompositeExpression' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Expression\\ExpressionBuilder' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\NamedParameterNotSupportedForPreparedStatementException' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\QueryHelper' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\BackendWorkspaceRestriction' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\DefaultRestrictionContainer' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\DeletedRestriction' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\DocumentTypeExclusionRestriction' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\EndTimeRestriction' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\FrontendGroupRestriction' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\FrontendRestrictionContainer' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\FrontendWorkspaceRestriction' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\HiddenRestriction' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\LimitToTablesRestrictionContainer' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\PageIdListRestriction' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\PagePermissionRestriction' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\RootLevelRestriction' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\StartTimeRestriction' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\WorkspaceRestriction' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\UnsupportedPreparedStatementParameterTypeException' => true,
            'TYPO3\\CMS\\Core\\Database\\ReferenceIndex' => true,
            'TYPO3\\CMS\\Core\\Database\\RelationHandler' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Comparator' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\ConnectionMigrator' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\DefaultTcaSchema' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\EventListener\\SchemaAlterTableListener' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\EventListener\\SchemaColumnDefinitionListener' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\EventListener\\SchemaIndexDefinitionListener' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Exception\\DefaultTcaSchemaTablePositionException' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Exception\\StatementException' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Exception\\UnexpectedSignalReturnValueTypeException' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\CreateColumnDefinitionItem' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\CreateDefinition' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\CreateForeignKeyDefinitionItem' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\CreateIndexDefinitionItem' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\CreateTableClause' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\CreateTableStatement' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\BigIntDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\BinaryDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\BitDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\BlobDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\CharDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\DateDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\DateTimeDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\DecimalDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\DoubleDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\EnumDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\FloatDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\IntegerDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\JsonDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\LongBlobDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\LongTextDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\MediumBlobDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\MediumIntDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\MediumTextDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\NumericDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\RealDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\SetDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\SmallIntDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\TextDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\TimeDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\TimestampDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\TinyBlobDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\TinyIntDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\TinyTextDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\VarBinaryDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\VarCharDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\YearDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\Identifier' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\IndexColumnName' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\ReferenceDefinition' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\Lexer' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\Parser' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\TableBuilder' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\SchemaInformation' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\TableDiff' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Types\\DateTimeType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Types\\DateType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Types\\EnumType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Types\\SetType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Types\\TimeType' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\AutowireInjectMethodsPass' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\Cache\\ContainerBackend' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\CommonFactory' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\ConsoleCommandPass' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\ContainerException' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\EnvVarProcessor' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\FailsafeContainer' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\ListenerProviderPass' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\LoggerAwarePass' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\LoggerInterfacePass' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\MessageHandlerPass' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\MessengerMiddlewarePass' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\MfaProviderPass' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\NotFoundException' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\PublicServicePass' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\ServiceProviderCompilationPass' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\ServiceProviderRegistry' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\SingletonPass' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\SoftReferenceParserPass' => true,
            'TYPO3\\CMS\\Core\\Domain\\Access\\RecordAccessGrantedEvent' => true,
            'TYPO3\\CMS\\Core\\Domain\\ConsumableString' => true,
            'TYPO3\\CMS\\Core\\Domain\\EqualityInterface' => true,
            'TYPO3\\CMS\\Core\\Domain\\Event\\AfterRecordLanguageOverlayEvent' => true,
            'TYPO3\\CMS\\Core\\Domain\\Event\\BeforePageLanguageOverlayEvent' => true,
            'TYPO3\\CMS\\Core\\Domain\\Event\\BeforeRecordLanguageOverlayEvent' => true,
            'TYPO3\\CMS\\Core\\Domain\\Page' => true,
            'TYPO3\\CMS\\Core\\Domain\\Repository\\PageRepository' => true,
            'TYPO3\\CMS\\Core\\Error\\ErrorHandler' => true,
            'TYPO3\\CMS\\Core\\Error\\ErrorHandlerInterface' => true,
            'TYPO3\\CMS\\Core\\Error\\Exception' => true,
            'TYPO3\\CMS\\Core\\Error\\Http\\BadRequestException' => true,
            'TYPO3\\CMS\\Core\\Error\\Http\\ForbiddenException' => true,
            'TYPO3\\CMS\\Core\\Error\\Http\\InternalServerErrorException' => true,
            'TYPO3\\CMS\\Core\\Error\\Http\\PageNotFoundException' => true,
            'TYPO3\\CMS\\Core\\Error\\Http\\ServiceUnavailableException' => true,
            'TYPO3\\CMS\\Core\\Error\\Http\\ShortcutTargetPageNotFoundException' => true,
            'TYPO3\\CMS\\Core\\Error\\Http\\StatusException' => true,
            'TYPO3\\CMS\\Core\\Error\\Http\\UnauthorizedException' => true,
            'TYPO3\\CMS\\Core\\Error\\PageErrorHandler\\FluidPageErrorHandler' => true,
            'TYPO3\\CMS\\Core\\Error\\PageErrorHandler\\InvalidPageErrorHandlerException' => true,
            'TYPO3\\CMS\\Core\\Error\\PageErrorHandler\\PageContentErrorHandler' => true,
            'TYPO3\\CMS\\Core\\Error\\PageErrorHandler\\PageErrorHandlerNotConfiguredException' => true,
            'TYPO3\\CMS\\Core\\EventDispatcher\\ListenerProvider_decorated_1.inner' => true,
            'TYPO3\\CMS\\Core\\EventDispatcher\\ListenerProvider_decorated_2.inner' => true,
            'TYPO3\\CMS\\Core\\EventDispatcher\\ListenerProvider_decorated_3.inner' => true,
            'TYPO3\\CMS\\Core\\EventDispatcher\\NoopEventDispatcher' => true,
            'TYPO3\\CMS\\Core\\Exception' => true,
            'TYPO3\\CMS\\Core\\Exception\\Archive\\ExtractException' => true,
            'TYPO3\\CMS\\Core\\Exception\\InvalidPasswordRulesException' => true,
            'TYPO3\\CMS\\Core\\Exception\\MissingTsfeException' => true,
            'TYPO3\\CMS\\Core\\Exception\\Page\\BrokenRootLineException' => true,
            'TYPO3\\CMS\\Core\\Exception\\Page\\CircularRootLineException' => true,
            'TYPO3\\CMS\\Core\\Exception\\Page\\MountPointException' => true,
            'TYPO3\\CMS\\Core\\Exception\\Page\\MountPointsDisabledException' => true,
            'TYPO3\\CMS\\Core\\Exception\\Page\\PageNotFoundException' => true,
            'TYPO3\\CMS\\Core\\Exception\\Page\\PagePropertyRelationNotFoundException' => true,
            'TYPO3\\CMS\\Core\\Exception\\Page\\RootLineException' => true,
            'TYPO3\\CMS\\Core\\Exception\\SiteNotFoundException' => true,
            'TYPO3\\CMS\\Core\\ExpressionLanguage\\DeprecatingRequestWrapper' => true,
            'TYPO3\\CMS\\Core\\ExpressionLanguage\\FunctionsProvider\\DefaultFunctionsProvider' => true,
            'TYPO3\\CMS\\Core\\ExpressionLanguage\\FunctionsProvider\\Typo3ConditionFunctionsProvider' => true,
            'TYPO3\\CMS\\Core\\ExpressionLanguage\\RequestWrapper' => true,
            'TYPO3\\CMS\\Core\\ExpressionLanguage\\Resolver' => true,
            'TYPO3\\CMS\\Core\\ExpressionLanguage\\TypoScriptConditionProvider' => true,
            'TYPO3\\CMS\\Core\\FormProtection\\BackendFormProtection' => true,
            'TYPO3\\CMS\\Core\\FormProtection\\DisabledFormProtection' => true,
            'TYPO3\\CMS\\Core\\FormProtection\\Exception' => true,
            'TYPO3\\CMS\\Core\\FormProtection\\FrontendFormProtection' => true,
            'TYPO3\\CMS\\Core\\FormProtection\\InstallToolFormProtection' => true,
            'TYPO3\\CMS\\Core\\Hooks\\BackendUserGroupIntegrityCheck' => true,
            'TYPO3\\CMS\\Core\\Hooks\\BackendUserPasswordCheck' => true,
            'TYPO3\\CMS\\Core\\Hooks\\CreateSiteConfiguration' => true,
            'TYPO3\\CMS\\Core\\Hooks\\DestroySessionHook' => true,
            'TYPO3\\CMS\\Core\\Hooks\\PagesTsConfigGuard' => true,
            'TYPO3\\CMS\\Core\\Hooks\\TcaDisplayConditions' => true,
            'TYPO3\\CMS\\Core\\Hooks\\TcaItemsProcessorFunctions' => true,
            'TYPO3\\CMS\\Core\\Html\\Event\\BrokenLinkAnalysisEvent' => true,
            'TYPO3\\CMS\\Core\\Html\\HtmlCropper' => true,
            'TYPO3\\CMS\\Core\\Html\\HtmlParser' => true,
            'TYPO3\\CMS\\Core\\Html\\I18nSanitizerBuilder' => true,
            'TYPO3\\CMS\\Core\\Html\\SanitizerBuilderFactory' => true,
            'TYPO3\\CMS\\Core\\Html\\SanitizerInitiator' => true,
            'TYPO3\\CMS\\Core\\Html\\SimpleNode' => true,
            'TYPO3\\CMS\\Core\\Html\\SimpleParser' => true,
            'TYPO3\\CMS\\Core\\Http\\CookieScope' => true,
            'TYPO3\\CMS\\Core\\Http\\Dispatcher' => true,
            'TYPO3\\CMS\\Core\\Http\\DispatcherInterface' => true,
            'TYPO3\\CMS\\Core\\Http\\FalDumpFileContentsDecoratorStream' => true,
            'TYPO3\\CMS\\Core\\Http\\HtmlResponse' => true,
            'TYPO3\\CMS\\Core\\Http\\ImmediateResponseException' => true,
            'TYPO3\\CMS\\Core\\Http\\InvalidRequestUrlOnCliException' => true,
            'TYPO3\\CMS\\Core\\Http\\JsonResponse' => true,
            'TYPO3\\CMS\\Core\\Http\\Message' => true,
            'TYPO3\\CMS\\Core\\Http\\MiddlewareDispatcher' => true,
            'TYPO3\\CMS\\Core\\Http\\NormalizedParams' => true,
            'TYPO3\\CMS\\Core\\Http\\NullResponse' => true,
            'TYPO3\\CMS\\Core\\Http\\PropagateResponseException' => true,
            'TYPO3\\CMS\\Core\\Http\\RedirectResponse' => true,
            'TYPO3\\CMS\\Core\\Http\\Request' => true,
            'TYPO3\\CMS\\Core\\Http\\Response' => true,
            'TYPO3\\CMS\\Core\\Http\\ResponseFactory' => true,
            'TYPO3\\CMS\\Core\\Http\\Security\\InvalidReferrerException' => true,
            'TYPO3\\CMS\\Core\\Http\\Security\\MissingReferrerException' => true,
            'TYPO3\\CMS\\Core\\Http\\Security\\ReferrerEnforcer' => true,
            'TYPO3\\CMS\\Core\\Http\\SelfEmittableLazyOpenStream' => true,
            'TYPO3\\CMS\\Core\\Http\\ServerRequest' => true,
            'TYPO3\\CMS\\Core\\Http\\ServerRequestFactory' => true,
            'TYPO3\\CMS\\Core\\Http\\Stream' => true,
            'TYPO3\\CMS\\Core\\Http\\StreamFactory' => true,
            'TYPO3\\CMS\\Core\\Http\\UploadedFile' => true,
            'TYPO3\\CMS\\Core\\Http\\UploadedFileFactory' => true,
            'TYPO3\\CMS\\Core\\Http\\Uri' => true,
            'TYPO3\\CMS\\Core\\Http\\UriFactory' => true,
            'TYPO3\\CMS\\Core\\IO\\CsvStreamFilter' => true,
            'TYPO3\\CMS\\Core\\Imaging\\Dimension' => true,
            'TYPO3\\CMS\\Core\\Imaging\\Event\\ModifyIconForResourcePropertiesEvent' => true,
            'TYPO3\\CMS\\Core\\Imaging\\Exception\\UnsupportedFileException' => true,
            'TYPO3\\CMS\\Core\\Imaging\\Exception\\ZeroImageDimensionException' => true,
            'TYPO3\\CMS\\Core\\Imaging\\GraphicalFunctions' => true,
            'TYPO3\\CMS\\Core\\Imaging\\Icon' => true,
            'TYPO3\\CMS\\Core\\Imaging\\IconProvider\\BitmapIconProvider' => true,
            'TYPO3\\CMS\\Core\\Imaging\\IconProvider\\SvgIconProvider' => true,
            'TYPO3\\CMS\\Core\\Imaging\\IconProvider\\SvgSpriteIconProvider' => true,
            'TYPO3\\CMS\\Core\\Imaging\\IconRegistry_decorated_1.inner' => true,
            'TYPO3\\CMS\\Core\\Imaging\\ImageDimension' => true,
            'TYPO3\\CMS\\Core\\Imaging\\ImageMagickFile' => true,
            'TYPO3\\CMS\\Core\\Imaging\\ImageManipulation\\Area' => true,
            'TYPO3\\CMS\\Core\\Imaging\\ImageManipulation\\CropVariant' => true,
            'TYPO3\\CMS\\Core\\Imaging\\ImageManipulation\\CropVariantCollection' => true,
            'TYPO3\\CMS\\Core\\Imaging\\ImageManipulation\\InvalidConfigurationException' => true,
            'TYPO3\\CMS\\Core\\Imaging\\ImageManipulation\\Ratio' => true,
            'TYPO3\\CMS\\Core\\Information\\Typo3Information' => true,
            'TYPO3\\CMS\\Core\\Information\\Typo3Version' => true,
            'TYPO3\\CMS\\Core\\LinkHandling\\EmailLinkHandler' => true,
            'TYPO3\\CMS\\Core\\LinkHandling\\Exception\\UnknownLinkHandlerException' => true,
            'TYPO3\\CMS\\Core\\LinkHandling\\Exception\\UnknownUrnException' => true,
            'TYPO3\\CMS\\Core\\LinkHandling\\FileLinkHandler' => true,
            'TYPO3\\CMS\\Core\\LinkHandling\\FolderLinkHandler' => true,
            'TYPO3\\CMS\\Core\\LinkHandling\\LegacyLinkNotationConverter' => true,
            'TYPO3\\CMS\\Core\\LinkHandling\\PageLinkHandler' => true,
            'TYPO3\\CMS\\Core\\LinkHandling\\RecordLinkHandler' => true,
            'TYPO3\\CMS\\Core\\LinkHandling\\TelephoneLinkHandler' => true,
            'TYPO3\\CMS\\Core\\LinkHandling\\TypoLinkCodecService' => true,
            'TYPO3\\CMS\\Core\\LinkHandling\\UrlLinkHandler' => true,
            'TYPO3\\CMS\\Core\\Localization\\DateFormatter' => true,
            'TYPO3\\CMS\\Core\\Localization\\Exception\\FileNotFoundException' => true,
            'TYPO3\\CMS\\Core\\Localization\\Exception\\InvalidParserException' => true,
            'TYPO3\\CMS\\Core\\Localization\\Exception\\InvalidXmlFileException' => true,
            'TYPO3\\CMS\\Core\\Localization\\LanguageService' => true,
            'TYPO3\\CMS\\Core\\Localization\\Locale' => true,
            'TYPO3\\CMS\\Core\\Localization\\OfficialLanguages' => true,
            'TYPO3\\CMS\\Core\\Localization\\Parser\\LocalizationParserInterface' => true,
            'TYPO3\\CMS\\Core\\Localization\\Parser\\XliffParser' => true,
            'TYPO3\\CMS\\Core\\Locking\\Exception' => true,
            'TYPO3\\CMS\\Core\\Locking\\Exception\\LockAcquireException' => true,
            'TYPO3\\CMS\\Core\\Locking\\Exception\\LockAcquireWouldBlockException' => true,
            'TYPO3\\CMS\\Core\\Locking\\Exception\\LockCreateException' => true,
            'TYPO3\\CMS\\Core\\Locking\\FileLockStrategy' => true,
            'TYPO3\\CMS\\Core\\Locking\\SemaphoreLockStrategy' => true,
            'TYPO3\\CMS\\Core\\Locking\\SimpleLockStrategy' => true,
            'TYPO3\\CMS\\Core\\Log\\Channel' => true,
            'TYPO3\\CMS\\Core\\Log\\Exception' => true,
            'TYPO3\\CMS\\Core\\Log\\Exception\\InvalidLogProcessorConfigurationException' => true,
            'TYPO3\\CMS\\Core\\Log\\Exception\\InvalidLogWriterConfigurationException' => true,
            'TYPO3\\CMS\\Core\\Log\\LogLevel' => true,
            'TYPO3\\CMS\\Core\\Log\\LogManagerInterface' => true,
            'TYPO3\\CMS\\Core\\Log\\LogRecord' => true,
            'TYPO3\\CMS\\Core\\Log\\Logger' => true,
            'TYPO3\\CMS\\Core\\Log\\Processor\\IntrospectionProcessor' => true,
            'TYPO3\\CMS\\Core\\Log\\Processor\\MemoryPeakUsageProcessor' => true,
            'TYPO3\\CMS\\Core\\Log\\Processor\\MemoryUsageProcessor' => true,
            'TYPO3\\CMS\\Core\\Log\\Processor\\NullProcessor' => true,
            'TYPO3\\CMS\\Core\\Log\\Processor\\WebProcessor' => true,
            'TYPO3\\CMS\\Core\\Log\\Writer\\DatabaseWriter' => true,
            'TYPO3\\CMS\\Core\\Log\\Writer\\FileWriter' => true,
            'TYPO3\\CMS\\Core\\Log\\Writer\\NullWriter' => true,
            'TYPO3\\CMS\\Core\\Log\\Writer\\PhpErrorLogWriter' => true,
            'TYPO3\\CMS\\Core\\Log\\Writer\\SyslogWriter' => true,
            'TYPO3\\CMS\\Core\\Mail\\Event\\AfterMailerInitializationEvent' => true,
            'TYPO3\\CMS\\Core\\Mail\\Event\\AfterMailerSentMessageEvent' => true,
            'TYPO3\\CMS\\Core\\Mail\\Event\\BeforeMailerSentMessageEvent' => true,
            'TYPO3\\CMS\\Core\\Mail\\FileSpool' => true,
            'TYPO3\\CMS\\Core\\Mail\\FluidEmail' => true,
            'TYPO3\\CMS\\Core\\Mail\\MailMessage' => true,
            'TYPO3\\CMS\\Core\\Mail\\MboxTransport' => true,
            'TYPO3\\CMS\\Core\\Mail\\Rfc822AddressesParser' => true,
            'TYPO3\\CMS\\Core\\Messaging\\FlashMessage' => true,
            'TYPO3\\CMS\\Core\\Messaging\\FlashMessageQueue' => true,
            'TYPO3\\CMS\\Core\\Messaging\\FlashMessageRendererResolver' => true,
            'TYPO3\\CMS\\Core\\Messaging\\Renderer\\BootstrapRenderer' => true,
            'TYPO3\\CMS\\Core\\Messaging\\Renderer\\ListRenderer' => true,
            'TYPO3\\CMS\\Core\\Messaging\\Renderer\\PlaintextRenderer' => true,
            'TYPO3\\CMS\\Core\\Messenger\\BusFactory' => true,
            'TYPO3\\CMS\\Core\\Messenger\\DoctrineTransportFactory' => true,
            'TYPO3\\CMS\\Core\\Messenger\\HandlersLocator' => true,
            'TYPO3\\CMS\\Core\\Messenger\\HandlersLocatorFactory' => true,
            'TYPO3\\CMS\\Core\\Messenger\\TransportLocator' => true,
            'TYPO3\\CMS\\Core\\MetaTag\\EdgeMetaTagManager' => true,
            'TYPO3\\CMS\\Core\\MetaTag\\GenericMetaTagManager' => true,
            'TYPO3\\CMS\\Core\\MetaTag\\Html5MetaTagManager' => true,
            'TYPO3\\CMS\\Core\\Migrations\\TcaMigration' => true,
            'TYPO3\\CMS\\Core\\Package\\Cache\\ComposerPackageArtifact' => true,
            'TYPO3\\CMS\\Core\\Package\\Cache\\PackageStatesPackageCache' => true,
            'TYPO3\\CMS\\Core\\Package\\Event\\AfterPackageActivationEvent' => true,
            'TYPO3\\CMS\\Core\\Package\\Event\\AfterPackageDeactivationEvent' => true,
            'TYPO3\\CMS\\Core\\Package\\Event\\BeforePackageActivationEvent' => true,
            'TYPO3\\CMS\\Core\\Package\\Event\\PackagesMayHaveChangedEvent' => true,
            'TYPO3\\CMS\\Core\\Package\\Exception' => true,
            'TYPO3\\CMS\\Core\\Package\\Exception\\InvalidPackageKeyException' => true,
            'TYPO3\\CMS\\Core\\Package\\Exception\\InvalidPackageManifestException' => true,
            'TYPO3\\CMS\\Core\\Package\\Exception\\InvalidPackagePathException' => true,
            'TYPO3\\CMS\\Core\\Package\\Exception\\InvalidPackageStateException' => true,
            'TYPO3\\CMS\\Core\\Package\\Exception\\PackageAssetsPublishingFailedException' => true,
            'TYPO3\\CMS\\Core\\Package\\Exception\\PackageManagerCacheUnavailableException' => true,
            'TYPO3\\CMS\\Core\\Package\\Exception\\PackageStatesFileNotWritableException' => true,
            'TYPO3\\CMS\\Core\\Package\\Exception\\PackageStatesUnavailableException' => true,
            'TYPO3\\CMS\\Core\\Package\\Exception\\ProtectedPackageKeyException' => true,
            'TYPO3\\CMS\\Core\\Package\\Exception\\UnknownPackageException' => true,
            'TYPO3\\CMS\\Core\\Package\\Exception\\UnknownPackagePathException' => true,
            'TYPO3\\CMS\\Core\\Package\\MetaData' => true,
            'TYPO3\\CMS\\Core\\Package\\MetaData\\PackageConstraint' => true,
            'TYPO3\\CMS\\Core\\Package\\Package' => true,
            'TYPO3\\CMS\\Core\\Package\\PackageInterface' => true,
            'TYPO3\\CMS\\Core\\Package\\PseudoServiceProvider' => true,
            'TYPO3\\CMS\\Core\\Package\\UnitTestPackageManager' => true,
            'TYPO3\\CMS\\Core\\PageTitle\\PageTitleProviderInterface' => true,
            'TYPO3\\CMS\\Core\\Page\\Event\\BeforeJavaScriptsRenderingEvent' => true,
            'TYPO3\\CMS\\Core\\Page\\Event\\BeforeStylesheetsRenderingEvent' => true,
            'TYPO3\\CMS\\Core\\Page\\Event\\ResolveJavaScriptImportEvent' => true,
            'TYPO3\\CMS\\Core\\Page\\ImportMap' => true,
            'TYPO3\\CMS\\Core\\Page\\JavaScriptItems' => true,
            'TYPO3\\CMS\\Core\\Page\\JavaScriptModuleInstruction' => true,
            'TYPO3\\CMS\\Core\\Page\\JavaScriptRenderer' => true,
            'TYPO3\\CMS\\Core\\Pagination\\ArrayPaginator' => true,
            'TYPO3\\CMS\\Core\\Pagination\\PaginatorInterface' => true,
            'TYPO3\\CMS\\Core\\Pagination\\SimplePagination' => true,
            'TYPO3\\CMS\\Core\\Pagination\\SlidingWindowPagination' => true,
            'TYPO3\\CMS\\Core\\PasswordPolicy\\Event\\EnrichPasswordValidationContextDataEvent' => true,
            'TYPO3\\CMS\\Core\\PasswordPolicy\\PasswordPolicy' => true,
            'TYPO3\\CMS\\Core\\PasswordPolicy\\PasswordPolicyValidator' => true,
            'TYPO3\\CMS\\Core\\PasswordPolicy\\Validator\\CorePasswordValidator' => true,
            'TYPO3\\CMS\\Core\\PasswordPolicy\\Validator\\Dto\\ContextData' => true,
            'TYPO3\\CMS\\Core\\PasswordPolicy\\Validator\\NotCurrentPasswordValidator' => true,
            'TYPO3\\CMS\\Core\\Preparations\\TcaPreparation' => true,
            'TYPO3\\CMS\\Core\\RateLimiter\\RequestRateLimitedException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Collection\\CategoryBasedFileCollection' => true,
            'TYPO3\\CMS\\Core\\Resource\\Collection\\FolderBasedFileCollection' => true,
            'TYPO3\\CMS\\Core\\Resource\\Collection\\StaticFileCollection' => true,
            'TYPO3\\CMS\\Core\\Resource\\Driver\\DriverInterface' => true,
            'TYPO3\\CMS\\Core\\Resource\\Driver\\LocalDriver' => true,
            'TYPO3\\CMS\\Core\\Resource\\Driver\\StreamableDriverInterface' => true,
            'TYPO3\\CMS\\Core\\Resource\\DuplicationBehavior' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterDefaultUploadFolderWasResolvedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileAddedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileAddedToIndexEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileCommandProcessedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileContentsSetEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileCopiedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileCreatedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileDeletedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileMarkedAsMissingEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileMetaDataCreatedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileMetaDataDeletedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileMetaDataUpdatedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileMovedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileProcessingEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileRemovedFromIndexEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileRenamedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileReplacedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileUpdatedInIndexEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFolderAddedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFolderCopiedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFolderDeletedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFolderMovedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFolderRenamedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterResourceStorageInitializationEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileAddedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileContentsSetEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileCopiedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileCreatedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileDeletedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileMovedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileProcessingEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileRenamedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileReplacedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFolderAddedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFolderCopiedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFolderDeletedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFolderMovedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFolderRenamedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeResourceStorageInitializationEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\EnrichFileMetaDataEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\GeneratePublicUrlForResourceEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\ModifyFileDumpEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\SanitizeFileNameEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\ExistingTargetFileNameException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\ExistingTargetFolderException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\FileAlreadyProcessedException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\FileDoesNotExistException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\FileOperationErrorException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\FolderDoesNotExistException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\IllegalFileExtensionException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InsufficientFileAccessPermissionsException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InsufficientFileReadPermissionsException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InsufficientFileWritePermissionsException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InsufficientFolderAccessPermissionsException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InsufficientFolderReadPermissionsException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InsufficientFolderWritePermissionsException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InsufficientUserPermissionsException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InvalidConfigurationException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InvalidFileException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InvalidFileNameException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InvalidFolderException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InvalidHashException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InvalidPathException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InvalidTargetFolderException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InvalidUidException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\NotInMountPointException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\OnlineMediaAlreadyExistsException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\ResourceDoesNotExistException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\ResourcePermissionsUnavailableException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\UploadException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\UploadSizeException' => true,
            'TYPO3\\CMS\\Core\\Resource\\File' => true,
            'TYPO3\\CMS\\Core\\Resource\\FileCollectionRepository' => true,
            'TYPO3\\CMS\\Core\\Resource\\FileReference' => true,
            'TYPO3\\CMS\\Core\\Resource\\Filter\\FileExtensionFilter' => true,
            'TYPO3\\CMS\\Core\\Resource\\Filter\\FileNameFilter' => true,
            'TYPO3\\CMS\\Core\\Resource\\Filter\\ImportExportFilter' => true,
            'TYPO3\\CMS\\Core\\Resource\\Folder' => true,
            'TYPO3\\CMS\\Core\\Resource\\InaccessibleFolder' => true,
            'TYPO3\\CMS\\Core\\Resource\\Index\\ExtractorInterface' => true,
            'TYPO3\\CMS\\Core\\Resource\\Index\\Indexer' => true,
            'TYPO3\\CMS\\Core\\Resource\\LocalPath' => true,
            'TYPO3\\CMS\\Core\\Resource\\MetaDataAspect' => true,
            'TYPO3\\CMS\\Core\\Resource\\MimeTypeCollection' => true,
            'TYPO3\\CMS\\Core\\Resource\\MimeTypeDetector' => true,
            'TYPO3\\CMS\\Core\\Resource\\OnlineMedia\\Event\\AfterVideoPreviewFetchedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\OnlineMedia\\Helpers\\VimeoHelper' => true,
            'TYPO3\\CMS\\Core\\Resource\\OnlineMedia\\Helpers\\YouTubeHelper' => true,
            'TYPO3\\CMS\\Core\\Resource\\OnlineMedia\\Metadata\\Extractor' => true,
            'TYPO3\\CMS\\Core\\Resource\\ProcessedFile' => true,
            'TYPO3\\CMS\\Core\\Resource\\Processing\\ImageCropScaleMaskTask' => true,
            'TYPO3\\CMS\\Core\\Resource\\Processing\\ImagePreviewTask' => true,
            'TYPO3\\CMS\\Core\\Resource\\Processing\\LocalCropScaleMaskHelper' => true,
            'TYPO3\\CMS\\Core\\Resource\\Processing\\LocalImageProcessor' => true,
            'TYPO3\\CMS\\Core\\Resource\\Processing\\LocalPreviewHelper' => true,
            'TYPO3\\CMS\\Core\\Resource\\Processing\\SvgImageProcessor' => true,
            'TYPO3\\CMS\\Core\\Resource\\RelativeCssPathFixer' => true,
            'TYPO3\\CMS\\Core\\Resource\\ResourceCompressor' => true,
            'TYPO3\\CMS\\Core\\Resource\\ResourceStorage' => true,
            'TYPO3\\CMS\\Core\\Resource\\ResourceStorageInterface' => true,
            'TYPO3\\CMS\\Core\\Resource\\Search\\FileSearchQuery' => true,
            'TYPO3\\CMS\\Core\\Resource\\Search\\QueryRestrictions\\ConsistencyRestriction' => true,
            'TYPO3\\CMS\\Core\\Resource\\Search\\QueryRestrictions\\FolderHashesRestriction' => true,
            'TYPO3\\CMS\\Core\\Resource\\Search\\QueryRestrictions\\FolderIdentifierRestriction' => true,
            'TYPO3\\CMS\\Core\\Resource\\Search\\QueryRestrictions\\FolderMountsRestriction' => true,
            'TYPO3\\CMS\\Core\\Resource\\Search\\QueryRestrictions\\FolderRestriction' => true,
            'TYPO3\\CMS\\Core\\Resource\\Search\\QueryRestrictions\\SearchTermRestriction' => true,
            'TYPO3\\CMS\\Core\\Resource\\Search\\QueryRestrictions\\StorageRestriction' => true,
            'TYPO3\\CMS\\Core\\Resource\\Search\\Result\\DriverFilteredSearchResult' => true,
            'TYPO3\\CMS\\Core\\Resource\\Search\\Result\\EmptyFileSearchResult' => true,
            'TYPO3\\CMS\\Core\\Resource\\Search\\Result\\FileSearchResult' => true,
            'TYPO3\\CMS\\Core\\Resource\\Security\\FileNameValidator' => true,
            'TYPO3\\CMS\\Core\\Resource\\Security\\FilePermissionAspect' => true,
            'TYPO3\\CMS\\Core\\Resource\\Security\\SvgSanitizer' => true,
            'TYPO3\\CMS\\Core\\Resource\\Service\\ConfigurationService' => true,
            'TYPO3\\CMS\\Core\\Resource\\Service\\ExtractorService' => true,
            'TYPO3\\CMS\\Core\\Resource\\Service\\FileProcessingService' => true,
            'TYPO3\\CMS\\Core\\Resource\\Service\\ImageProcessingService' => true,
            'TYPO3\\CMS\\Core\\Resource\\Service\\MagicImageService' => true,
            'TYPO3\\CMS\\Core\\Resource\\Service\\UserFileInlineLabelService' => true,
            'TYPO3\\CMS\\Core\\Resource\\Service\\UserFileMountService' => true,
            'TYPO3\\CMS\\Core\\Resource\\TextExtraction\\PlainTextExtractor' => true,
            'TYPO3\\CMS\\Core\\Resource\\TextExtraction\\TextExtractorInterface' => true,
            'TYPO3\\CMS\\Core\\Resource\\Utility\\ListUtility' => true,
            'TYPO3\\CMS\\Core\\Routing\\Aspect\\AspectFactory' => true,
            'TYPO3\\CMS\\Core\\Routing\\Aspect\\LocaleModifier' => true,
            'TYPO3\\CMS\\Core\\Routing\\Aspect\\MappableProcessor' => true,
            'TYPO3\\CMS\\Core\\Routing\\Aspect\\ModifiableAspectInterface' => true,
            'TYPO3\\CMS\\Core\\Routing\\Aspect\\PersistedAliasMapper' => true,
            'TYPO3\\CMS\\Core\\Routing\\Aspect\\PersistedPatternMapper' => true,
            'TYPO3\\CMS\\Core\\Routing\\Aspect\\StaticRangeMapper' => true,
            'TYPO3\\CMS\\Core\\Routing\\Aspect\\StaticValueMapper' => true,
            'TYPO3\\CMS\\Core\\Routing\\BestUrlMatcher' => true,
            'TYPO3\\CMS\\Core\\Routing\\Enhancer\\DecoratingEnhancerInterface' => true,
            'TYPO3\\CMS\\Core\\Routing\\Enhancer\\EnhancerFactory' => true,
            'TYPO3\\CMS\\Core\\Routing\\Enhancer\\PageTypeDecorator' => true,
            'TYPO3\\CMS\\Core\\Routing\\Enhancer\\PluginEnhancer' => true,
            'TYPO3\\CMS\\Core\\Routing\\Enhancer\\SimpleEnhancer' => true,
            'TYPO3\\CMS\\Core\\Routing\\Enhancer\\VariableProcessorCache' => true,
            'TYPO3\\CMS\\Core\\Routing\\InvalidRouteArgumentsException' => true,
            'TYPO3\\CMS\\Core\\Routing\\MatchedRoute' => true,
            'TYPO3\\CMS\\Core\\Routing\\PageArguments' => true,
            'TYPO3\\CMS\\Core\\Routing\\PageRouter' => true,
            'TYPO3\\CMS\\Core\\Routing\\PageSlugCandidateProvider' => true,
            'TYPO3\\CMS\\Core\\Routing\\PageUriMatcher' => true,
            'TYPO3\\CMS\\Core\\Routing\\Route' => true,
            'TYPO3\\CMS\\Core\\Routing\\RouteCollection' => true,
            'TYPO3\\CMS\\Core\\Routing\\RouteNotFoundException' => true,
            'TYPO3\\CMS\\Core\\Routing\\RouteSorter' => true,
            'TYPO3\\CMS\\Core\\Routing\\RouterInterface' => true,
            'TYPO3\\CMS\\Core\\Routing\\SiteRouteResult' => true,
            'TYPO3\\CMS\\Core\\Routing\\UnableToLinkToPageException' => true,
            'TYPO3\\CMS\\Core\\Routing\\UrlGenerator' => true,
            'TYPO3\\CMS\\Core\\Schema\\Struct\\SelectItem' => true,
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Configuration\\DispositionConfiguration' => true,
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Configuration\\DispositionMapFactory' => true,
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\ConsumableNonce' => true,
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\CoveringInterface' => true,
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Event\\InvestigateMutationsEvent' => true,
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Event\\PolicyMutatedEvent' => true,
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\HashProxy' => true,
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\HashValue' => true,
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\ModelService' => true,
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Mutation' => true,
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\MutationCollection' => true,
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\MutationOrigin' => true,
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\MutationRepository' => true,
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\MutationSuggestion' => true,
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Policy' => true,
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\RawValue' => true,
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Reporting\\Report' => true,
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Reporting\\ReportDemand' => true,
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Reporting\\ReportDetails' => true,
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Reporting\\ReportRepository' => true,
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Reporting\\Resolution' => true,
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Reporting\\ResolutionRepository' => true,
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Reporting\\SummarizedReport' => true,
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\ScopeRepository' => true,
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\SourceCollection' => true,
            'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\UriValue' => true,
            'TYPO3\\CMS\\Core\\Security\\Nonce' => true,
            'TYPO3\\CMS\\Core\\Security\\NonceException' => true,
            'TYPO3\\CMS\\Core\\Security\\NoncePool' => true,
            'TYPO3\\CMS\\Core\\Security\\RequestToken' => true,
            'TYPO3\\CMS\\Core\\Security\\RequestTokenException' => true,
            'TYPO3\\CMS\\Core\\Security\\SecretIdentifier' => true,
            'TYPO3\\CMS\\Core\\Security\\SigningProviderInterface' => true,
            'TYPO3\\CMS\\Core\\Security\\SigningSecretInterface' => true,
            'TYPO3\\CMS\\Core\\Security\\SigningSecretResolver' => true,
            'TYPO3\\CMS\\Core\\Serializer\\Exception\\InvalidDataException' => true,
            'TYPO3\\CMS\\Core\\Serializer\\Typo3XmlParser' => true,
            'TYPO3\\CMS\\Core\\Serializer\\Typo3XmlParserOptions' => true,
            'TYPO3\\CMS\\Core\\Serializer\\Typo3XmlSerializer' => true,
            'TYPO3\\CMS\\Core\\Serializer\\Typo3XmlSerializerOptions' => true,
            'TYPO3\\CMS\\Core\\ServiceProvider' => true,
            'TYPO3\\CMS\\Core\\Service\\Archive\\ZipService' => true,
            'TYPO3\\CMS\\Core\\Session\\Backend\\DatabaseSessionBackend' => true,
            'TYPO3\\CMS\\Core\\Session\\Backend\\Exception\\SessionNotCreatedException' => true,
            'TYPO3\\CMS\\Core\\Session\\Backend\\Exception\\SessionNotFoundException' => true,
            'TYPO3\\CMS\\Core\\Session\\Backend\\Exception\\SessionNotUpdatedException' => true,
            'TYPO3\\CMS\\Core\\Session\\Backend\\RedisSessionBackend' => true,
            'TYPO3\\CMS\\Core\\Session\\UserSessionManager' => true,
            'TYPO3\\CMS\\Core\\Site\\Entity\\NullSite' => true,
            'TYPO3\\CMS\\Core\\Site\\Entity\\Site' => true,
            'TYPO3\\CMS\\Core\\Site\\Entity\\SiteLanguage' => true,
            'TYPO3\\CMS\\Core\\Site\\Entity\\SiteSettings' => true,
            'TYPO3\\CMS\\Core\\Site\\SiteFinder' => true,
            'TYPO3\\CMS\\Core\\Site\\SiteLanguagePresets' => true,
            'TYPO3\\CMS\\Core\\SysLog\\Action' => true,
            'TYPO3\\CMS\\Core\\SysLog\\Action\\Cache' => true,
            'TYPO3\\CMS\\Core\\SysLog\\Action\\Database' => true,
            'TYPO3\\CMS\\Core\\SysLog\\Action\\File' => true,
            'TYPO3\\CMS\\Core\\SysLog\\Action\\Login' => true,
            'TYPO3\\CMS\\Core\\SysLog\\Action\\Setting' => true,
            'TYPO3\\CMS\\Core\\SysLog\\Action\\Site' => true,
            'TYPO3\\CMS\\Core\\SysLog\\Error' => true,
            'TYPO3\\CMS\\Core\\SysLog\\Type' => true,
            'TYPO3\\CMS\\Core\\Text\\TextCropper' => true,
            'TYPO3\\CMS\\Core\\Tree\\Event\\ModifyTreeDataEvent' => true,
            'TYPO3\\CMS\\Core\\Tree\\TableConfiguration\\ArrayTreeRenderer' => true,
            'TYPO3\\CMS\\Core\\Tree\\TableConfiguration\\DatabaseTreeNode' => true,
            'TYPO3\\CMS\\Core\\Tree\\TableConfiguration\\TableConfigurationTree' => true,
            'TYPO3\\CMS\\Core\\Tree\\TableConfiguration\\TreeDataProviderFactory' => true,
            'TYPO3\\CMS\\Core\\Type\\BitSet' => true,
            'TYPO3\\CMS\\Core\\Type\\Bitmask\\BackendGroupMountOption' => true,
            'TYPO3\\CMS\\Core\\Type\\Bitmask\\JsConfirmation' => true,
            'TYPO3\\CMS\\Core\\Type\\Bitmask\\PageTranslationVisibility' => true,
            'TYPO3\\CMS\\Core\\Type\\Bitmask\\Permission' => true,
            'TYPO3\\CMS\\Core\\Type\\Exception' => true,
            'TYPO3\\CMS\\Core\\Type\\Exception\\InvalidEnumerationDefinitionException' => true,
            'TYPO3\\CMS\\Core\\Type\\Exception\\InvalidEnumerationValueException' => true,
            'TYPO3\\CMS\\Core\\Type\\Exception\\InvalidValueExceptionInterface' => true,
            'TYPO3\\CMS\\Core\\Type\\File\\FileInfo' => true,
            'TYPO3\\CMS\\Core\\Type\\File\\ImageInfo' => true,
            'TYPO3\\CMS\\Core\\Type\\Icon\\IconState' => true,
            'TYPO3\\CMS\\Core\\Type\\Map' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\AST\\AstBuilderInterface' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\AST\\CurrentObjectPath\\CurrentObjectPath' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\AST\\CurrentObjectPath\\CurrentObjectPathStack' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\AST\\Event\\EvaluateModifierFunctionEvent' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\AST\\Node\\ChildNode' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\AST\\Node\\ReferenceChildNode' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\AST\\Node\\RootNode' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\AST\\Visitor\\AstConstantCommentVisitor' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\AST\\Visitor\\AstNodeFinderVisitor' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\AST\\Visitor\\AstSortChildrenVisitor' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\FrontendTypoScript' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Event\\AfterTemplatesHaveBeenDeterminedEvent' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Event\\ModifyLoadedPageTsConfigEvent' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\IncludeNode\\AtImportInclude' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\IncludeNode\\ConditionElseInclude' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\IncludeNode\\ConditionInclude' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\IncludeNode\\ConditionIncludeTyposcriptInclude' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\IncludeNode\\DefaultTypoScriptInclude' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\IncludeNode\\DefaultTypoScriptMagicKeyInclude' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\IncludeNode\\ExtensionStaticInclude' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\IncludeNode\\FileInclude' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\IncludeNode\\IncludeStaticFileDatabaseInclude' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\IncludeNode\\IncludeStaticFileFileInclude' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\IncludeNode\\IncludeTyposcriptInclude' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\IncludeNode\\RootInclude' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\IncludeNode\\SegmentInclude' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\IncludeNode\\SiteInclude' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\IncludeNode\\StringInclude' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\IncludeNode\\SysTemplateInclude' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\IncludeNode\\TsConfigInclude' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Traverser\\ConditionVerdictAwareIncludeTreeTraverser' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Traverser\\IncludeTreeTraverser' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\TreeFromLineStreamBuilder' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Visitor\\IncludeTreeConditionAggregatorVisitor' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Visitor\\IncludeTreeConditionEnforcerVisitor' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Visitor\\IncludeTreeConditionIncludeListAccumulatorVisitor' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Visitor\\IncludeTreeNodeFinderVisitor' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Visitor\\IncludeTreeSetupConditionConstantSubstitutionVisitor' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Visitor\\IncludeTreeSourceAggregatorVisitor' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Visitor\\IncludeTreeSyntaxScannerVisitor' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\PageTsConfig' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\Parser\\TypoScriptParser' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\TemplateService' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\Line\\BlockCloseLine' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\Line\\CommentLine' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\Line\\ConditionElseLine' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\Line\\ConditionLine' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\Line\\ConditionStopLine' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\Line\\EmptyLine' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\Line\\IdentifierAssignmentLine' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\Line\\IdentifierBlockOpenLine' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\Line\\IdentifierCopyLine' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\Line\\IdentifierFunctionLine' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\Line\\IdentifierReferenceLine' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\Line\\IdentifierUnsetLine' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\Line\\ImportLine' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\Line\\ImportOldLine' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\Line\\InvalidLine' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\Line\\LineStream' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\LossyTokenizer' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\Token\\ConstantAwareTokenStream' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\Token\\IdentifierToken' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\Token\\IdentifierTokenStream' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\Token\\Token' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\Token\\TokenStream' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\TokenizerInterface' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\UserTsConfig' => true,
            'TYPO3\\CMS\\Core\\Utility\\ArrayUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\ClassNamingUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\CommandUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\CsvUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\DebugUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\DiffUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\Exception\\MissingArrayPathException' => true,
            'TYPO3\\CMS\\Core\\Utility\\Exception\\NotImplementedMethodException' => true,
            'TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\File\\BasicFileUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\File\\ExtendedFileUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\HttpUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\IpAnonymizationUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\MailUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\MathUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\PathUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\PermutationUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\ResourceUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\RootlineUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\StringUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\String\\StringFragment' => true,
            'TYPO3\\CMS\\Core\\Utility\\String\\StringFragmentCollection' => true,
            'TYPO3\\CMS\\Core\\Utility\\String\\StringFragmentPattern' => true,
            'TYPO3\\CMS\\Core\\Utility\\String\\StringFragmentSplitter' => true,
            'TYPO3\\CMS\\Core\\Utility\\VersionNumberUtility' => true,
            'TYPO3\\CMS\\Core\\Versioning\\VersionState' => true,
            'TYPO3\\CMS\\Core\\View\\FluidViewAdapter' => true,
            'TYPO3\\CMS\\Core\\View\\ViewInterface' => true,
            'TYPO3\\CMS\\Dashboard\\Dashboard' => true,
            'TYPO3\\CMS\\Dashboard\\DashboardInitializationService' => true,
            'TYPO3\\CMS\\Dashboard\\DashboardPreset' => true,
            'TYPO3\\CMS\\Dashboard\\DashboardPresetRegistry_decorated_1.inner' => true,
            'TYPO3\\CMS\\Dashboard\\DashboardRepository' => true,
            'TYPO3\\CMS\\Dashboard\\DependencyInjection\\DashboardWidgetPass' => true,
            'TYPO3\\CMS\\Dashboard\\Persistence\\DashboardCreationEnricher' => true,
            'TYPO3\\CMS\\Dashboard\\ServiceProvider' => true,
            'TYPO3\\CMS\\Dashboard\\Views\\Factory' => true,
            'TYPO3\\CMS\\Dashboard\\WidgetApi' => true,
            'TYPO3\\CMS\\Dashboard\\WidgetGroup' => true,
            'TYPO3\\CMS\\Dashboard\\WidgetGroupInitializationService' => true,
            'TYPO3\\CMS\\Dashboard\\WidgetGroupRegistry_decorated_1.inner' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\AdditionalCssInterface' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\AdditionalJavaScriptInterface' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\BarChartWidget' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\ButtonProviderInterface' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\ChartDataProviderInterface' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\CtaWidget' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\DoughnutChartWidget' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\ElementAttributesInterface' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\EventDataInterface' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\JavaScriptInterface' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\ListDataProviderInterface' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\ListWidget' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\NumberWithIconDataProviderInterface' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\NumberWithIconWidget' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\Provider' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\Provider\\ButtonProvider' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\Provider\\NumberOfFailedLoginsDataProvider' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\Provider\\SysLogButtonProvider' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\Provider\\SysLogErrorsDataProvider' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\Provider\\TypeOfUsersChartDataProvider' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\RequestAwareWidgetInterface' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\RequireJsModuleInterface' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\RssWidget' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\T3GeneralInformationWidget' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\WidgetConfiguration' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\WidgetConfigurationInterface' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\WidgetInterface' => true,
            'TYPO3\\CMS\\Extbase\\Annotation\\IgnoreValidation' => true,
            'TYPO3\\CMS\\Extbase\\Annotation\\ORM\\Cascade' => true,
            'TYPO3\\CMS\\Extbase\\Annotation\\ORM\\Lazy' => true,
            'TYPO3\\CMS\\Extbase\\Annotation\\ORM\\Transient' => true,
            'TYPO3\\CMS\\Extbase\\Annotation\\Validate' => true,
            'TYPO3\\CMS\\Extbase\\Configuration\\Exception' => true,
            'TYPO3\\CMS\\Extbase\\Configuration\\Exception\\InvalidConfigurationTypeException' => true,
            'TYPO3\\CMS\\Extbase\\ContentObject\\ExtbasePluginContentObject' => true,
            'TYPO3\\CMS\\Extbase\\DependencyInjection\\TypeConverterPass' => true,
            'TYPO3\\CMS\\Extbase\\Domain\\Model\\Category' => true,
            'TYPO3\\CMS\\Extbase\\Domain\\Model\\File' => true,
            'TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference' => true,
            'TYPO3\\CMS\\Extbase\\Domain\\Model\\Folder' => true,
            'TYPO3\\CMS\\Extbase\\Error\\Error' => true,
            'TYPO3\\CMS\\Extbase\\Error\\Message' => true,
            'TYPO3\\CMS\\Extbase\\Error\\Notice' => true,
            'TYPO3\\CMS\\Extbase\\Error\\Result' => true,
            'TYPO3\\CMS\\Extbase\\Error\\Warning' => true,
            'TYPO3\\CMS\\Extbase\\Event\\Configuration\\BeforeFlexFormConfigurationOverrideEvent' => true,
            'TYPO3\\CMS\\Extbase\\Event\\Mvc\\AfterRequestDispatchedEvent' => true,
            'TYPO3\\CMS\\Extbase\\Event\\Mvc\\BeforeActionCallEvent' => true,
            'TYPO3\\CMS\\Extbase\\Event\\Persistence\\AfterObjectThawedEvent' => true,
            'TYPO3\\CMS\\Extbase\\Event\\Persistence\\EntityAddedToPersistenceEvent' => true,
            'TYPO3\\CMS\\Extbase\\Event\\Persistence\\EntityFinalizedAfterPersistenceEvent' => true,
            'TYPO3\\CMS\\Extbase\\Event\\Persistence\\EntityPersistedEvent' => true,
            'TYPO3\\CMS\\Extbase\\Event\\Persistence\\EntityRemovedFromPersistenceEvent' => true,
            'TYPO3\\CMS\\Extbase\\Event\\Persistence\\EntityUpdatedInPersistenceEvent' => true,
            'TYPO3\\CMS\\Extbase\\Event\\Persistence\\ModifyQueryBeforeFetchingObjectDataEvent' => true,
            'TYPO3\\CMS\\Extbase\\Event\\Persistence\\ModifyResultAfterFetchingObjectDataEvent' => true,
            'TYPO3\\CMS\\Extbase\\Exception' => true,
            'TYPO3\\CMS\\Extbase\\Http\\ForwardResponse' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Controller\\Argument' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Controller\\Arguments' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Controller\\Exception\\RequiredArgumentMissingException' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfiguration' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Dispatcher' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Exception' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Exception\\InfiniteLoopException' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Exception\\InvalidActionNameException' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Exception\\InvalidArgumentMixingException' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Exception\\InvalidArgumentNameException' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Exception\\InvalidArgumentTypeException' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Exception\\InvalidArgumentValueException' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Exception\\InvalidControllerException' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Exception\\InvalidControllerNameException' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Exception\\InvalidExtensionNameException' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Exception\\NoSuchActionException' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Exception\\NoSuchArgumentException' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Exception\\NoSuchControllerException' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\ExtbaseRequestParameters' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Request' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\RequestInterface' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\View\\ViewResolverInterface' => true,
            'TYPO3\\CMS\\Extbase\\Pagination\\QueryResultPaginator' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\ClassesConfiguration' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\ClassesConfigurationFactory' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Exception' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Exception\\IllegalObjectTypeException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Exception\\IllegalRelationTypeException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Exception\\InvalidQueryException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Exception\\UnknownObjectException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\BackendInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Exception' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Exception\\InconsistentQuerySettingsException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Exception\\InvalidClassException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Exception\\InvalidRelationConfigurationException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Exception\\MissingColumnMapException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Exception\\NotImplementedException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Exception\\RepositoryException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Exception\\TooDirtyException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Exception\\UnexpectedTypeException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Exception\\UnsupportedMethodException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Exception\\UnsupportedOrderException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Exception\\UnsupportedRelationException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\LazyLoadingProxy' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\LazyObjectStorage' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\ColumnMap' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\ColumnMapFactory' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\DataMap' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\Exception' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\Exception\\NonExistentPropertyException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\Exception\\UnknownPropertyTypeException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\AndInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\BindVariableValue' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\BindVariableValueInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\Comparison' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\ComparisonInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\EquiJoinCondition' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\EquiJoinConditionInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\Join' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\JoinConditionInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\JoinInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\LogicalAnd' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\LogicalNot' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\LogicalOr' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\LowerCase' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\LowerCaseInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\NotInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\OrInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\Ordering' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\OrderingInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\PropertyValue' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\Selector' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\SelectorInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\Statement' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\StaticOperandInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\UpperCase' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\UpperCaseInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryFactoryInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Session' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Storage\\BackendInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Storage\\Exception\\BadConstraintException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Storage\\Exception\\SqlErrorException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\RepositoryInterface' => true,
            'TYPO3\\CMS\\Extbase\\Property\\Exception' => true,
            'TYPO3\\CMS\\Extbase\\Property\\Exception\\DuplicateObjectException' => true,
            'TYPO3\\CMS\\Extbase\\Property\\Exception\\DuplicateTypeConverterException' => true,
            'TYPO3\\CMS\\Extbase\\Property\\Exception\\InvalidDataTypeException' => true,
            'TYPO3\\CMS\\Extbase\\Property\\Exception\\InvalidPropertyMappingConfigurationException' => true,
            'TYPO3\\CMS\\Extbase\\Property\\Exception\\InvalidSourceException' => true,
            'TYPO3\\CMS\\Extbase\\Property\\Exception\\InvalidTargetException' => true,
            'TYPO3\\CMS\\Extbase\\Property\\Exception\\InvalidTypeConverterConfigurationException' => true,
            'TYPO3\\CMS\\Extbase\\Property\\Exception\\TargetNotFoundException' => true,
            'TYPO3\\CMS\\Extbase\\Property\\Exception\\TypeConverterException' => true,
            'TYPO3\\CMS\\Extbase\\Property\\PropertyMappingConfiguration' => true,
            'TYPO3\\CMS\\Extbase\\Property\\TypeConverterRegistry' => true,
            'TYPO3\\CMS\\Extbase\\Reflection\\ClassSchema' => true,
            'TYPO3\\CMS\\Extbase\\Reflection\\ClassSchema\\Exception\\NoPropertyTypesException' => true,
            'TYPO3\\CMS\\Extbase\\Reflection\\ClassSchema\\Exception\\NoSuchMethodException' => true,
            'TYPO3\\CMS\\Extbase\\Reflection\\ClassSchema\\Exception\\NoSuchMethodParameterException' => true,
            'TYPO3\\CMS\\Extbase\\Reflection\\ClassSchema\\Exception\\NoSuchPropertyException' => true,
            'TYPO3\\CMS\\Extbase\\Reflection\\ClassSchema\\Method' => true,
            'TYPO3\\CMS\\Extbase\\Reflection\\ClassSchema\\MethodParameter' => true,
            'TYPO3\\CMS\\Extbase\\Reflection\\ClassSchema\\Property' => true,
            'TYPO3\\CMS\\Extbase\\Reflection\\ClassSchema\\PropertyCharacteristics' => true,
            'TYPO3\\CMS\\Extbase\\Reflection\\DocBlock\\Tags\\Null_' => true,
            'TYPO3\\CMS\\Extbase\\Reflection\\Exception' => true,
            'TYPO3\\CMS\\Extbase\\Reflection\\Exception\\PropertyNotAccessibleException' => true,
            'TYPO3\\CMS\\Extbase\\Reflection\\Exception\\UnknownClassException' => true,
            'TYPO3\\CMS\\Extbase\\Reflection\\ObjectAccess' => true,
            'TYPO3\\CMS\\Extbase\\Routing\\ExtbasePluginEnhancer' => true,
            'TYPO3\\CMS\\Extbase\\Security\\Exception' => true,
            'TYPO3\\CMS\\Extbase\\Security\\Exception\\InvalidArgumentForHashGenerationException' => true,
            'TYPO3\\CMS\\Extbase\\Security\\Exception\\InvalidHashException' => true,
            'TYPO3\\CMS\\Extbase\\ServiceProvider' => true,
            'TYPO3\\CMS\\Extbase\\Utility\\DebuggerUtility' => true,
            'TYPO3\\CMS\\Extbase\\Utility\\Exception\\InvalidTypeException' => true,
            'TYPO3\\CMS\\Extbase\\Utility\\ExtensionUtility' => true,
            'TYPO3\\CMS\\Extbase\\Utility\\FrontendSimulatorUtility' => true,
            'TYPO3\\CMS\\Extbase\\Utility\\LocalizationUtility' => true,
            'TYPO3\\CMS\\Extbase\\Utility\\TypeHandlingUtility' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Error' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Exception' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Exception\\InvalidTypeHintException' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Exception\\InvalidValidationConfigurationException' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Exception\\InvalidValidationOptionsException' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Exception\\NoSuchValidatorException' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\ValidatorClassNameResolver' => true,
            'TYPO3\\CMS\\Extensionmanager\\DependencyInjection\\ExtensionRemotePass' => true,
            'TYPO3\\CMS\\Extensionmanager\\Domain\\Model\\Extension' => true,
            'TYPO3\\CMS\\Extensionmanager\\Event\\AfterExtensionDatabaseContentHasBeenImportedEvent' => true,
            'TYPO3\\CMS\\Extensionmanager\\Event\\AfterExtensionFilesHaveBeenImportedEvent' => true,
            'TYPO3\\CMS\\Extensionmanager\\Event\\AfterExtensionSiteFilesHaveBeenImportedEvent' => true,
            'TYPO3\\CMS\\Extensionmanager\\Event\\AfterExtensionStaticDatabaseContentHasBeenImportedEvent' => true,
            'TYPO3\\CMS\\Extensionmanager\\Event\\AvailableActionsForExtensionEvent' => true,
            'TYPO3\\CMS\\Extensionmanager\\Exception' => true,
            'TYPO3\\CMS\\Extensionmanager\\Exception\\ExtensionManagerException' => true,
            'TYPO3\\CMS\\Extensionmanager\\Exception\\InvalidFileException' => true,
            'TYPO3\\CMS\\Extensionmanager\\Exception\\MissingExtensionDependencyException' => true,
            'TYPO3\\CMS\\Extensionmanager\\Exception\\MissingVersionDependencyException' => true,
            'TYPO3\\CMS\\Extensionmanager\\Exception\\UnresolvedDependencyException' => true,
            'TYPO3\\CMS\\Extensionmanager\\Exception\\UnresolvedPhpDependencyException' => true,
            'TYPO3\\CMS\\Extensionmanager\\Exception\\UnresolvedTypo3DependencyException' => true,
            'TYPO3\\CMS\\Extensionmanager\\Package\\ComposerDeficitDetector' => true,
            'TYPO3\\CMS\\Extensionmanager\\Parser\\ExtensionXmlParser' => true,
            'TYPO3\\CMS\\Extensionmanager\\Remote\\DownloadFailedException' => true,
            'TYPO3\\CMS\\Extensionmanager\\Remote\\ExtensionDownloaderRemoteInterface' => true,
            'TYPO3\\CMS\\Extensionmanager\\Remote\\ListableRemoteInterface' => true,
            'TYPO3\\CMS\\Extensionmanager\\Remote\\RemoteNotRegisteredException' => true,
            'TYPO3\\CMS\\Extensionmanager\\Remote\\TerExtensionRemote' => true,
            'TYPO3\\CMS\\Extensionmanager\\Remote\\VerificationFailedException' => true,
            'TYPO3\\CMS\\Extensionmanager\\Report' => true,
            'TYPO3\\CMS\\Extensionmanager\\Report\\ExtensionStatus' => true,
            'TYPO3\\CMS\\Extensionmanager\\Service\\ComposerManifestProposalGenerator' => true,
            'TYPO3\\CMS\\Extensionmanager\\Task' => true,
            'TYPO3\\CMS\\Filelist\\ContextMenu\\ItemProviders\\FileProvider' => true,
            'TYPO3\\CMS\\Filelist\\Dto\\PaginationLink' => true,
            'TYPO3\\CMS\\Filelist\\Dto\\ResourceCollection' => true,
            'TYPO3\\CMS\\Filelist\\Dto\\ResourceView' => true,
            'TYPO3\\CMS\\Filelist\\Dto\\UserPermissions' => true,
            'TYPO3\\CMS\\Filelist\\ElementBrowser\\CreateFolderBrowser' => true,
            'TYPO3\\CMS\\Filelist\\ElementBrowser\\FileBrowser' => true,
            'TYPO3\\CMS\\Filelist\\ElementBrowser\\FolderBrowser' => true,
            'TYPO3\\CMS\\Filelist\\Event\\ModifyEditFileFormDataEvent' => true,
            'TYPO3\\CMS\\Filelist\\Event\\ProcessFileListActionsEvent' => true,
            'TYPO3\\CMS\\Filelist\\FileList' => true,
            'TYPO3\\CMS\\Filelist\\Matcher\\Matcher' => true,
            'TYPO3\\CMS\\Filelist\\Matcher\\ResourceFileExtensionMatcher' => true,
            'TYPO3\\CMS\\Filelist\\Matcher\\ResourceFileTypeMatcher' => true,
            'TYPO3\\CMS\\Filelist\\Matcher\\ResourceFolderTypeMatcher' => true,
            'TYPO3\\CMS\\Filelist\\Matcher\\ResourceMatcher' => true,
            'TYPO3\\CMS\\Filelist\\Pagination\\ResourceCollectionPaginator' => true,
            'TYPO3\\CMS\\Fluid\\Core\\Cache\\FluidTemplateCache' => true,
            'TYPO3\\CMS\\Fluid\\Core\\Rendering\\RenderingContext' => true,
            'TYPO3\\CMS\\Fluid\\Core\\ViewHelper\\ViewHelperResolver' => true,
            'TYPO3\\CMS\\Fluid\\ServiceProvider' => true,
            'TYPO3\\CMS\\Fluid\\View\\TemplatePaths' => true,
            'TYPO3\\CMS\\Form\\ConfigurationModuleProvider\\FormYamlProvider' => true,
            'TYPO3\\CMS\\Form\\Domain\\Condition\\ConditionProvider' => true,
            'TYPO3\\CMS\\Form\\Domain\\Condition\\Functions\\FormConditionFunctionsProvider' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\ArrayProcessing\\ArrayProcessing' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\ArrayProcessing\\ArrayProcessor' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\Exception\\ArrayProcessorException' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\Exception\\PropertyException' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\Exception\\PrototypeNotFoundException' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FlexformConfiguration\\Processors\\FinisherOptionGenerator' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FlexformConfiguration\\Processors\\ProcessorDto' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FlexformConfiguration\\Processors\\ProcessorInterface' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinition\\Converters\\AddHmacDataConverter' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinition\\Converters\\AddHmacDataToFormElementPropertyConverter' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinition\\Converters\\AddHmacDataToPropertyCollectionElementConverter' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinition\\Converters\\ConverterDto' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinition\\Converters\\FinisherOptionsFlexFormOverridesConverter' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinition\\Converters\\FinisherTranslationLanguageConverter' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinition\\Converters\\FlexFormFinisherOverridesConverterDto' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinition\\Converters\\RemoveHmacDataConverter' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinition\\Validators\\CreatableFormElementPropertiesValidator' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinition\\Validators\\CreatablePropertyCollectionElementPropertiesValidator' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinition\\Validators\\FormElementHmacDataValidator' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinition\\Validators\\PropertyCollectionElementHmacDataValidator' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinition\\Validators\\ValidationDto' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FrameworkConfiguration\\Extractors\\AdditionalElementPropertyPathsExtractor' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FrameworkConfiguration\\Extractors\\ExtractorDto' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FrameworkConfiguration\\Extractors\\FormElement\\IsCreatableFormElementExtractor' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FrameworkConfiguration\\Extractors\\FormElement\\MultiValuePropertiesExtractor' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FrameworkConfiguration\\Extractors\\FormElement\\PredefinedDefaultsExtractor' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FrameworkConfiguration\\Extractors\\FormElement\\PropertyPathsExtractor' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FrameworkConfiguration\\Extractors\\FormElement\\SelectOptionsExtractor' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FrameworkConfiguration\\Extractors\\PropertyCollectionElement\\IsCreatablePropertyCollectionElementExtractor' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FrameworkConfiguration\\Extractors\\PropertyCollectionElement\\MultiValuePropertiesExtractor' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FrameworkConfiguration\\Extractors\\PropertyCollectionElement\\PredefinedDefaultsExtractor' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FrameworkConfiguration\\Extractors\\PropertyCollectionElement\\PropertyPathsExtractor' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FrameworkConfiguration\\Extractors\\PropertyCollectionElement\\SelectOptionsExtractor' => true,
            'TYPO3\\CMS\\Form\\Domain\\Exception' => true,
            'TYPO3\\CMS\\Form\\Domain\\Exception\\IdentifierNotValidException' => true,
            'TYPO3\\CMS\\Form\\Domain\\Exception\\RenderingException' => true,
            'TYPO3\\CMS\\Form\\Domain\\Exception\\TypeDefinitionNotFoundException' => true,
            'TYPO3\\CMS\\Form\\Domain\\Exception\\TypeDefinitionNotValidException' => true,
            'TYPO3\\CMS\\Form\\Domain\\Exception\\UnknownCompositRenderableException' => true,
            'TYPO3\\CMS\\Form\\Domain\\Factory\\FormFactoryInterface' => true,
            'TYPO3\\CMS\\Form\\Domain\\Finishers\\Exception\\FinisherException' => true,
            'TYPO3\\CMS\\Form\\Domain\\Finishers\\FinisherContext' => true,
            'TYPO3\\CMS\\Form\\Domain\\Finishers\\FinisherVariableProvider' => true,
            'TYPO3\\CMS\\Form\\Domain\\Model' => true,
            'TYPO3\\CMS\\Form\\Domain\\Renderer\\RendererInterface' => true,
            'TYPO3\\CMS\\Form\\Domain\\Runtime\\Exception\\PropertyMappingException' => true,
            'TYPO3\\CMS\\Form\\Domain\\Runtime\\FormRuntime\\FormSession' => true,
            'TYPO3\\CMS\\Form\\Domain\\Runtime\\FormRuntime\\Lifecycle\\AfterFormStateInitializedInterface' => true,
            'TYPO3\\CMS\\Form\\Domain\\Runtime\\FormState' => true,
            'TYPO3\\CMS\\Form\\Exception' => true,
            'TYPO3\\CMS\\Form\\Hooks\\FormElementHooks' => true,
            'TYPO3\\CMS\\Form\\Hooks\\FormFileProvider' => true,
            'TYPO3\\CMS\\Form\\Hooks\\FormPagePreviewRenderer' => true,
            'TYPO3\\CMS\\Form\\Hooks\\ImportExportHook' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Configuration\\Exception' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Configuration\\Exception\\CycleInheritancesException' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Configuration\\Exception\\ExtensionNameRequiredException' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Configuration\\Exception\\FileWriteException' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Configuration\\Exception\\NoSuchFileException' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Configuration\\Exception\\ParseErrorException' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Configuration\\InheritancesResolverService' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Configuration\\YamlSource' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Persistence\\Exception' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Persistence\\Exception\\NoUniqueIdentifierException' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Persistence\\Exception\\NoUniquePersistenceIdentifierException' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Persistence\\Exception\\PersistenceManagerException' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Persistence\\FormPersistenceManager' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Property\\Exception\\TypeConverterException' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Property\\TypeConverter\\PseudoFile' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Property\\TypeConverter\\PseudoFileReference' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Validation\\Exception\\InvalidValidationOptionsException' => true,
            'TYPO3\\CMS\\Form\\Service\\DatabaseService' => true,
            'TYPO3\\CMS\\Form\\Slot\\FormDefinitionPersistenceException' => true,
            'TYPO3\\CMS\\Form\\Type\\FormDefinitionArray' => true,
            'TYPO3\\CMS\\FrontendLogin\\Configuration\\IncompleteConfigurationException' => true,
            'TYPO3\\CMS\\FrontendLogin\\Configuration\\RecoveryConfiguration' => true,
            'TYPO3\\CMS\\FrontendLogin\\Configuration\\RedirectConfiguration' => true,
            'TYPO3\\CMS\\FrontendLogin\\Domain\\Repository\\FrontendUserGroupRepository' => true,
            'TYPO3\\CMS\\FrontendLogin\\Domain\\Repository\\FrontendUserRepository' => true,
            'TYPO3\\CMS\\FrontendLogin\\Event\\BeforeRedirectEvent' => true,
            'TYPO3\\CMS\\FrontendLogin\\Event\\LoginConfirmedEvent' => true,
            'TYPO3\\CMS\\FrontendLogin\\Event\\LoginErrorOccurredEvent' => true,
            'TYPO3\\CMS\\FrontendLogin\\Event\\LogoutConfirmedEvent' => true,
            'TYPO3\\CMS\\FrontendLogin\\Event\\ModifyLoginFormViewEvent' => true,
            'TYPO3\\CMS\\FrontendLogin\\Event\\PasswordChangeEvent' => true,
            'TYPO3\\CMS\\FrontendLogin\\Event\\SendRecoveryEmailEvent' => true,
            'TYPO3\\CMS\\FrontendLogin\\Redirect\\RedirectHandler' => true,
            'TYPO3\\CMS\\FrontendLogin\\Redirect\\RedirectMode' => true,
            'TYPO3\\CMS\\FrontendLogin\\Redirect\\RedirectModeHandler' => true,
            'TYPO3\\CMS\\FrontendLogin\\Service\\RecoveryService' => true,
            'TYPO3\\CMS\\FrontendLogin\\Service\\UserService' => true,
            'TYPO3\\CMS\\FrontendLogin\\Validation\\RedirectUrlValidator' => true,
            'TYPO3\\CMS\\Frontend\\Aspect\\PreviewAspect' => true,
            'TYPO3\\CMS\\Frontend\\Authentication\\FrontendUserAuthentication' => true,
            'TYPO3\\CMS\\Frontend\\Authentication\\ModifyResolvedFrontendGroupsEvent' => true,
            'TYPO3\\CMS\\Frontend\\Cache\\NonceValueSubstitution' => true,
            'TYPO3\\CMS\\Frontend\\Category\\Collection\\CategoryCollection' => true,
            'TYPO3\\CMS\\Frontend\\Composer\\InstallerScripts' => true,
            'TYPO3\\CMS\\Frontend\\Configuration\\TypoScript\\ConditionMatching\\ConditionMatcher' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\CaseContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\ContentContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectArrayContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectArrayInternalContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\Exception\\ContentRenderingException' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\Exception\\ExceptionHandlerInterface' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\FilesContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\FluidTemplateContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\HierarchicalMenuContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\ImageContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\ImageResourceContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\LoadRegisterContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\Menu\\CategoryMenuUtility' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\Menu\\Exception\\NoSuchMenuTypeException' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\Menu\\TextMenuContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\RecordsContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\RestoreRegisterContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\ScalableVectorGraphicsContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\TextContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\UserContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\UserInternalContentObject' => true,
            'TYPO3\\CMS\\Frontend\\Controller\\ErrorController' => true,
            'TYPO3\\CMS\\Frontend\\Controller\\TypoScriptFrontendController' => true,
            'TYPO3\\CMS\\Frontend\\DataProcessing\\CommaSeparatedValueProcessor' => true,
            'TYPO3\\CMS\\Frontend\\DataProcessing\\DataProcessorRegistry' => true,
            'TYPO3\\CMS\\Frontend\\DataProcessing\\FilesProcessor' => true,
            'TYPO3\\CMS\\Frontend\\DataProcessing\\FlexFormProcessor' => true,
            'TYPO3\\CMS\\Frontend\\DataProcessing\\GalleryProcessor' => true,
            'TYPO3\\CMS\\Frontend\\DataProcessing\\LanguageMenuProcessor' => true,
            'TYPO3\\CMS\\Frontend\\DataProcessing\\SiteLanguageProcessor' => true,
            'TYPO3\\CMS\\Frontend\\DataProcessing\\SiteProcessor' => true,
            'TYPO3\\CMS\\Frontend\\DataProcessing\\SplitProcessor' => true,
            'TYPO3\\CMS\\Frontend\\Event\\AfterCacheableContentIsGeneratedEvent' => true,
            'TYPO3\\CMS\\Frontend\\Event\\AfterCachedPageIsPersistedEvent' => true,
            'TYPO3\\CMS\\Frontend\\Event\\AfterLinkIsGeneratedEvent' => true,
            'TYPO3\\CMS\\Frontend\\Event\\AfterPageAndLanguageIsResolvedEvent' => true,
            'TYPO3\\CMS\\Frontend\\Event\\AfterPageWithRootLineIsResolvedEvent' => true,
            'TYPO3\\CMS\\Frontend\\Event\\BeforePageIsResolvedEvent' => true,
            'TYPO3\\CMS\\Frontend\\Event\\FilterMenuItemsEvent' => true,
            'TYPO3\\CMS\\Frontend\\Event\\ModifyCacheLifetimeForPageEvent' => true,
            'TYPO3\\CMS\\Frontend\\Event\\ModifyHrefLangTagsEvent' => true,
            'TYPO3\\CMS\\Frontend\\Event\\ModifyPageLinkConfigurationEvent' => true,
            'TYPO3\\CMS\\Frontend\\Event\\ModifyTypoScriptConstantsEvent' => true,
            'TYPO3\\CMS\\Frontend\\Event\\ShouldUseCachedPageDataIfAvailableEvent' => true,
            'TYPO3\\CMS\\Frontend\\Exception' => true,
            'TYPO3\\CMS\\Frontend\\Hooks\\TreelistCacheUpdateHooks' => true,
            'TYPO3\\CMS\\Frontend\\Imaging\\GifBuilder' => true,
            'TYPO3\\CMS\\Frontend\\Page\\CacheHashConfiguration' => true,
            'TYPO3\\CMS\\Frontend\\Page\\PageAccessFailureReasons' => true,
            'TYPO3\\CMS\\Frontend\\Page\\PageLayoutResolver' => true,
            'TYPO3\\CMS\\Frontend\\Plugin\\AbstractPlugin' => true,
            'TYPO3\\CMS\\Frontend\\Preview\\ImagePreviewRenderer' => true,
            'TYPO3\\CMS\\Frontend\\Preview\\TextPreviewRenderer' => true,
            'TYPO3\\CMS\\Frontend\\Preview\\TextmediaPreviewRenderer' => true,
            'TYPO3\\CMS\\Frontend\\Preview\\TextpicPreviewRenderer' => true,
            'TYPO3\\CMS\\Frontend\\Resource\\FileCollector' => true,
            'TYPO3\\CMS\\Frontend\\Resource\\FilePathSanitizer' => true,
            'TYPO3\\CMS\\Frontend\\ServiceProvider' => true,
            'TYPO3\\CMS\\Frontend\\Typolink\\DatabaseRecordLinkBuilder' => true,
            'TYPO3\\CMS\\Frontend\\Typolink\\EmailLinkBuilder' => true,
            'TYPO3\\CMS\\Frontend\\Typolink\\ExternalUrlLinkBuilder' => true,
            'TYPO3\\CMS\\Frontend\\Typolink\\FileOrFolderLinkBuilder' => true,
            'TYPO3\\CMS\\Frontend\\Typolink\\LegacyLinkBuilder' => true,
            'TYPO3\\CMS\\Frontend\\Typolink\\LinkResult' => true,
            'TYPO3\\CMS\\Frontend\\Typolink\\LinkResultInterface' => true,
            'TYPO3\\CMS\\Frontend\\Typolink\\LinkVarsCalculator' => true,
            'TYPO3\\CMS\\Frontend\\Typolink\\PageLinkBuilder' => true,
            'TYPO3\\CMS\\Frontend\\Typolink\\TelephoneLinkBuilder' => true,
            'TYPO3\\CMS\\Frontend\\Typolink\\UnableToLinkException' => true,
            'TYPO3\\CMS\\Frontend\\Utility\\CanonicalizationUtility' => true,
            'TYPO3\\CMS\\Impexp\\ContextMenu\\ItemProvider' => true,
            'TYPO3\\CMS\\Impexp\\Domain\\Repository\\PresetRepository' => true,
            'TYPO3\\CMS\\Impexp\\Event\\BeforeImportEvent' => true,
            'TYPO3\\CMS\\Impexp\\Exception' => true,
            'TYPO3\\CMS\\Impexp\\Exception\\ImportFailedException' => true,
            'TYPO3\\CMS\\Impexp\\Exception\\InsufficientUserPermissionsException' => true,
            'TYPO3\\CMS\\Impexp\\Exception\\LoadingFileFailedException' => true,
            'TYPO3\\CMS\\Impexp\\Exception\\MalformedPresetException' => true,
            'TYPO3\\CMS\\Impexp\\Exception\\PrerequisitesNotMetException' => true,
            'TYPO3\\CMS\\Impexp\\Exception\\PresetNotFoundException' => true,
            'TYPO3\\CMS\\Impexp\\Export' => true,
            'TYPO3\\CMS\\Impexp\\Import' => true,
            'TYPO3\\CMS\\Impexp\\View\\ExportPageTreeView' => true,
            'TYPO3\\CMS\\IndexedSearch\\Domain\\Repository\\AdministrationRepository' => true,
            'TYPO3\\CMS\\IndexedSearch\\Domain\\Repository\\IndexSearchRepository' => true,
            'TYPO3\\CMS\\IndexedSearch\\FileContentParser' => true,
            'TYPO3\\CMS\\IndexedSearch\\Hook\\AvailableTcaTables' => true,
            'TYPO3\\CMS\\IndexedSearch\\Hook\\DeleteIndexedData' => true,
            'TYPO3\\CMS\\IndexedSearch\\Indexer' => true,
            'TYPO3\\CMS\\IndexedSearch\\Lexer' => true,
            'TYPO3\\CMS\\IndexedSearch\\Utility\\DoubleMetaPhoneUtility' => true,
            'TYPO3\\CMS\\IndexedSearch\\Utility\\IndexedSearchUtility' => true,
            'TYPO3\\CMS\\Info\\Controller\\Event\\ModifyInfoModuleContentEvent' => true,
            'TYPO3\\CMS\\Install\\Report\\EnvironmentStatusReport' => true,
            'TYPO3\\CMS\\Install\\Report\\InstallStatusReport' => true,
            'TYPO3\\CMS\\Install\\Report\\SecurityStatusReport' => true,
            'TYPO3\\CMS\\Install\\Updates\\BackendGroupsExplicitAllowDenyMigration' => true,
            'TYPO3\\CMS\\Install\\Updates\\BackendModulePermissionMigration' => true,
            'TYPO3\\CMS\\Install\\Updates\\BackendUserLanguageMigration' => true,
            'TYPO3\\CMS\\Install\\Updates\\CollectionsExtractionUpdate' => true,
            'TYPO3\\CMS\\Install\\Updates\\Confirmation' => true,
            'TYPO3\\CMS\\Install\\Updates\\DatabaseRowsUpdateWizard' => true,
            'TYPO3\\CMS\\Install\\Updates\\DatabaseUpdatedPrerequisite' => true,
            'TYPO3\\CMS\\Install\\Updates\\ExtensionModel' => true,
            'TYPO3\\CMS\\Install\\Updates\\FeLoginModeExtractionUpdate' => true,
            'TYPO3\\CMS\\Install\\Updates\\MigrateSiteSettingsConfigUpdate' => true,
            'TYPO3\\CMS\\Install\\Updates\\PasswordPolicyForFrontendUsersUpdate' => true,
            'TYPO3\\CMS\\Install\\Updates\\PrerequisiteCollection' => true,
            'TYPO3\\CMS\\Install\\Updates\\ReferenceIndexUpdatedPrerequisite' => true,
            'TYPO3\\CMS\\Install\\Updates\\RepeatableInterface' => true,
            'TYPO3\\CMS\\Install\\Updates\\RowUpdater\\L18nDiffsourceToJsonMigration' => true,
            'TYPO3\\CMS\\Install\\Updates\\RowUpdater\\WorkspaceMovePlaceholderRemovalMigration' => true,
            'TYPO3\\CMS\\Install\\Updates\\RowUpdater\\WorkspaceNewPlaceholderRemovalMigration' => true,
            'TYPO3\\CMS\\Install\\Updates\\ShortcutRecordsMigration' => true,
            'TYPO3\\CMS\\Install\\Updates\\SvgFilesSanitization' => true,
            'TYPO3\\CMS\\Install\\Updates\\SysFileCollectionIdentifierMigration' => true,
            'TYPO3\\CMS\\Install\\Updates\\SysFileMountIdentifierMigration' => true,
            'TYPO3\\CMS\\Install\\Updates\\SysLogChannel' => true,
            'TYPO3\\CMS\\Install\\Updates\\SysLogSerializationUpdate' => true,
            'TYPO3\\CMS\\Install\\Updates\\SysTemplateNoWorkspaceMigration' => true,
            'TYPO3\\CMS\\Install\\Updates\\UpgradeWizardRegistry' => true,
            'TYPO3\\CMS\\Linkvalidator\\Event\\BeforeRecordIsAnalyzedEvent' => true,
            'TYPO3\\CMS\\Linkvalidator\\Event\\ModifyValidatorTaskEmailEvent' => true,
            'TYPO3\\CMS\\Linkvalidator\\Linktype\\FileLinktype' => true,
            'TYPO3\\CMS\\Linkvalidator\\Linktype\\InternalLinktype' => true,
            'TYPO3\\CMS\\Linkvalidator\\QueryRestrictions\\EditableRestriction' => true,
            'TYPO3\\CMS\\Linkvalidator\\Repository\\PagesRepository' => true,
            'TYPO3\\CMS\\Linkvalidator\\Task' => true,
            'TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\BackendModuleProvider' => true,
            'TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\BackendRoutesProvider' => true,
            'TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\BackendUserSettingsProvider' => true,
            'TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\BackendUserTsConfigProvider' => true,
            'TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\ContentSecurityPolicyMutationsProvider' => true,
            'TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\EventListenersProvider' => true,
            'TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\GlobalVariableProvider' => true,
            'TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\HttpMiddlewareStackProvider' => true,
            'TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\MfaProvidersProvider' => true,
            'TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\PageDoktypeProvider' => true,
            'TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\SitesTcaConfigurationProvider' => true,
            'TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\SitesYamlConfigurationProvider' => true,
            'TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\SoftReferenceParsersProvider' => true,
            'TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\SymfonyExpressionLanguageProvidersProvider' => true,
            'TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\ToolbarItemsProvider' => true,
            'TYPO3\\CMS\\Lowlevel\\DependencyInjection\\ConfigurationModuleProviderPass' => true,
            'TYPO3\\CMS\\Lowlevel\\Event\\ModifyBlindedConfigurationOptionsEvent' => true,
            'TYPO3\\CMS\\Lowlevel\\Integrity\\DatabaseIntegrityCheck' => true,
            'TYPO3\\CMS\\Lowlevel\\Service\\CleanUpLocalProcessedFilesService' => true,
            'TYPO3\\CMS\\Opendocs\\Service\\OpenDocumentService' => true,
            'TYPO3\\CMS\\Reactions\\Authentication\\ReactionUserAuthentication' => true,
            'TYPO3\\CMS\\Reactions\\ConfigurationModuleProvider\\ReactionsProvider' => true,
            'TYPO3\\CMS\\Reactions\\Exception\\ReactionNotFoundException' => true,
            'TYPO3\\CMS\\Reactions\\Form\\Element\\FieldMapElement' => true,
            'TYPO3\\CMS\\Reactions\\Http\\ReactionHandler' => true,
            'TYPO3\\CMS\\Reactions\\Model\\ReactionInstruction' => true,
            'TYPO3\\CMS\\Reactions\\Pagination\\DemandedArrayPaginator' => true,
            'TYPO3\\CMS\\Reactions\\ReactionRegistry' => true,
            'TYPO3\\CMS\\Reactions\\Reaction\\ReactionInterface' => true,
            'TYPO3\\CMS\\Reactions\\Repository\\ReactionDemand' => true,
            'TYPO3\\CMS\\Reactions\\Repository\\ReactionRepository' => true,
            'TYPO3\\CMS\\Reactions\\Validation\\CreateRecordReactionTable' => true,
            'TYPO3\\CMS\\Recycler\\Domain\\Model\\DeletedRecords' => true,
            'TYPO3\\CMS\\Recycler\\Task' => true,
            'TYPO3\\CMS\\Recycler\\Utility\\RecyclerUtility' => true,
            'TYPO3\\CMS\\Redirects\\Evaluation\\SourceHost' => true,
            'TYPO3\\CMS\\Redirects\\Event\\AfterAutoCreateRedirectHasBeenPersistedEvent' => true,
            'TYPO3\\CMS\\Redirects\\Event\\BeforeRedirectMatchDomainEvent' => true,
            'TYPO3\\CMS\\Redirects\\Event\\ModifyAutoCreateRedirectRecordBeforePersistingEvent' => true,
            'TYPO3\\CMS\\Redirects\\Event\\ModifyRedirectManagementControllerViewDataEvent' => true,
            'TYPO3\\CMS\\Redirects\\Event\\RedirectWasHitEvent' => true,
            'TYPO3\\CMS\\Redirects\\Event\\SlugRedirectChangeItemCreatedEvent' => true,
            'TYPO3\\CMS\\Redirects\\FormDataProvider\\ValuePickerItemDataProvider' => true,
            'TYPO3\\CMS\\Redirects\\Hooks\\DataHandlerCacheFlushingHook' => true,
            'TYPO3\\CMS\\Redirects\\Hooks\\DispatchNotificationHook' => true,
            'TYPO3\\CMS\\Redirects\\Message\\RedirectWasHitMessage' => true,
            'TYPO3\\CMS\\Redirects\\RedirectUpdate\\PageTypeSource' => true,
            'TYPO3\\CMS\\Redirects\\RedirectUpdate\\PlainSlugReplacementRedirectSource' => true,
            'TYPO3\\CMS\\Redirects\\RedirectUpdate\\RedirectSourceCollection' => true,
            'TYPO3\\CMS\\Redirects\\RedirectUpdate\\SlugRedirectChangeItem' => true,
            'TYPO3\\CMS\\Redirects\\RedirectUpdate\\SlugRedirectChangeItemFactory' => true,
            'TYPO3\\CMS\\Redirects\\Repository\\Demand' => true,
            'TYPO3\\CMS\\Redirects\\Repository\\RedirectRepository' => true,
            'TYPO3\\CMS\\Redirects\\Service\\IntegrityService' => true,
            'TYPO3\\CMS\\Redirects\\Service\\RedirectCacheService' => true,
            'TYPO3\\CMS\\Redirects\\Service\\RedirectService' => true,
            'TYPO3\\CMS\\Redirects\\Service\\SlugService' => true,
            'TYPO3\\CMS\\Redirects\\UserFunctions\\HitCountDisplayCondition' => true,
            'TYPO3\\CMS\\Reports\\Registry\\ReportRegistry' => true,
            'TYPO3\\CMS\\Reports\\Registry\\StatusRegistry' => true,
            'TYPO3\\CMS\\Reports\\ReportInterface' => true,
            'TYPO3\\CMS\\Reports\\Report\\Status\\ConfigurationStatus' => true,
            'TYPO3\\CMS\\Reports\\Report\\Status\\FalStatus' => true,
            'TYPO3\\CMS\\Reports\\Report\\Status\\SecurityStatus' => true,
            'TYPO3\\CMS\\Reports\\Report\\Status\\SystemStatus' => true,
            'TYPO3\\CMS\\Reports\\Report\\Status\\Typo3Status' => true,
            'TYPO3\\CMS\\Reports\\RequestAwareReportInterface' => true,
            'TYPO3\\CMS\\Reports\\RequestAwareStatusProviderInterface' => true,
            'TYPO3\\CMS\\Reports\\Status' => true,
            'TYPO3\\CMS\\Reports\\Task' => true,
            'TYPO3\\CMS\\RteCKEditor\\Form\\Element\\Event\\AfterGetExternalPluginsEvent' => true,
            'TYPO3\\CMS\\RteCKEditor\\Form\\Element\\Event\\AfterPrepareConfigurationForEditorEvent' => true,
            'TYPO3\\CMS\\RteCKEditor\\Form\\Element\\Event\\BeforeGetExternalPluginsEvent' => true,
            'TYPO3\\CMS\\RteCKEditor\\Form\\Element\\Event\\BeforePrepareConfigurationForEditorEvent' => true,
            'TYPO3\\CMS\\RteCKEditor\\Form\\Element\\RichTextElement' => true,
            'TYPO3\\CMS\\RteCKEditor\\Form\\Resolver\\RichTextNodeResolver' => true,
            'TYPO3\\CMS\\Scheduler\\CronCommand\\CronCommand' => true,
            'TYPO3\\CMS\\Scheduler\\CronCommand\\NormalizeCommand' => true,
            'TYPO3\\CMS\\Scheduler\\Exception' => true,
            'TYPO3\\CMS\\Scheduler\\Exception\\InvalidDateException' => true,
            'TYPO3\\CMS\\Scheduler\\Exception\\InvalidTaskException' => true,
            'TYPO3\\CMS\\Scheduler\\Execution' => true,
            'TYPO3\\CMS\\Scheduler\\FailedExecutionException' => true,
            'TYPO3\\CMS\\Scheduler\\Service\\TaskService' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\CachingFrameworkGarbageCollectionAdditionalFieldProvider' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\CachingFrameworkGarbageCollectionTask' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\Enumeration\\Action' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\ExecuteSchedulableCommandAdditionalFieldProvider' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\ExecuteSchedulableCommandTask' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\FileStorageExtractionAdditionalFieldProvider' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\FileStorageExtractionTask' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\FileStorageIndexingAdditionalFieldProvider' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\FileStorageIndexingTask' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\IpAnonymizationAdditionalFieldProvider' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\IpAnonymizationTask' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\OptimizeDatabaseTableAdditionalFieldProvider' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\OptimizeDatabaseTableTask' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\RecyclerGarbageCollectionAdditionalFieldProvider' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\RecyclerGarbageCollectionTask' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\TableGarbageCollectionAdditionalFieldProvider' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\TableGarbageCollectionTask' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\TaskSerializer' => true,
            'TYPO3\\CMS\\Scheduler\\Validation\\Validator\\TaskValidator' => true,
            'TYPO3\\CMS\\Seo\\Canonical\\CanonicalGenerator' => true,
            'TYPO3\\CMS\\Seo\\Event\\ModifyUrlForCanonicalTagEvent' => true,
            'TYPO3\\CMS\\Seo\\MetaTag\\OpenGraphMetaTagManager' => true,
            'TYPO3\\CMS\\Seo\\MetaTag\\TwitterCardMetaTagManager' => true,
            'TYPO3\\CMS\\Seo\\Widgets\\PagesWithoutDescriptionWidget' => true,
            'TYPO3\\CMS\\Seo\\Widgets\\Provider\\PagesWithoutDescriptionDataProvider' => true,
            'TYPO3\\CMS\\Seo\\XmlSitemap\\Exception\\InvalidConfigurationException' => true,
            'TYPO3\\CMS\\Seo\\XmlSitemap\\Exception\\MissingConfigurationException' => true,
            'TYPO3\\CMS\\Seo\\XmlSitemap\\PagesXmlSitemapDataProvider' => true,
            'TYPO3\\CMS\\Seo\\XmlSitemap\\RecordsXmlSitemapDataProvider' => true,
            'TYPO3\\CMS\\Setup\\Event\\AddJavaScriptModulesEvent' => true,
            'TYPO3\\CMS\\SysNote\\Domain\\Repository\\SysNoteRepository' => true,
            'TYPO3\\CMS\\SysNote\\Persistence\\NoteCreationEnricher' => true,
            'TYPO3\\CMS\\SysNote\\Renderer\\NoteRenderer' => true,
            'TYPO3\\CMS\\T3editor\\Addon' => true,
            'TYPO3\\CMS\\T3editor\\Controller\\TypoScriptReferenceController' => true,
            'TYPO3\\CMS\\T3editor\\Exception\\InvalidModeException' => true,
            'TYPO3\\CMS\\T3editor\\Form\\Element\\T3editorElement' => true,
            'TYPO3\\CMS\\T3editor\\Mode' => true,
            'TYPO3\\CMS\\Webhooks\\ConfigurationModuleProvider\\WebhookTypesProvider' => true,
            'TYPO3\\CMS\\Webhooks\\DependencyInjection\\WebhookCompilerPass' => true,
            'TYPO3\\CMS\\Webhooks\\Factory\\WebhookInstructionFactory' => true,
            'TYPO3\\CMS\\Webhooks\\Message\\FileAddedMessage' => true,
            'TYPO3\\CMS\\Webhooks\\Message\\FileRemovedMessage' => true,
            'TYPO3\\CMS\\Webhooks\\Message\\FileUpdatedMessage' => true,
            'TYPO3\\CMS\\Webhooks\\Message\\LoginErrorOccurredMessage' => true,
            'TYPO3\\CMS\\Webhooks\\Message\\MfaVerificationErrorOccurredMessage' => true,
            'TYPO3\\CMS\\Webhooks\\Message\\PageModificationMessage' => true,
            'TYPO3\\CMS\\Webhooks\\Message\\WebhookMessageFactory' => true,
            'TYPO3\\CMS\\Webhooks\\Model\\WebhookInstruction' => true,
            'TYPO3\\CMS\\Webhooks\\Model\\WebhookType' => true,
            'TYPO3\\CMS\\Webhooks\\Pagination\\DemandedArrayPaginator' => true,
            'TYPO3\\CMS\\Webhooks\\Repository\\WebhookDemand' => true,
            'TYPO3\\CMS\\Workspaces\\Authentication\\PreviewUserAuthentication' => true,
            'TYPO3\\CMS\\Workspaces\\Backend\\ToolbarItems\\WorkspaceSelectorToolbarItem' => true,
            'TYPO3\\CMS\\Workspaces\\Controller\\AjaxDispatcher' => true,
            'TYPO3\\CMS\\Workspaces\\Controller\\Remote\\MassActionHandler' => true,
            'TYPO3\\CMS\\Workspaces\\DataHandler\\CommandMap' => true,
            'TYPO3\\CMS\\Workspaces\\Dependency\\DependencyEntityFactory' => true,
            'TYPO3\\CMS\\Workspaces\\Dependency\\DependencyResolver' => true,
            'TYPO3\\CMS\\Workspaces\\Dependency\\ElementEntity' => true,
            'TYPO3\\CMS\\Workspaces\\Dependency\\ElementEntityProcessor' => true,
            'TYPO3\\CMS\\Workspaces\\Dependency\\EventCallback' => true,
            'TYPO3\\CMS\\Workspaces\\Dependency\\ReferenceEntity' => true,
            'TYPO3\\CMS\\Workspaces\\Domain\\Model\\CombinedRecord' => true,
            'TYPO3\\CMS\\Workspaces\\Domain\\Model\\DatabaseRecord' => true,
            'TYPO3\\CMS\\Workspaces\\Domain\\Record\\StageRecord' => true,
            'TYPO3\\CMS\\Workspaces\\Domain\\Record\\WorkspaceRecord' => true,
            'TYPO3\\CMS\\Workspaces\\Event\\AfterCompiledCacheableDataForWorkspaceEvent' => true,
            'TYPO3\\CMS\\Workspaces\\Event\\AfterDataGeneratedForWorkspaceEvent' => true,
            'TYPO3\\CMS\\Workspaces\\Event\\AfterRecordPublishedEvent' => true,
            'TYPO3\\CMS\\Workspaces\\Event\\GetVersionedDataEvent' => true,
            'TYPO3\\CMS\\Workspaces\\Event\\ModifyVersionDifferencesEvent' => true,
            'TYPO3\\CMS\\Workspaces\\Event\\RetrievedPreviewUrlEvent' => true,
            'TYPO3\\CMS\\Workspaces\\Event\\SortVersionedDataEvent' => true,
            'TYPO3\\CMS\\Workspaces\\Messages\\StageChangeMessage' => true,
            'TYPO3\\CMS\\Workspaces\\Service\\IntegrityService' => true,
            'backend.modules_decorated_1.inner' => true,
            'backend.modules_decorated_10.inner' => true,
            'backend.modules_decorated_11.inner' => true,
            'backend.modules_decorated_12.inner' => true,
            'backend.modules_decorated_13.inner' => true,
            'backend.modules_decorated_14.inner' => true,
            'backend.modules_decorated_15.inner' => true,
            'backend.modules_decorated_16.inner' => true,
            'backend.modules_decorated_17.inner' => true,
            'backend.modules_decorated_18.inner' => true,
            'backend.modules_decorated_19.inner' => true,
            'backend.modules_decorated_2.inner' => true,
            'backend.modules_decorated_20.inner' => true,
            'backend.modules_decorated_21.inner' => true,
            'backend.modules_decorated_22.inner' => true,
            'backend.modules_decorated_23.inner' => true,
            'backend.modules_decorated_24.inner' => true,
            'backend.modules_decorated_25.inner' => true,
            'backend.modules_decorated_26.inner' => true,
            'backend.modules_decorated_27.inner' => true,
            'backend.modules_decorated_28.inner' => true,
            'backend.modules_decorated_29.inner' => true,
            'backend.modules_decorated_3.inner' => true,
            'backend.modules_decorated_30.inner' => true,
            'backend.modules_decorated_31.inner' => true,
            'backend.modules_decorated_32.inner' => true,
            'backend.modules_decorated_33.inner' => true,
            'backend.modules_decorated_34.inner' => true,
            'backend.modules_decorated_35.inner' => true,
            'backend.modules_decorated_36.inner' => true,
            'backend.modules_decorated_37.inner' => true,
            'backend.modules_decorated_38.inner' => true,
            'backend.modules_decorated_39.inner' => true,
            'backend.modules_decorated_4.inner' => true,
            'backend.modules_decorated_40.inner' => true,
            'backend.modules_decorated_41.inner' => true,
            'backend.modules_decorated_42.inner' => true,
            'backend.modules_decorated_5.inner' => true,
            'backend.modules_decorated_6.inner' => true,
            'backend.modules_decorated_7.inner' => true,
            'backend.modules_decorated_8.inner' => true,
            'backend.modules_decorated_9.inner' => true,
            'backend.routes_decorated_1.inner' => true,
            'backend.routes_decorated_10.inner' => true,
            'backend.routes_decorated_11.inner' => true,
            'backend.routes_decorated_12.inner' => true,
            'backend.routes_decorated_13.inner' => true,
            'backend.routes_decorated_14.inner' => true,
            'backend.routes_decorated_15.inner' => true,
            'backend.routes_decorated_16.inner' => true,
            'backend.routes_decorated_17.inner' => true,
            'backend.routes_decorated_18.inner' => true,
            'backend.routes_decorated_19.inner' => true,
            'backend.routes_decorated_2.inner' => true,
            'backend.routes_decorated_20.inner' => true,
            'backend.routes_decorated_21.inner' => true,
            'backend.routes_decorated_22.inner' => true,
            'backend.routes_decorated_23.inner' => true,
            'backend.routes_decorated_24.inner' => true,
            'backend.routes_decorated_25.inner' => true,
            'backend.routes_decorated_26.inner' => true,
            'backend.routes_decorated_27.inner' => true,
            'backend.routes_decorated_28.inner' => true,
            'backend.routes_decorated_29.inner' => true,
            'backend.routes_decorated_3.inner' => true,
            'backend.routes_decorated_30.inner' => true,
            'backend.routes_decorated_31.inner' => true,
            'backend.routes_decorated_32.inner' => true,
            'backend.routes_decorated_33.inner' => true,
            'backend.routes_decorated_34.inner' => true,
            'backend.routes_decorated_35.inner' => true,
            'backend.routes_decorated_36.inner' => true,
            'backend.routes_decorated_37.inner' => true,
            'backend.routes_decorated_38.inner' => true,
            'backend.routes_decorated_39.inner' => true,
            'backend.routes_decorated_4.inner' => true,
            'backend.routes_decorated_40.inner' => true,
            'backend.routes_decorated_41.inner' => true,
            'backend.routes_decorated_42.inner' => true,
            'backend.routes_decorated_5.inner' => true,
            'backend.routes_decorated_6.inner' => true,
            'backend.routes_decorated_7.inner' => true,
            'backend.routes_decorated_8.inner' => true,
            'backend.routes_decorated_9.inner' => true,
            'cache.adminpanel_requestcache' => true,
            'cache.dashboard.rss' => true,
            'cache.extbase' => true,
            'cache.fluid_template' => true,
            'cache.hash' => true,
            'cache.imagesizes' => true,
            'cache.l10n' => true,
            'cache.pages' => true,
            'cache.rootline' => true,
            'cache.runtime' => true,
            'cache.typoscript' => true,
            'cache.workspaces' => true,
            'content.security.policies_decorated_1.inner' => true,
            'content.security.policies_decorated_10.inner' => true,
            'content.security.policies_decorated_11.inner' => true,
            'content.security.policies_decorated_12.inner' => true,
            'content.security.policies_decorated_13.inner' => true,
            'content.security.policies_decorated_14.inner' => true,
            'content.security.policies_decorated_15.inner' => true,
            'content.security.policies_decorated_16.inner' => true,
            'content.security.policies_decorated_17.inner' => true,
            'content.security.policies_decorated_18.inner' => true,
            'content.security.policies_decorated_19.inner' => true,
            'content.security.policies_decorated_2.inner' => true,
            'content.security.policies_decorated_20.inner' => true,
            'content.security.policies_decorated_21.inner' => true,
            'content.security.policies_decorated_22.inner' => true,
            'content.security.policies_decorated_23.inner' => true,
            'content.security.policies_decorated_24.inner' => true,
            'content.security.policies_decorated_25.inner' => true,
            'content.security.policies_decorated_26.inner' => true,
            'content.security.policies_decorated_27.inner' => true,
            'content.security.policies_decorated_28.inner' => true,
            'content.security.policies_decorated_29.inner' => true,
            'content.security.policies_decorated_3.inner' => true,
            'content.security.policies_decorated_30.inner' => true,
            'content.security.policies_decorated_31.inner' => true,
            'content.security.policies_decorated_32.inner' => true,
            'content.security.policies_decorated_33.inner' => true,
            'content.security.policies_decorated_34.inner' => true,
            'content.security.policies_decorated_35.inner' => true,
            'content.security.policies_decorated_36.inner' => true,
            'content.security.policies_decorated_37.inner' => true,
            'content.security.policies_decorated_38.inner' => true,
            'content.security.policies_decorated_39.inner' => true,
            'content.security.policies_decorated_4.inner' => true,
            'content.security.policies_decorated_40.inner' => true,
            'content.security.policies_decorated_41.inner' => true,
            'content.security.policies_decorated_5.inner' => true,
            'content.security.policies_decorated_6.inner' => true,
            'content.security.policies_decorated_7.inner' => true,
            'content.security.policies_decorated_8.inner' => true,
            'content.security.policies_decorated_9.inner' => true,
            'dashboard.buttons.docGettingStarted' => true,
            'dashboard.buttons.docTSconfig' => true,
            'dashboard.buttons.docTypoScriptReference' => true,
            'dashboard.buttons.t3news' => true,
            'dashboard.buttons.t3securityAdvisories' => true,
            'dashboard.presets_decorated_1.inner' => true,
            'dashboard.widgetGroups_decorated_1.inner' => true,
            'dashboard.widgets_decorated_1.inner' => true,
            'extension.remote.ter' => true,
            'globalPageTsConfig_decorated_1.inner' => true,
            'globalPageTsConfig_decorated_10.inner' => true,
            'globalPageTsConfig_decorated_11.inner' => true,
            'globalPageTsConfig_decorated_12.inner' => true,
            'globalPageTsConfig_decorated_13.inner' => true,
            'globalPageTsConfig_decorated_14.inner' => true,
            'globalPageTsConfig_decorated_15.inner' => true,
            'globalPageTsConfig_decorated_16.inner' => true,
            'globalPageTsConfig_decorated_17.inner' => true,
            'globalPageTsConfig_decorated_18.inner' => true,
            'globalPageTsConfig_decorated_19.inner' => true,
            'globalPageTsConfig_decorated_2.inner' => true,
            'globalPageTsConfig_decorated_20.inner' => true,
            'globalPageTsConfig_decorated_21.inner' => true,
            'globalPageTsConfig_decorated_22.inner' => true,
            'globalPageTsConfig_decorated_23.inner' => true,
            'globalPageTsConfig_decorated_24.inner' => true,
            'globalPageTsConfig_decorated_25.inner' => true,
            'globalPageTsConfig_decorated_26.inner' => true,
            'globalPageTsConfig_decorated_27.inner' => true,
            'globalPageTsConfig_decorated_28.inner' => true,
            'globalPageTsConfig_decorated_29.inner' => true,
            'globalPageTsConfig_decorated_3.inner' => true,
            'globalPageTsConfig_decorated_30.inner' => true,
            'globalPageTsConfig_decorated_31.inner' => true,
            'globalPageTsConfig_decorated_32.inner' => true,
            'globalPageTsConfig_decorated_33.inner' => true,
            'globalPageTsConfig_decorated_34.inner' => true,
            'globalPageTsConfig_decorated_35.inner' => true,
            'globalPageTsConfig_decorated_36.inner' => true,
            'globalPageTsConfig_decorated_37.inner' => true,
            'globalPageTsConfig_decorated_38.inner' => true,
            'globalPageTsConfig_decorated_39.inner' => true,
            'globalPageTsConfig_decorated_4.inner' => true,
            'globalPageTsConfig_decorated_40.inner' => true,
            'globalPageTsConfig_decorated_41.inner' => true,
            'globalPageTsConfig_decorated_5.inner' => true,
            'globalPageTsConfig_decorated_6.inner' => true,
            'globalPageTsConfig_decorated_7.inner' => true,
            'globalPageTsConfig_decorated_8.inner' => true,
            'globalPageTsConfig_decorated_9.inner' => true,
            'icons_decorated_1.inner' => true,
            'icons_decorated_10.inner' => true,
            'icons_decorated_11.inner' => true,
            'icons_decorated_12.inner' => true,
            'icons_decorated_13.inner' => true,
            'icons_decorated_14.inner' => true,
            'icons_decorated_15.inner' => true,
            'icons_decorated_16.inner' => true,
            'icons_decorated_17.inner' => true,
            'icons_decorated_18.inner' => true,
            'icons_decorated_19.inner' => true,
            'icons_decorated_2.inner' => true,
            'icons_decorated_20.inner' => true,
            'icons_decorated_21.inner' => true,
            'icons_decorated_22.inner' => true,
            'icons_decorated_23.inner' => true,
            'icons_decorated_24.inner' => true,
            'icons_decorated_25.inner' => true,
            'icons_decorated_26.inner' => true,
            'icons_decorated_27.inner' => true,
            'icons_decorated_28.inner' => true,
            'icons_decorated_29.inner' => true,
            'icons_decorated_3.inner' => true,
            'icons_decorated_30.inner' => true,
            'icons_decorated_31.inner' => true,
            'icons_decorated_32.inner' => true,
            'icons_decorated_33.inner' => true,
            'icons_decorated_34.inner' => true,
            'icons_decorated_35.inner' => true,
            'icons_decorated_36.inner' => true,
            'icons_decorated_37.inner' => true,
            'icons_decorated_38.inner' => true,
            'icons_decorated_39.inner' => true,
            'icons_decorated_4.inner' => true,
            'icons_decorated_40.inner' => true,
            'icons_decorated_41.inner' => true,
            'icons_decorated_42.inner' => true,
            'icons_decorated_5.inner' => true,
            'icons_decorated_6.inner' => true,
            'icons_decorated_7.inner' => true,
            'icons_decorated_8.inner' => true,
            'icons_decorated_9.inner' => true,
            'lowlevel.configuration.module.provider.backendModules' => true,
            'lowlevel.configuration.module.provider.backendroutes' => true,
            'lowlevel.configuration.module.provider.beusertsconfig' => true,
            'lowlevel.configuration.module.provider.beuseruc' => true,
            'lowlevel.configuration.module.provider.confvars' => true,
            'lowlevel.configuration.module.provider.contentsecuritypolicymutationsprovider' => true,
            'lowlevel.configuration.module.provider.eventlisteners' => true,
            'lowlevel.configuration.module.provider.expressionlanguage' => true,
            'lowlevel.configuration.module.provider.httpmiddlewarestacks' => true,
            'lowlevel.configuration.module.provider.mfaproviders' => true,
            'lowlevel.configuration.module.provider.pagestypes' => true,
            'lowlevel.configuration.module.provider.services' => true,
            'lowlevel.configuration.module.provider.sitestcaconfiguration' => true,
            'lowlevel.configuration.module.provider.sitesyamlconfiguration' => true,
            'lowlevel.configuration.module.provider.softreferenceparsers' => true,
            'lowlevel.configuration.module.provider.tbestyles' => true,
            'lowlevel.configuration.module.provider.tca' => true,
            'lowlevel.configuration.module.provider.toolbaritems' => true,
            'lowlevel.configuration.module.provider.usersettings' => true,
            'messenger.bus.default' => true,
            'middlewares_decorated_1.inner' => true,
            'middlewares_decorated_10.inner' => true,
            'middlewares_decorated_11.inner' => true,
            'middlewares_decorated_12.inner' => true,
            'middlewares_decorated_13.inner' => true,
            'middlewares_decorated_14.inner' => true,
            'middlewares_decorated_15.inner' => true,
            'middlewares_decorated_16.inner' => true,
            'middlewares_decorated_17.inner' => true,
            'middlewares_decorated_18.inner' => true,
            'middlewares_decorated_19.inner' => true,
            'middlewares_decorated_2.inner' => true,
            'middlewares_decorated_20.inner' => true,
            'middlewares_decorated_21.inner' => true,
            'middlewares_decorated_22.inner' => true,
            'middlewares_decorated_23.inner' => true,
            'middlewares_decorated_24.inner' => true,
            'middlewares_decorated_25.inner' => true,
            'middlewares_decorated_26.inner' => true,
            'middlewares_decorated_27.inner' => true,
            'middlewares_decorated_28.inner' => true,
            'middlewares_decorated_29.inner' => true,
            'middlewares_decorated_3.inner' => true,
            'middlewares_decorated_30.inner' => true,
            'middlewares_decorated_31.inner' => true,
            'middlewares_decorated_32.inner' => true,
            'middlewares_decorated_33.inner' => true,
            'middlewares_decorated_34.inner' => true,
            'middlewares_decorated_35.inner' => true,
            'middlewares_decorated_36.inner' => true,
            'middlewares_decorated_37.inner' => true,
            'middlewares_decorated_38.inner' => true,
            'middlewares_decorated_39.inner' => true,
            'middlewares_decorated_4.inner' => true,
            'middlewares_decorated_40.inner' => true,
            'middlewares_decorated_41.inner' => true,
            'middlewares_decorated_5.inner' => true,
            'middlewares_decorated_6.inner' => true,
            'middlewares_decorated_7.inner' => true,
            'middlewares_decorated_8.inner' => true,
            'middlewares_decorated_9.inner' => true,
            'news.cache' => true,
        ];
    }

    protected function createProxy($class, \Closure $factory)
    {
        return $factory();
    }

    /**
     * Gets the public 'B13\Container\Backend\Preview\ContainerPreviewRenderer' shared autowired service.
     *
     * @return \B13\Container\Backend\Preview\ContainerPreviewRenderer
     */
    protected static function getContainerPreviewRendererService($container)
    {
        $container->services['B13\\Container\\Backend\\Preview\\ContainerPreviewRenderer'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Backend\Preview\ContainerPreviewRenderer::class, ($container->services['B13\\Container\\Tca\\Registry'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Tca\Registry::class)), ($container->services['B13\\Container\\Domain\\Factory\\PageView\\Backend\\ContainerFactory'] ?? self::getContainerFactory2Service($container)), ($container->services['B13\\Container\\ContentDefender\\ContainerColumnConfigurationService'] ?? self::getContainerColumnConfigurationServiceService($container)), ($container->services['B13\\Container\\Domain\\Service\\ContainerService'] ?? self::getContainerServiceService($container)));

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('B13\\Container\\Backend\\Preview\\ContainerPreviewRenderer'));

        return $instance;
    }

    /**
     * Gets the public 'B13\Container\Command\DeleteChildrenWithNonExistingParentCommand' shared autowired service.
     *
     * @return \B13\Container\Command\DeleteChildrenWithNonExistingParentCommand
     */
    protected static function getDeleteChildrenWithNonExistingParentCommandService($container)
    {
        $container->services['B13\\Container\\Command\\DeleteChildrenWithNonExistingParentCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Command\DeleteChildrenWithNonExistingParentCommand::class, ($container->services['B13\\Container\\Integrity\\Integrity'] ?? self::getIntegrityService($container)), ($container->services['B13\\Container\\Integrity\\IntegrityFix'] ?? self::getIntegrityFixService($container)));

        $instance->setName('container:deleteChildrenWithNonExistingParent');
        $instance->setDescription('delete all child records with a non existing parent record (they are displayed as unsued)');

        return $instance;
    }

    /**
     * Gets the public 'B13\Container\Command\DeleteChildrenWithWrongPidCommand' shared autowired service.
     *
     * @return \B13\Container\Command\DeleteChildrenWithWrongPidCommand
     */
    protected static function getDeleteChildrenWithWrongPidCommandService($container)
    {
        $container->services['B13\\Container\\Command\\DeleteChildrenWithWrongPidCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Command\DeleteChildrenWithWrongPidCommand::class, ($container->services['B13\\Container\\Integrity\\Integrity'] ?? self::getIntegrityService($container)), ($container->services['B13\\Container\\Integrity\\IntegrityFix'] ?? self::getIntegrityFixService($container)));

        $instance->setName('container:deleteChildrenWithWrongPid');
        $instance->setDescription('delete all child records with pid neq containers pid');

        return $instance;
    }

    /**
     * Gets the public 'B13\Container\Command\FixContainerParentForConnectedModeCommand' shared autowired service.
     *
     * @return \B13\Container\Command\FixContainerParentForConnectedModeCommand
     */
    protected static function getFixContainerParentForConnectedModeCommandService($container)
    {
        $container->services['B13\\Container\\Command\\FixContainerParentForConnectedModeCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Command\FixContainerParentForConnectedModeCommand::class, ($container->services['B13\\Container\\Integrity\\Integrity'] ?? self::getIntegrityService($container)), ($container->services['B13\\Container\\Integrity\\IntegrityFix'] ?? self::getIntegrityFixService($container)));

        $instance->setName('container:fixContainerParentForConnectedMode');
        $instance->setDescription('tx_container_parent of children in connected mode should point to default language container');

        return $instance;
    }

    /**
     * Gets the public 'B13\Container\Command\FixLanguageModeCommand' shared autowired service.
     *
     * @return \B13\Container\Command\FixLanguageModeCommand
     */
    protected static function getFixLanguageModeCommandService($container)
    {
        $container->services['B13\\Container\\Command\\FixLanguageModeCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Command\FixLanguageModeCommand::class, ($container->services['B13\\Container\\Integrity\\Integrity'] ?? self::getIntegrityService($container)), ($container->services['B13\\Container\\Integrity\\IntegrityFix'] ?? self::getIntegrityFixService($container)));

        $instance->setName('container:fixLanguageMode');
        $instance->setDescription('connect children of connected container if possible, else disconnect container');

        return $instance;
    }

    /**
     * Gets the public 'B13\Container\Command\IntegrityCommand' shared autowired service.
     *
     * @return \B13\Container\Command\IntegrityCommand
     */
    protected static function getIntegrityCommandService($container)
    {
        $container->services['B13\\Container\\Command\\IntegrityCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Command\IntegrityCommand::class, ($container->services['B13\\Container\\Integrity\\Integrity'] ?? self::getIntegrityService($container)));

        $instance->setName('container:integrity');
        $instance->setDescription('Checks integrity of containers');

        return $instance;
    }

    /**
     * Gets the public 'B13\Container\Command\SortingCommand' shared autowired service.
     *
     * @return \B13\Container\Command\SortingCommand
     */
    protected static function getSortingCommandService($container)
    {
        $container->services['B13\\Container\\Command\\SortingCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Command\SortingCommand::class, ($container->services['B13\\Container\\Integrity\\Sorting'] ?? self::getSortingService($container)));

        $instance->setName('container:sorting');
        $instance->setDescription('Resort Content Elements');

        return $instance;
    }

    /**
     * Gets the public 'B13\Container\Command\SortingInPageCommand' shared autowired service.
     *
     * @return \B13\Container\Command\SortingInPageCommand
     */
    protected static function getSortingInPageCommandService($container)
    {
        $container->services['B13\\Container\\Command\\SortingInPageCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Command\SortingInPageCommand::class, ($container->services['B13\\Container\\Integrity\\SortingInPage'] ?? self::getSortingInPageService($container)));

        $instance->setName('container:sorting-in-page');
        $instance->setDescription('Resort Content Elements');

        return $instance;
    }

    /**
     * Gets the public 'B13\Container\ContentDefender\ContainerColumnConfigurationService' shared autowired service.
     *
     * @return \B13\Container\ContentDefender\ContainerColumnConfigurationService
     */
    protected static function getContainerColumnConfigurationServiceService($container)
    {
        return $container->services['B13\\Container\\ContentDefender\\ContainerColumnConfigurationService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\ContentDefender\ContainerColumnConfigurationService::class, ($container->services['B13\\Container\\Domain\\Factory\\ContainerFactory'] ?? self::getContainerFactoryService($container)), ($container->services['B13\\Container\\Tca\\Registry'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Tca\Registry::class)));
    }

    /**
     * Gets the public 'B13\Container\ContentDefender\Hooks\ColumnConfigurationManipulationHook' shared autowired service.
     *
     * @return \B13\Container\ContentDefender\Hooks\ColumnConfigurationManipulationHook
     */
    protected static function getColumnConfigurationManipulationHookService($container)
    {
        return $container->services['B13\\Container\\ContentDefender\\Hooks\\ColumnConfigurationManipulationHook'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\ContentDefender\Hooks\ColumnConfigurationManipulationHook::class);
    }

    /**
     * Gets the public 'B13\Container\DataProcessing\ContainerProcessor' shared autowired service.
     *
     * @return \B13\Container\DataProcessing\ContainerProcessor
     */
    protected static function getContainerProcessorService($container)
    {
        return $container->services['B13\\Container\\DataProcessing\\ContainerProcessor'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\DataProcessing\ContainerProcessor::class, ($container->services['B13\\Container\\Domain\\Factory\\PageView\\Frontend\\ContainerFactory'] ?? self::getContainerFactory4Service($container)), ($container->services['TYPO3\\CMS\\Frontend\\ContentObject\\ContentDataProcessor'] ?? self::getContentDataProcessorService($container)));
    }

    /**
     * Gets the public 'B13\Container\Domain\Factory\ContainerFactory' shared autowired service.
     *
     * @return \B13\Container\Domain\Factory\ContainerFactory
     */
    protected static function getContainerFactoryService($container)
    {
        return $container->services['B13\\Container\\Domain\\Factory\\ContainerFactory'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Domain\Factory\ContainerFactory::class, ($container->services['B13\\Container\\Domain\\Factory\\Database'] ?? self::getDatabaseService($container)), ($container->services['B13\\Container\\Tca\\Registry'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Tca\Registry::class)), ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)));
    }

    /**
     * Gets the public 'B13\Container\Domain\Factory\Database' shared autowired service.
     *
     * @return \B13\Container\Domain\Factory\Database
     */
    protected static function getDatabaseService($container)
    {
        return $container->services['B13\\Container\\Domain\\Factory\\Database'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Domain\Factory\Database::class, ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)));
    }

    /**
     * Gets the public 'B13\Container\Domain\Factory\PageView\Backend\ContainerFactory' shared autowired service.
     *
     * @return \B13\Container\Domain\Factory\PageView\Backend\ContainerFactory
     */
    protected static function getContainerFactory2Service($container)
    {
        $a = ($container->services['B13\\Container\\Domain\\Factory\\Database'] ?? self::getDatabaseService($container));
        $b = ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container));

        return $container->services['B13\\Container\\Domain\\Factory\\PageView\\Backend\\ContainerFactory'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Domain\Factory\PageView\Backend\ContainerFactory::class, $a, ($container->services['B13\\Container\\Tca\\Registry'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Tca\Registry::class)), $b, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Domain\Factory\PageView\Backend\ContentStorage::class, $a, $b));
    }

    /**
     * Gets the public 'B13\Container\Domain\Factory\PageView\ContainerFactory' shared autowired service.
     *
     * @return \B13\Container\Domain\Factory\PageView\ContainerFactory
     */
    protected static function getContainerFactory3Service($container)
    {
        return $container->services['B13\\Container\\Domain\\Factory\\PageView\\ContainerFactory'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Domain\Factory\PageView\ContainerFactory::class, ($container->services['B13\\Container\\Domain\\Factory\\Database'] ?? self::getDatabaseService($container)), ($container->services['B13\\Container\\Tca\\Registry'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Tca\Registry::class)), ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)));
    }

    /**
     * Gets the public 'B13\Container\Domain\Factory\PageView\Frontend\ContainerFactory' shared autowired service.
     *
     * @return \B13\Container\Domain\Factory\PageView\Frontend\ContainerFactory
     */
    protected static function getContainerFactory4Service($container)
    {
        $a = ($container->services['B13\\Container\\Domain\\Factory\\Database'] ?? self::getDatabaseService($container));
        $b = ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container));

        return $container->services['B13\\Container\\Domain\\Factory\\PageView\\Frontend\\ContainerFactory'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Domain\Factory\PageView\Frontend\ContainerFactory::class, $a, ($container->services['B13\\Container\\Tca\\Registry'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Tca\Registry::class)), $b, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Domain\Factory\PageView\Frontend\ContentStorage::class, $a, $b, ($container->privates['TYPO3\\CMS\\Core\\Domain\\Repository\\PageRepository'] ?? self::getPageRepositoryService($container))));
    }

    /**
     * Gets the public 'B13\Container\Domain\Service\ContainerService' shared autowired service.
     *
     * @return \B13\Container\Domain\Service\ContainerService
     */
    protected static function getContainerServiceService($container)
    {
        return $container->services['B13\\Container\\Domain\\Service\\ContainerService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Domain\Service\ContainerService::class, ($container->services['B13\\Container\\Tca\\Registry'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Tca\Registry::class)), ($container->services['B13\\Container\\Domain\\Factory\\ContainerFactory'] ?? self::getContainerFactoryService($container)));
    }

    /**
     * Gets the public 'B13\Container\Hooks\Datahandler\CommandMapAfterFinishHook' shared autowired service.
     *
     * @return \B13\Container\Hooks\Datahandler\CommandMapAfterFinishHook
     */
    protected static function getCommandMapAfterFinishHookService($container)
    {
        return $container->services['B13\\Container\\Hooks\\Datahandler\\CommandMapAfterFinishHook'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Hooks\Datahandler\CommandMapAfterFinishHook::class, ($container->services['B13\\Container\\Hooks\\Datahandler\\Database'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Hooks\Datahandler\Database::class)));
    }

    /**
     * Gets the public 'B13\Container\Hooks\Datahandler\CommandMapBeforeStartHook' shared autowired service.
     *
     * @return \B13\Container\Hooks\Datahandler\CommandMapBeforeStartHook
     */
    protected static function getCommandMapBeforeStartHookService($container)
    {
        return $container->services['B13\\Container\\Hooks\\Datahandler\\CommandMapBeforeStartHook'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Hooks\Datahandler\CommandMapBeforeStartHook::class, ($container->services['B13\\Container\\Domain\\Factory\\ContainerFactory'] ?? self::getContainerFactoryService($container)), ($container->services['B13\\Container\\Tca\\Registry'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Tca\Registry::class)), ($container->services['B13\\Container\\Hooks\\Datahandler\\Database'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Hooks\Datahandler\Database::class)), ($container->services['B13\\Container\\Domain\\Service\\ContainerService'] ?? self::getContainerServiceService($container)));
    }

    /**
     * Gets the public 'B13\Container\Hooks\Datahandler\CommandMapPostProcessingHook' shared autowired service.
     *
     * @return \B13\Container\Hooks\Datahandler\CommandMapPostProcessingHook
     */
    protected static function getCommandMapPostProcessingHookService($container)
    {
        return $container->services['B13\\Container\\Hooks\\Datahandler\\CommandMapPostProcessingHook'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Hooks\Datahandler\CommandMapPostProcessingHook::class, ($container->services['B13\\Container\\Domain\\Factory\\ContainerFactory'] ?? self::getContainerFactoryService($container)));
    }

    /**
     * Gets the public 'B13\Container\Hooks\Datahandler\Database' shared autowired service.
     *
     * @return \B13\Container\Hooks\Datahandler\Database
     */
    protected static function getDatabase2Service($container)
    {
        return $container->services['B13\\Container\\Hooks\\Datahandler\\Database'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Hooks\Datahandler\Database::class);
    }

    /**
     * Gets the public 'B13\Container\Hooks\Datahandler\DatahandlerProcess' shared autowired service.
     *
     * @return \B13\Container\Hooks\Datahandler\DatahandlerProcess
     */
    protected static function getDatahandlerProcessService($container)
    {
        return $container->services['B13\\Container\\Hooks\\Datahandler\\DatahandlerProcess'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Hooks\Datahandler\DatahandlerProcess::class);
    }

    /**
     * Gets the public 'B13\Container\Hooks\Datahandler\DatamapBeforeStartHook' shared autowired service.
     *
     * @return \B13\Container\Hooks\Datahandler\DatamapBeforeStartHook
     */
    protected static function getDatamapBeforeStartHookService($container)
    {
        return $container->services['B13\\Container\\Hooks\\Datahandler\\DatamapBeforeStartHook'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Hooks\Datahandler\DatamapBeforeStartHook::class, ($container->services['B13\\Container\\Domain\\Factory\\ContainerFactory'] ?? self::getContainerFactoryService($container)), ($container->services['B13\\Container\\Hooks\\Datahandler\\Database'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Hooks\Datahandler\Database::class)), ($container->services['B13\\Container\\Tca\\Registry'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Tca\Registry::class)), ($container->services['B13\\Container\\Domain\\Service\\ContainerService'] ?? self::getContainerServiceService($container)));
    }

    /**
     * Gets the public 'B13\Container\Hooks\Datahandler\DatamapPreProcessFieldArrayHook' shared autowired service.
     *
     * @return \B13\Container\Hooks\Datahandler\DatamapPreProcessFieldArrayHook
     */
    protected static function getDatamapPreProcessFieldArrayHookService($container)
    {
        return $container->services['B13\\Container\\Hooks\\Datahandler\\DatamapPreProcessFieldArrayHook'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Hooks\Datahandler\DatamapPreProcessFieldArrayHook::class, ($container->services['B13\\Container\\Domain\\Factory\\ContainerFactory'] ?? self::getContainerFactoryService($container)), ($container->services['B13\\Container\\Hooks\\Datahandler\\Database'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Hooks\Datahandler\Database::class)), ($container->services['B13\\Container\\Tca\\Registry'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Tca\Registry::class)), ($container->services['B13\\Container\\Domain\\Service\\ContainerService'] ?? self::getContainerServiceService($container)));
    }

    /**
     * Gets the public 'B13\Container\Hooks\Datahandler\DeleteHook' shared autowired service.
     *
     * @return \B13\Container\Hooks\Datahandler\DeleteHook
     */
    protected static function getDeleteHookService($container)
    {
        return $container->services['B13\\Container\\Hooks\\Datahandler\\DeleteHook'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Hooks\Datahandler\DeleteHook::class, ($container->services['B13\\Container\\Domain\\Factory\\ContainerFactory'] ?? self::getContainerFactoryService($container)));
    }

    /**
     * Gets the public 'B13\Container\Hooks\TableConfigurationPostProcessing' shared autowired service.
     *
     * @return \B13\Container\Hooks\TableConfigurationPostProcessing
     */
    protected static function getTableConfigurationPostProcessingService($container)
    {
        return $container->services['B13\\Container\\Hooks\\TableConfigurationPostProcessing'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Hooks\TableConfigurationPostProcessing::class);
    }

    /**
     * Gets the public 'B13\Container\Hooks\UsedRecords' shared autowired service.
     *
     * @return \B13\Container\Hooks\UsedRecords
     */
    protected static function getUsedRecordsService($container)
    {
        return $container->services['B13\\Container\\Hooks\\UsedRecords'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Hooks\UsedRecords::class, ($container->services['B13\\Container\\Domain\\Factory\\PageView\\Backend\\ContainerFactory'] ?? self::getContainerFactory2Service($container)), ($container->services['B13\\Container\\Tca\\Registry'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Tca\Registry::class)));
    }

    /**
     * Gets the public 'B13\Container\Integrity\Database' shared autowired service.
     *
     * @return \B13\Container\Integrity\Database
     */
    protected static function getDatabase3Service($container)
    {
        return $container->services['B13\\Container\\Integrity\\Database'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Integrity\Database::class);
    }

    /**
     * Gets the public 'B13\Container\Integrity\Integrity' shared autowired service.
     *
     * @return \B13\Container\Integrity\Integrity
     */
    protected static function getIntegrityService($container)
    {
        return $container->services['B13\\Container\\Integrity\\Integrity'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Integrity\Integrity::class, ($container->services['B13\\Container\\Integrity\\Database'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Integrity\Database::class)), ($container->services['B13\\Container\\Tca\\Registry'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Tca\Registry::class)));
    }

    /**
     * Gets the public 'B13\Container\Integrity\IntegrityFix' shared autowired service.
     *
     * @return \B13\Container\Integrity\IntegrityFix
     */
    protected static function getIntegrityFixService($container)
    {
        return $container->services['B13\\Container\\Integrity\\IntegrityFix'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Integrity\IntegrityFix::class, ($container->services['B13\\Container\\Integrity\\Database'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Integrity\Database::class)), ($container->services['B13\\Container\\Tca\\Registry'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Tca\Registry::class)));
    }

    /**
     * Gets the public 'B13\Container\Integrity\Sorting' shared autowired service.
     *
     * @return \B13\Container\Integrity\Sorting
     */
    protected static function getSortingService($container)
    {
        return $container->services['B13\\Container\\Integrity\\Sorting'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Integrity\Sorting::class, ($container->services['B13\\Container\\Integrity\\Database'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Integrity\Database::class)), ($container->services['B13\\Container\\Tca\\Registry'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Tca\Registry::class)), ($container->services['B13\\Container\\Domain\\Factory\\ContainerFactory'] ?? self::getContainerFactoryService($container)), ($container->services['B13\\Container\\Domain\\Service\\ContainerService'] ?? self::getContainerServiceService($container)));
    }

    /**
     * Gets the public 'B13\Container\Integrity\SortingInPage' shared autowired service.
     *
     * @return \B13\Container\Integrity\SortingInPage
     */
    protected static function getSortingInPageService($container)
    {
        return $container->services['B13\\Container\\Integrity\\SortingInPage'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Integrity\SortingInPage::class, ($container->services['B13\\Container\\Integrity\\Database'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Integrity\Database::class)), ($container->services['B13\\Container\\Tca\\Registry'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Tca\Registry::class)), ($container->services['B13\\Container\\Domain\\Factory\\ContainerFactory'] ?? self::getContainerFactoryService($container)), ($container->services['B13\\Container\\Domain\\Service\\ContainerService'] ?? self::getContainerServiceService($container)));
    }

    /**
     * Gets the public 'B13\Container\Listener\BootCompleted' shared autowired service.
     *
     * @return \B13\Container\Listener\BootCompleted
     */
    protected static function getBootCompletedService($container)
    {
        return $container->services['B13\\Container\\Listener\\BootCompleted'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Listener\BootCompleted::class, ($container->services['B13\\Container\\Tca\\Registry'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Tca\Registry::class)));
    }

    /**
     * Gets the public 'B13\Container\Listener\ContentUsedOnPage' shared autowired service.
     *
     * @return \B13\Container\Listener\ContentUsedOnPage
     */
    protected static function getContentUsedOnPageService($container)
    {
        return $container->services['B13\\Container\\Listener\\ContentUsedOnPage'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Listener\ContentUsedOnPage::class, ($container->services['B13\\Container\\Domain\\Factory\\PageView\\Backend\\ContainerFactory'] ?? self::getContainerFactory2Service($container)), ($container->services['B13\\Container\\Tca\\Registry'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Tca\Registry::class)));
    }

    /**
     * Gets the public 'B13\Container\Listener\ModifyNewContentElementWizardItems' shared autowired service.
     *
     * @return \B13\Container\Listener\ModifyNewContentElementWizardItems
     */
    protected static function getModifyNewContentElementWizardItemsService($container)
    {
        return $container->services['B13\\Container\\Listener\\ModifyNewContentElementWizardItems'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Listener\ModifyNewContentElementWizardItems::class);
    }

    /**
     * Gets the public 'B13\Container\Listener\PageTsConfig' shared autowired service.
     *
     * @return \B13\Container\Listener\PageTsConfig
     */
    protected static function getPageTsConfigService($container)
    {
        return $container->services['B13\\Container\\Listener\\PageTsConfig'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Listener\PageTsConfig::class, ($container->services['B13\\Container\\Tca\\Registry'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Tca\Registry::class)));
    }

    /**
     * Gets the public 'B13\Container\Listener\RecordSummaryForLocalization' shared autowired service.
     *
     * @return \B13\Container\Listener\RecordSummaryForLocalization
     */
    protected static function getRecordSummaryForLocalizationService($container)
    {
        return $container->services['B13\\Container\\Listener\\RecordSummaryForLocalization'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Listener\RecordSummaryForLocalization::class, ($container->services['B13\\Container\\Service\\RecordLocalizeSummaryModifier'] ?? self::getRecordLocalizeSummaryModifierService($container)));
    }

    /**
     * Gets the public 'B13\Container\Service\RecordLocalizeSummaryModifier' shared autowired service.
     *
     * @return \B13\Container\Service\RecordLocalizeSummaryModifier
     */
    protected static function getRecordLocalizeSummaryModifierService($container)
    {
        return $container->services['B13\\Container\\Service\\RecordLocalizeSummaryModifier'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Service\RecordLocalizeSummaryModifier::class, ($container->services['B13\\Container\\Tca\\Registry'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Tca\Registry::class)));
    }

    /**
     * Gets the public 'B13\Container\Tca\ItemProcFunc' shared autowired service.
     *
     * @return \B13\Container\Tca\ItemProcFunc
     */
    protected static function getItemProcFuncService($container)
    {
        return $container->services['B13\\Container\\Tca\\ItemProcFunc'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Tca\ItemProcFunc::class, ($container->services['B13\\Container\\Domain\\Factory\\ContainerFactory'] ?? self::getContainerFactoryService($container)), ($container->services['B13\\Container\\Tca\\Registry'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Tca\Registry::class)), ($container->services['TYPO3\\CMS\\Backend\\View\\BackendLayoutView'] ?? self::getBackendLayoutViewService($container)));
    }

    /**
     * Gets the public 'B13\Container\Tca\Registry' shared autowired service.
     *
     * @return \B13\Container\Tca\Registry
     */
    protected static function getRegistryService($container)
    {
        return $container->services['B13\\Container\\Tca\\Registry'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Tca\Registry::class);
    }

    /**
     * Gets the public 'B13\Container\Updates\ContainerDeleteChildrenWithWrongPid' shared autowired service.
     *
     * @return \B13\Container\Updates\ContainerDeleteChildrenWithWrongPid
     */
    protected static function getContainerDeleteChildrenWithWrongPidService($container)
    {
        return $container->services['B13\\Container\\Updates\\ContainerDeleteChildrenWithWrongPid'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Updates\ContainerDeleteChildrenWithWrongPid::class, ($container->services['B13\\Container\\Integrity\\Integrity'] ?? self::getIntegrityService($container)), ($container->services['B13\\Container\\Integrity\\IntegrityFix'] ?? self::getIntegrityFixService($container)));
    }

    /**
     * Gets the public 'B13\Container\Updates\ContainerMigrateSorting' shared autowired service.
     *
     * @return \B13\Container\Updates\ContainerMigrateSorting
     */
    protected static function getContainerMigrateSortingService($container)
    {
        return $container->services['B13\\Container\\Updates\\ContainerMigrateSorting'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\Updates\ContainerMigrateSorting::class, ($container->services['B13\\Container\\Integrity\\Sorting'] ?? self::getSortingService($container)));
    }

    /**
     * Gets the public 'B13\Container\ViewHelpers\DrawChildrenViewHelper' autowired service.
     *
     * @return \B13\Container\ViewHelpers\DrawChildrenViewHelper
     */
    protected static function getDrawChildrenViewHelperService($container)
    {
        $container->factories['B13\\Container\\ViewHelpers\\DrawChildrenViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\ViewHelpers\DrawChildrenViewHelper::class);
        };

        return $container->factories['B13\\Container\\ViewHelpers\\DrawChildrenViewHelper']($container);
    }

    /**
     * Gets the public 'B13\Container\View\ContainerLayoutView' autowired service.
     *
     * @return \B13\Container\View\ContainerLayoutView
     */
    protected static function getContainerLayoutViewService($container)
    {
        $container->factories['B13\\Container\\View\\ContainerLayoutView'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\B13\Container\View\ContainerLayoutView::class);
        };

        return $container->factories['B13\\Container\\View\\ContainerLayoutView']($container);
    }

    /**
     * Gets the public 'Blueways\BwFocuspointImages\Form\Wizard\FocusPointWizard' shared autowired service.
     *
     * @return \Blueways\BwFocuspointImages\Form\Wizard\FocusPointWizard
     */
    protected static function getFocusPointWizardService($container)
    {
        return $container->services['Blueways\\BwFocuspointImages\\Form\\Wizard\\FocusPointWizard'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\Blueways\BwFocuspointImages\Form\Wizard\FocusPointWizard::class, ($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
    }

    /**
     * Gets the public 'Blueways\BwFocuspointImages\Utility\HelperUtility' shared autowired service.
     *
     * @return \Blueways\BwFocuspointImages\Utility\HelperUtility
     */
    protected static function getHelperUtilityService($container)
    {
        return $container->services['Blueways\\BwFocuspointImages\\Utility\\HelperUtility'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\Blueways\BwFocuspointImages\Utility\HelperUtility::class, ($container->services['TYPO3\\CMS\\Core\\TypoScript\\TypoScriptService'] ?? self::getTypoScriptServiceService($container)), ($container->services['TYPO3\\CMS\\Core\\LinkHandling\\LinkService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\LinkHandling\LinkService::class)), ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->privates['TYPO3\\CMS\\Core\\LinkHandling\\TypoLinkCodecService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\LinkHandling\TypoLinkCodecService::class)));
    }

    /**
     * Gets the public 'GeorgRinger\News\Backend\RecordList\NewsDatabaseRecordList' shared autowired service.
     *
     * @return \GeorgRinger\News\Backend\RecordList\NewsDatabaseRecordList
     */
    protected static function getNewsDatabaseRecordListService($container)
    {
        return $container->services['GeorgRinger\\News\\Backend\\RecordList\\NewsDatabaseRecordList'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Backend\RecordList\NewsDatabaseRecordList::class, ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->privates['TYPO3\\CMS\\Backend\\Configuration\\TranslationConfigurationProvider'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Configuration\TranslationConfigurationProvider::class)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)));
    }

    /**
     * Gets the public 'GeorgRinger\News\Command\ProxyClassRebuildCommand' shared autowired service.
     *
     * @return \GeorgRinger\News\Command\ProxyClassRebuildCommand
     */
    protected static function getProxyClassRebuildCommandService($container)
    {
        $container->services['GeorgRinger\\News\\Command\\ProxyClassRebuildCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Command\ProxyClassRebuildCommand::class);

        $instance->setName('news:rebuildProxyClasses');
        $instance->setDescription('Rebuild the proxy classes used to extend EXT:news');

        return $instance;
    }

    /**
     * Gets the public 'GeorgRinger\News\Controller\AdministrationController' autowired service.
     *
     * @return \GeorgRinger\News\Controller\AdministrationController
     */
    protected static function getAdministrationControllerService($container)
    {
        $container->factories['GeorgRinger\\News\\Controller\\AdministrationController'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Controller\AdministrationController::class, ($container->services['GeorgRinger\\News\\Domain\\Repository\\NewsRepository'] ?? self::getNewsRepositoryService($container)), ($container->services['GeorgRinger\\News\\Domain\\Repository\\CategoryRepository'] ?? self::getCategoryRepositoryService($container)), ($container->services['GeorgRinger\\News\\Domain\\Repository\\TagRepository'] ?? self::getTagRepositoryService($container)));

            $instance->injectAdministrationRepository(($container->privates['GeorgRinger\\News\\Domain\\Repository\\AdministrationRepository'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Domain\Repository\AdministrationRepository::class)));
            $instance->injectResponseFactory(($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)));
            $instance->injectStreamFactory(($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectValidatorResolver(($container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? self::getValidatorResolverService($container)));
            $instance->injectViewResolver(($container->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $container)));
            $instance->injectReflectionService(($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)));
            $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
            $instance->injectMvcPropertyMappingConfigurationService(($container->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? self::getMvcPropertyMappingConfigurationServiceService($container)));
            $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
            $instance->injectPropertyMapper(($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? self::getPropertyMapperService($container)));
            $instance->injectInternalFlashMessageService(($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)));
            $instance->injectInternalExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));

            return $instance;
        };

        return $container->factories['GeorgRinger\\News\\Controller\\AdministrationController']($container);
    }

    /**
     * Gets the public 'GeorgRinger\News\Controller\CategoryController' autowired service.
     *
     * @return \GeorgRinger\News\Controller\CategoryController
     */
    protected static function getCategoryControllerService($container)
    {
        $container->factories['GeorgRinger\\News\\Controller\\CategoryController'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Controller\CategoryController::class, ($container->services['GeorgRinger\\News\\Domain\\Repository\\NewsRepository'] ?? self::getNewsRepositoryService($container)), ($container->services['GeorgRinger\\News\\Domain\\Repository\\CategoryRepository'] ?? self::getCategoryRepositoryService($container)), ($container->services['GeorgRinger\\News\\Domain\\Repository\\TagRepository'] ?? self::getTagRepositoryService($container)));

            $instance->injectResponseFactory(($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)));
            $instance->injectStreamFactory(($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectValidatorResolver(($container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? self::getValidatorResolverService($container)));
            $instance->injectViewResolver(($container->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $container)));
            $instance->injectReflectionService(($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)));
            $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
            $instance->injectMvcPropertyMappingConfigurationService(($container->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? self::getMvcPropertyMappingConfigurationServiceService($container)));
            $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
            $instance->injectPropertyMapper(($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? self::getPropertyMapperService($container)));
            $instance->injectInternalFlashMessageService(($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)));
            $instance->injectInternalExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));

            return $instance;
        };

        return $container->factories['GeorgRinger\\News\\Controller\\CategoryController']($container);
    }

    /**
     * Gets the public 'GeorgRinger\News\Controller\NewsBaseController' autowired service.
     *
     * @return \GeorgRinger\News\Controller\NewsBaseController
     */
    protected static function getNewsBaseControllerService($container)
    {
        $container->factories['GeorgRinger\\News\\Controller\\NewsBaseController'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Controller\NewsBaseController::class);

            $instance->injectResponseFactory(($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)));
            $instance->injectStreamFactory(($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectValidatorResolver(($container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? self::getValidatorResolverService($container)));
            $instance->injectViewResolver(($container->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $container)));
            $instance->injectReflectionService(($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)));
            $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
            $instance->injectMvcPropertyMappingConfigurationService(($container->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? self::getMvcPropertyMappingConfigurationServiceService($container)));
            $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
            $instance->injectPropertyMapper(($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? self::getPropertyMapperService($container)));
            $instance->injectInternalFlashMessageService(($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)));
            $instance->injectInternalExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));

            return $instance;
        };

        return $container->factories['GeorgRinger\\News\\Controller\\NewsBaseController']($container);
    }

    /**
     * Gets the public 'GeorgRinger\News\Controller\NewsController' autowired service.
     *
     * @return \GeorgRinger\News\Controller\NewsController
     */
    protected static function getNewsControllerService($container)
    {
        $container->factories['GeorgRinger\\News\\Controller\\NewsController'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Controller\NewsController::class, ($container->services['GeorgRinger\\News\\Domain\\Repository\\NewsRepository'] ?? self::getNewsRepositoryService($container)), ($container->services['GeorgRinger\\News\\Domain\\Repository\\CategoryRepository'] ?? self::getCategoryRepositoryService($container)), ($container->services['GeorgRinger\\News\\Domain\\Repository\\TagRepository'] ?? self::getTagRepositoryService($container)));

            $instance->injectResponseFactory(($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)));
            $instance->injectStreamFactory(($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectValidatorResolver(($container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? self::getValidatorResolverService($container)));
            $instance->injectViewResolver(($container->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $container)));
            $instance->injectReflectionService(($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)));
            $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
            $instance->injectMvcPropertyMappingConfigurationService(($container->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? self::getMvcPropertyMappingConfigurationServiceService($container)));
            $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
            $instance->injectPropertyMapper(($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? self::getPropertyMapperService($container)));
            $instance->injectInternalFlashMessageService(($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)));
            $instance->injectInternalExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));

            return $instance;
        };

        return $container->factories['GeorgRinger\\News\\Controller\\NewsController']($container);
    }

    /**
     * Gets the public 'GeorgRinger\News\Controller\TagController' autowired service.
     *
     * @return \GeorgRinger\News\Controller\TagController
     */
    protected static function getTagControllerService($container)
    {
        $container->factories['GeorgRinger\\News\\Controller\\TagController'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Controller\TagController::class, ($container->services['GeorgRinger\\News\\Domain\\Repository\\NewsRepository'] ?? self::getNewsRepositoryService($container)), ($container->services['GeorgRinger\\News\\Domain\\Repository\\CategoryRepository'] ?? self::getCategoryRepositoryService($container)), ($container->services['GeorgRinger\\News\\Domain\\Repository\\TagRepository'] ?? self::getTagRepositoryService($container)));

            $instance->injectResponseFactory(($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)));
            $instance->injectStreamFactory(($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectValidatorResolver(($container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? self::getValidatorResolverService($container)));
            $instance->injectViewResolver(($container->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $container)));
            $instance->injectReflectionService(($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)));
            $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
            $instance->injectMvcPropertyMappingConfigurationService(($container->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? self::getMvcPropertyMappingConfigurationServiceService($container)));
            $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
            $instance->injectPropertyMapper(($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? self::getPropertyMapperService($container)));
            $instance->injectInternalFlashMessageService(($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)));
            $instance->injectInternalExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));

            return $instance;
        };

        return $container->factories['GeorgRinger\\News\\Controller\\TagController']($container);
    }

    /**
     * Gets the public 'GeorgRinger\News\Domain\Repository\CategoryRepository' shared autowired service.
     *
     * @return \GeorgRinger\News\Domain\Repository\CategoryRepository
     */
    protected static function getCategoryRepositoryService($container)
    {
        $container->services['GeorgRinger\\News\\Domain\\Repository\\CategoryRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Domain\Repository\CategoryRepository::class);

        $instance->injectStorageBackend(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Storage\\Typo3DbBackend'] ?? self::getTypo3DbBackendService($container)));
        $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

        return $instance;
    }

    /**
     * Gets the public 'GeorgRinger\News\Domain\Repository\FileRepository' shared autowired service.
     *
     * @return \GeorgRinger\News\Domain\Repository\FileRepository
     */
    protected static function getFileRepositoryService($container)
    {
        $container->services['GeorgRinger\\News\\Domain\\Repository\\FileRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Domain\Repository\FileRepository::class);

        $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

        return $instance;
    }

    /**
     * Gets the public 'GeorgRinger\News\Domain\Repository\LinkRepository' shared autowired service.
     *
     * @return \GeorgRinger\News\Domain\Repository\LinkRepository
     */
    protected static function getLinkRepositoryService($container)
    {
        $container->services['GeorgRinger\\News\\Domain\\Repository\\LinkRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Domain\Repository\LinkRepository::class);

        $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

        return $instance;
    }

    /**
     * Gets the public 'GeorgRinger\News\Domain\Repository\MediaRepository' shared autowired service.
     *
     * @return \GeorgRinger\News\Domain\Repository\MediaRepository
     */
    protected static function getMediaRepositoryService($container)
    {
        $container->services['GeorgRinger\\News\\Domain\\Repository\\MediaRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Domain\Repository\MediaRepository::class);

        $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

        return $instance;
    }

    /**
     * Gets the public 'GeorgRinger\News\Domain\Repository\NewsDefaultRepository' shared autowired service.
     *
     * @return \GeorgRinger\News\Domain\Repository\NewsDefaultRepository
     */
    protected static function getNewsDefaultRepositoryService($container)
    {
        $container->services['GeorgRinger\\News\\Domain\\Repository\\NewsDefaultRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Domain\Repository\NewsDefaultRepository::class);

        $instance->injectStorageBackend(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Storage\\Typo3DbBackend'] ?? self::getTypo3DbBackendService($container)));
        $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

        return $instance;
    }

    /**
     * Gets the public 'GeorgRinger\News\Domain\Repository\NewsRepository' shared autowired service.
     *
     * @return \GeorgRinger\News\Domain\Repository\NewsRepository
     */
    protected static function getNewsRepositoryService($container)
    {
        $container->services['GeorgRinger\\News\\Domain\\Repository\\NewsRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Domain\Repository\NewsRepository::class);

        $instance->injectStorageBackend(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Storage\\Typo3DbBackend'] ?? self::getTypo3DbBackendService($container)));
        $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

        return $instance;
    }

    /**
     * Gets the public 'GeorgRinger\News\Domain\Repository\TagRepository' shared autowired service.
     *
     * @return \GeorgRinger\News\Domain\Repository\TagRepository
     */
    protected static function getTagRepositoryService($container)
    {
        $container->services['GeorgRinger\\News\\Domain\\Repository\\TagRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Domain\Repository\TagRepository::class);

        $instance->injectStorageBackend(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Storage\\Typo3DbBackend'] ?? self::getTypo3DbBackendService($container)));
        $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

        return $instance;
    }

    /**
     * Gets the public 'GeorgRinger\News\Domain\Repository\TtContentRepository' shared autowired service.
     *
     * @return \GeorgRinger\News\Domain\Repository\TtContentRepository
     */
    protected static function getTtContentRepositoryService($container)
    {
        $container->services['GeorgRinger\\News\\Domain\\Repository\\TtContentRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Domain\Repository\TtContentRepository::class);

        $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

        return $instance;
    }

    /**
     * Gets the public 'GeorgRinger\News\Domain\Service\NewsImportService' shared autowired service.
     *
     * @return \GeorgRinger\News\Domain\Service\NewsImportService
     */
    protected static function getNewsImportServiceService($container)
    {
        $container->services['GeorgRinger\\News\\Domain\\Service\\NewsImportService'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Domain\Service\NewsImportService::class, ($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)), ($container->services['GeorgRinger\\News\\Domain\\Repository\\CategoryRepository'] ?? self::getCategoryRepositoryService($container)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->services['GeorgRinger\\News\\Domain\\Repository\\NewsRepository'] ?? self::getNewsRepositoryService($container)), ($container->services['GeorgRinger\\News\\Domain\\Repository\\TtContentRepository'] ?? self::getTtContentRepositoryService($container)));

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('GeorgRinger\\News\\Domain\\Service\\NewsImportService'));

        return $instance;
    }

    /**
     * Gets the public 'GeorgRinger\News\Event\Listener\ModifyDatabaseQueryForContentEventListener' shared autowired service.
     *
     * @return \GeorgRinger\News\Event\Listener\ModifyDatabaseQueryForContentEventListener
     */
    protected static function getModifyDatabaseQueryForContentEventListenerService($container)
    {
        return $container->services['GeorgRinger\\News\\Event\\Listener\\ModifyDatabaseQueryForContentEventListener'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Event\Listener\ModifyDatabaseQueryForContentEventListener::class);
    }

    /**
     * Gets the public 'GeorgRinger\News\Event\Listener\ModifyDatabaseQueryForRecordListingEventListener' shared autowired service.
     *
     * @return \GeorgRinger\News\Event\Listener\ModifyDatabaseQueryForRecordListingEventListener
     */
    protected static function getModifyDatabaseQueryForRecordListingEventListenerService($container)
    {
        return $container->services['GeorgRinger\\News\\Event\\Listener\\ModifyDatabaseQueryForRecordListingEventListener'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Event\Listener\ModifyDatabaseQueryForRecordListingEventListener::class);
    }

    /**
     * Gets the public 'GeorgRinger\News\Event\Listener\ModifyFileReferenceControlsEventListener' shared autowired service.
     *
     * @return \GeorgRinger\News\Event\Listener\ModifyFileReferenceControlsEventListener
     */
    protected static function getModifyFileReferenceControlsEventListenerService($container)
    {
        return $container->services['GeorgRinger\\News\\Event\\Listener\\ModifyFileReferenceControlsEventListener'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Event\Listener\ModifyFileReferenceControlsEventListener::class);
    }

    /**
     * Gets the public 'GeorgRinger\News\Hooks\Backend\RecordListQueryHook' shared autowired service.
     *
     * @return \GeorgRinger\News\Hooks\Backend\RecordListQueryHook
     */
    protected static function getRecordListQueryHookService($container)
    {
        return $container->services['GeorgRinger\\News\\Hooks\\Backend\\RecordListQueryHook'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Hooks\Backend\RecordListQueryHook::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Backend\RecordList\RecordListConstraint::class));
    }

    /**
     * Gets the public 'GeorgRinger\News\Hooks\DataHandlerHook' shared autowired service.
     *
     * @return \GeorgRinger\News\Hooks\DataHandlerHook
     */
    protected static function getDataHandlerHookService($container)
    {
        return $container->services['GeorgRinger\\News\\Hooks\\DataHandlerHook'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Hooks\DataHandlerHook::class);
    }

    /**
     * Gets the public 'GeorgRinger\News\Hooks\ItemsProcFunc' shared autowired service.
     *
     * @return \GeorgRinger\News\Hooks\ItemsProcFunc
     */
    protected static function getItemsProcFuncService($container)
    {
        return $container->services['GeorgRinger\\News\\Hooks\\ItemsProcFunc'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Hooks\ItemsProcFunc::class, ($container->services['GeorgRinger\\News\\Utility\\TemplateLayout'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Utility\TemplateLayout::class)));
    }

    /**
     * Gets the public 'GeorgRinger\News\Hooks\PluginPreviewRenderer' shared autowired service.
     *
     * @return \GeorgRinger\News\Hooks\PluginPreviewRenderer
     */
    protected static function getPluginPreviewRendererService($container)
    {
        $container->services['GeorgRinger\\News\\Hooks\\PluginPreviewRenderer'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Hooks\PluginPreviewRenderer::class);

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('GeorgRinger\\News\\Hooks\\PluginPreviewRenderer'));

        return $instance;
    }

    /**
     * Gets the public 'GeorgRinger\News\Seo\HrefLangEvent' shared autowired service.
     *
     * @return \GeorgRinger\News\Seo\HrefLangEvent
     */
    protected static function getHrefLangEventService($container)
    {
        $a = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer::class, NULL, $container);
        $a->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer'));

        return $container->services['GeorgRinger\\News\\Seo\\HrefLangEvent'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Seo\HrefLangEvent::class, $a, (\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\DataProcessing\LanguageMenuProcessor::class)));
    }

    /**
     * Gets the public 'GeorgRinger\News\Seo\NewsTitleProvider' shared autowired service.
     *
     * @return \GeorgRinger\News\Seo\NewsTitleProvider
     */
    protected static function getNewsTitleProviderService($container)
    {
        return $container->services['GeorgRinger\\News\\Seo\\NewsTitleProvider'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Seo\NewsTitleProvider::class);
    }

    /**
     * Gets the public 'GeorgRinger\News\Updates\NewsSlugUpdater' shared autowired service.
     *
     * @return \GeorgRinger\News\Updates\NewsSlugUpdater
     */
    protected static function getNewsSlugUpdaterService($container)
    {
        return $container->services['GeorgRinger\\News\\Updates\\NewsSlugUpdater'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Updates\NewsSlugUpdater::class, ($container->privates['GeorgRinger\\News\\Service\\SlugService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Service\SlugService::class)));
    }

    /**
     * Gets the public 'GeorgRinger\News\Updates\RealurlAliasNewsSlugUpdater' shared autowired service.
     *
     * @return \GeorgRinger\News\Updates\RealurlAliasNewsSlugUpdater
     */
    protected static function getRealurlAliasNewsSlugUpdaterService($container)
    {
        return $container->services['GeorgRinger\\News\\Updates\\RealurlAliasNewsSlugUpdater'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Updates\RealurlAliasNewsSlugUpdater::class, ($container->privates['GeorgRinger\\News\\Service\\SlugService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Service\SlugService::class)));
    }

    /**
     * Gets the public 'GeorgRinger\News\Utility\ClassCacheManager' shared autowired service.
     *
     * @return \GeorgRinger\News\Utility\ClassCacheManager
     */
    protected static function getClassCacheManagerService($container)
    {
        return $container->services['GeorgRinger\\News\\Utility\\ClassCacheManager'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Utility\ClassCacheManager::class, ($container->privates['news.cache'] ?? self::getNews_CacheService($container)));
    }

    /**
     * Gets the public 'GeorgRinger\News\Utility\ClassLoader' shared autowired service.
     *
     * @return \GeorgRinger\News\Utility\ClassLoader
     */
    protected static function getClassLoaderService($container)
    {
        return $container->services['GeorgRinger\\News\\Utility\\ClassLoader'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Utility\ClassLoader::class, ($container->privates['news.cache'] ?? self::getNews_CacheService($container)), ($container->services['GeorgRinger\\News\\Utility\\ClassCacheManager'] ?? self::getClassCacheManagerService($container)));
    }

    /**
     * Gets the public 'GeorgRinger\News\Utility\TemplateLayout' shared autowired service.
     *
     * @return \GeorgRinger\News\Utility\TemplateLayout
     */
    protected static function getTemplateLayoutService($container)
    {
        return $container->services['GeorgRinger\\News\\Utility\\TemplateLayout'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Utility\TemplateLayout::class);
    }

    /**
     * Gets the public 'GeorgRinger\News\ViewHelpers\Be\IsCheckboxActiveViewHelper' autowired service.
     *
     * @return \GeorgRinger\News\ViewHelpers\Be\IsCheckboxActiveViewHelper
     */
    protected static function getIsCheckboxActiveViewHelperService($container)
    {
        $container->factories['GeorgRinger\\News\\ViewHelpers\\Be\\IsCheckboxActiveViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\ViewHelpers\Be\IsCheckboxActiveViewHelper::class);
        };

        return $container->factories['GeorgRinger\\News\\ViewHelpers\\Be\\IsCheckboxActiveViewHelper']($container);
    }

    /**
     * Gets the public 'GeorgRinger\News\ViewHelpers\Category\CountViewHelper' autowired service.
     *
     * @return \GeorgRinger\News\ViewHelpers\Category\CountViewHelper
     */
    protected static function getCountViewHelperService($container)
    {
        $container->factories['GeorgRinger\\News\\ViewHelpers\\Category\\CountViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\ViewHelpers\Category\CountViewHelper::class);
        };

        return $container->factories['GeorgRinger\\News\\ViewHelpers\\Category\\CountViewHelper']($container);
    }

    /**
     * Gets the public 'GeorgRinger\News\ViewHelpers\Check\PageAvailableInLanguageViewHelper' autowired service.
     *
     * @return \GeorgRinger\News\ViewHelpers\Check\PageAvailableInLanguageViewHelper
     */
    protected static function getPageAvailableInLanguageViewHelperService($container)
    {
        $container->factories['GeorgRinger\\News\\ViewHelpers\\Check\\PageAvailableInLanguageViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\ViewHelpers\Check\PageAvailableInLanguageViewHelper::class);
        };

        return $container->factories['GeorgRinger\\News\\ViewHelpers\\Check\\PageAvailableInLanguageViewHelper']($container);
    }

    /**
     * Gets the public 'GeorgRinger\News\ViewHelpers\ExcludeDisplayedNewsViewHelper' autowired service.
     *
     * @return \GeorgRinger\News\ViewHelpers\ExcludeDisplayedNewsViewHelper
     */
    protected static function getExcludeDisplayedNewsViewHelperService($container)
    {
        $container->factories['GeorgRinger\\News\\ViewHelpers\\ExcludeDisplayedNewsViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\ViewHelpers\ExcludeDisplayedNewsViewHelper::class);
        };

        return $container->factories['GeorgRinger\\News\\ViewHelpers\\ExcludeDisplayedNewsViewHelper']($container);
    }

    /**
     * Gets the public 'GeorgRinger\News\ViewHelpers\ExtensionLoadedViewHelper' autowired service.
     *
     * @return \GeorgRinger\News\ViewHelpers\ExtensionLoadedViewHelper
     */
    protected static function getExtensionLoadedViewHelperService($container)
    {
        $container->factories['GeorgRinger\\News\\ViewHelpers\\ExtensionLoadedViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\ViewHelpers\ExtensionLoadedViewHelper::class);
        };

        return $container->factories['GeorgRinger\\News\\ViewHelpers\\ExtensionLoadedViewHelper']($container);
    }

    /**
     * Gets the public 'GeorgRinger\News\ViewHelpers\Format\NothingViewHelper' autowired service.
     *
     * @return \GeorgRinger\News\ViewHelpers\Format\NothingViewHelper
     */
    protected static function getNothingViewHelperService($container)
    {
        $container->factories['GeorgRinger\\News\\ViewHelpers\\Format\\NothingViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\ViewHelpers\Format\NothingViewHelper::class);
        };

        return $container->factories['GeorgRinger\\News\\ViewHelpers\\Format\\NothingViewHelper']($container);
    }

    /**
     * Gets the public 'GeorgRinger\News\ViewHelpers\HeaderDataViewHelper' autowired service.
     *
     * @return \GeorgRinger\News\ViewHelpers\HeaderDataViewHelper
     */
    protected static function getHeaderDataViewHelperService($container)
    {
        $container->factories['GeorgRinger\\News\\ViewHelpers\\HeaderDataViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\ViewHelpers\HeaderDataViewHelper::class);
        };

        return $container->factories['GeorgRinger\\News\\ViewHelpers\\HeaderDataViewHelper']($container);
    }

    /**
     * Gets the public 'GeorgRinger\News\ViewHelpers\IfIsActiveViewHelper' autowired service.
     *
     * @return \GeorgRinger\News\ViewHelpers\IfIsActiveViewHelper
     */
    protected static function getIfIsActiveViewHelperService($container)
    {
        $container->factories['GeorgRinger\\News\\ViewHelpers\\IfIsActiveViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\ViewHelpers\IfIsActiveViewHelper::class);
        };

        return $container->factories['GeorgRinger\\News\\ViewHelpers\\IfIsActiveViewHelper']($container);
    }

    /**
     * Gets the public 'GeorgRinger\News\ViewHelpers\ImageSizeViewHelper' autowired service.
     *
     * @return \GeorgRinger\News\ViewHelpers\ImageSizeViewHelper
     */
    protected static function getImageSizeViewHelperService($container)
    {
        $container->factories['GeorgRinger\\News\\ViewHelpers\\ImageSizeViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\ViewHelpers\ImageSizeViewHelper::class);
        };

        return $container->factories['GeorgRinger\\News\\ViewHelpers\\ImageSizeViewHelper']($container);
    }

    /**
     * Gets the public 'GeorgRinger\News\ViewHelpers\Iterator\ChunkViewHelper' autowired service.
     *
     * @return \GeorgRinger\News\ViewHelpers\Iterator\ChunkViewHelper
     */
    protected static function getChunkViewHelperService($container)
    {
        $container->factories['GeorgRinger\\News\\ViewHelpers\\Iterator\\ChunkViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\ViewHelpers\Iterator\ChunkViewHelper::class);
        };

        return $container->factories['GeorgRinger\\News\\ViewHelpers\\Iterator\\ChunkViewHelper']($container);
    }

    /**
     * Gets the public 'GeorgRinger\News\ViewHelpers\LinkViewHelper' autowired service.
     *
     * @return \GeorgRinger\News\ViewHelpers\LinkViewHelper
     */
    protected static function getLinkViewHelperService($container)
    {
        $container->factories['GeorgRinger\\News\\ViewHelpers\\LinkViewHelper'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\ViewHelpers\LinkViewHelper::class);

            $instance->injectSettingsService(($container->privates['GeorgRinger\\News\\Service\\SettingsService'] ?? self::getSettingsServiceService($container)));

            return $instance;
        };

        return $container->factories['GeorgRinger\\News\\ViewHelpers\\LinkViewHelper']($container);
    }

    /**
     * Gets the public 'GeorgRinger\News\ViewHelpers\MetaTagViewHelper' autowired service.
     *
     * @return \GeorgRinger\News\ViewHelpers\MetaTagViewHelper
     */
    protected static function getMetaTagViewHelperService($container)
    {
        $container->factories['GeorgRinger\\News\\ViewHelpers\\MetaTagViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\ViewHelpers\MetaTagViewHelper::class);
        };

        return $container->factories['GeorgRinger\\News\\ViewHelpers\\MetaTagViewHelper']($container);
    }

    /**
     * Gets the public 'GeorgRinger\News\ViewHelpers\MultiCategoryLink\ArgumentsViewHelper' autowired service.
     *
     * @return \GeorgRinger\News\ViewHelpers\MultiCategoryLink\ArgumentsViewHelper
     */
    protected static function getArgumentsViewHelperService($container)
    {
        $container->factories['GeorgRinger\\News\\ViewHelpers\\MultiCategoryLink\\ArgumentsViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\ViewHelpers\MultiCategoryLink\ArgumentsViewHelper::class);
        };

        return $container->factories['GeorgRinger\\News\\ViewHelpers\\MultiCategoryLink\\ArgumentsViewHelper']($container);
    }

    /**
     * Gets the public 'GeorgRinger\News\ViewHelpers\MultiCategoryLink\IsCategoryActiveViewHelper' autowired service.
     *
     * @return \GeorgRinger\News\ViewHelpers\MultiCategoryLink\IsCategoryActiveViewHelper
     */
    protected static function getIsCategoryActiveViewHelperService($container)
    {
        $container->factories['GeorgRinger\\News\\ViewHelpers\\MultiCategoryLink\\IsCategoryActiveViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\ViewHelpers\MultiCategoryLink\IsCategoryActiveViewHelper::class);
        };

        return $container->factories['GeorgRinger\\News\\ViewHelpers\\MultiCategoryLink\\IsCategoryActiveViewHelper']($container);
    }

    /**
     * Gets the public 'GeorgRinger\News\ViewHelpers\PaginateBodytextViewHelper' autowired service.
     *
     * @return \GeorgRinger\News\ViewHelpers\PaginateBodytextViewHelper
     */
    protected static function getPaginateBodytextViewHelperService($container)
    {
        $container->factories['GeorgRinger\\News\\ViewHelpers\\PaginateBodytextViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\ViewHelpers\PaginateBodytextViewHelper::class);
        };

        return $container->factories['GeorgRinger\\News\\ViewHelpers\\PaginateBodytextViewHelper']($container);
    }

    /**
     * Gets the public 'GeorgRinger\News\ViewHelpers\RemoveMediaTagsViewHelper' autowired service.
     *
     * @return \GeorgRinger\News\ViewHelpers\RemoveMediaTagsViewHelper
     */
    protected static function getRemoveMediaTagsViewHelperService($container)
    {
        $container->factories['GeorgRinger\\News\\ViewHelpers\\RemoveMediaTagsViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\ViewHelpers\RemoveMediaTagsViewHelper::class);
        };

        return $container->factories['GeorgRinger\\News\\ViewHelpers\\RemoveMediaTagsViewHelper']($container);
    }

    /**
     * Gets the public 'GeorgRinger\News\ViewHelpers\RenderMediaViewHelper' autowired service.
     *
     * @return \GeorgRinger\News\ViewHelpers\RenderMediaViewHelper
     */
    protected static function getRenderMediaViewHelperService($container)
    {
        $container->factories['GeorgRinger\\News\\ViewHelpers\\RenderMediaViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\ViewHelpers\RenderMediaViewHelper::class);
        };

        return $container->factories['GeorgRinger\\News\\ViewHelpers\\RenderMediaViewHelper']($container);
    }

    /**
     * Gets the public 'GeorgRinger\News\ViewHelpers\SearchFormViewHelper' autowired service.
     *
     * @return \GeorgRinger\News\ViewHelpers\SearchFormViewHelper
     */
    protected static function getSearchFormViewHelperService($container)
    {
        $container->factories['GeorgRinger\\News\\ViewHelpers\\SearchFormViewHelper'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\ViewHelpers\SearchFormViewHelper::class);

            $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
            $instance->injectMvcPropertyMappingConfigurationService(($container->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? self::getMvcPropertyMappingConfigurationServiceService($container)));
            $instance->injectExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));
            $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

            return $instance;
        };

        return $container->factories['GeorgRinger\\News\\ViewHelpers\\SearchFormViewHelper']($container);
    }

    /**
     * Gets the public 'GeorgRinger\News\ViewHelpers\SimplePrevNextViewHelper' autowired service.
     *
     * @return \GeorgRinger\News\ViewHelpers\SimplePrevNextViewHelper
     */
    protected static function getSimplePrevNextViewHelperService($container)
    {
        $container->factories['GeorgRinger\\News\\ViewHelpers\\SimplePrevNextViewHelper'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\ViewHelpers\SimplePrevNextViewHelper::class);

            $instance->injectDataMapper(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper::class, ($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)), ($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\QueryObjectModelFactory'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Qom\QueryObjectModelFactory::class)), ($container->privates['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Session'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Session::class)), ($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\DataMapFactory'] ?? self::getDataMapFactoryService($container)), ($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryFactory'] ?? self::getQueryFactoryService($container)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->privates['Doctrine\\Instantiator\\InstantiatorInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\Doctrine\Instantiator\Instantiator::class))));

            return $instance;
        };

        return $container->factories['GeorgRinger\\News\\ViewHelpers\\SimplePrevNextViewHelper']($container);
    }

    /**
     * Gets the public 'GeorgRinger\News\ViewHelpers\Tag\CountViewHelper' autowired service.
     *
     * @return \GeorgRinger\News\ViewHelpers\Tag\CountViewHelper
     */
    protected static function getCountViewHelper2Service($container)
    {
        $container->factories['GeorgRinger\\News\\ViewHelpers\\Tag\\CountViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\ViewHelpers\Tag\CountViewHelper::class);
        };

        return $container->factories['GeorgRinger\\News\\ViewHelpers\\Tag\\CountViewHelper']($container);
    }

    /**
     * Gets the public 'GeorgRinger\News\ViewHelpers\TargetLinkViewHelper' autowired service.
     *
     * @return \GeorgRinger\News\ViewHelpers\TargetLinkViewHelper
     */
    protected static function getTargetLinkViewHelperService($container)
    {
        $container->factories['GeorgRinger\\News\\ViewHelpers\\TargetLinkViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\ViewHelpers\TargetLinkViewHelper::class);
        };

        return $container->factories['GeorgRinger\\News\\ViewHelpers\\TargetLinkViewHelper']($container);
    }

    /**
     * Gets the public 'GeorgRinger\News\ViewHelpers\TitleTagViewHelper' autowired service.
     *
     * @return \GeorgRinger\News\ViewHelpers\TitleTagViewHelper
     */
    protected static function getTitleTagViewHelperService($container)
    {
        $container->factories['GeorgRinger\\News\\ViewHelpers\\TitleTagViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\ViewHelpers\TitleTagViewHelper::class);
        };

        return $container->factories['GeorgRinger\\News\\ViewHelpers\\TitleTagViewHelper']($container);
    }

    /**
     * Gets the public 'GeorgRinger\News\Xclass\ExtensionServiceXclassed' shared autowired service.
     *
     * @return \GeorgRinger\News\Xclass\ExtensionServiceXclassed
     */
    protected static function getExtensionServiceXclassedService($container)
    {
        $container->services['GeorgRinger\\News\\Xclass\\ExtensionServiceXclassed'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Xclass\ExtensionServiceXclassed::class);

        $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));

        return $instance;
    }

    /**
     * Gets the public 'HDNET\Calendarize\Command\CleanupCommandController' shared autowired service.
     *
     * @return \HDNET\Calendarize\Command\CleanupCommandController
     */
    protected static function getCleanupCommandControllerService($container)
    {
        $a = ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container));

        $container->services['HDNET\\Calendarize\\Command\\CleanupCommandController'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Command\CleanupCommandController::class, ($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)), $a, ($container->privates['HDNET\\Calendarize\\Domain\\Repository\\RawIndexRepository'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Domain\Repository\RawIndexRepository::class)), ($container->services['HDNET\\Calendarize\\Service\\IndexerService'] ?? self::getIndexerServiceService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper::class, ($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)), ($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\QueryObjectModelFactory'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Qom\QueryObjectModelFactory::class)), ($container->privates['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Session'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Session::class)), ($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\DataMapFactory'] ?? self::getDataMapFactoryService($container)), ($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryFactory'] ?? self::getQueryFactoryService($container)), $a, ($container->privates['Doctrine\\Instantiator\\InstantiatorInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\Doctrine\Instantiator\Instantiator::class))));

        $instance->setName('calendarize:cleanup');
        $instance->setDescription('Remove outdated events to keep a small footprint');

        return $instance;
    }

    /**
     * Gets the public 'HDNET\Calendarize\Command\ImportCommandController' shared autowired service.
     *
     * @return \HDNET\Calendarize\Command\ImportCommandController
     */
    protected static function getImportCommandControllerService($container)
    {
        $container->services['HDNET\\Calendarize\\Command\\ImportCommandController'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Command\ImportCommandController::class, ($container->services['HDNET\\Calendarize\\Service\\Ical\\VObjectICalService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Service\Ical\VObjectICalService::class)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->services['HDNET\\Calendarize\\Service\\IndexerService'] ?? self::getIndexerServiceService($container)), ($container->services['HDNET\\Calendarize\\Service\\Ical\\ICalUrlService'] ?? self::getICalUrlServiceService($container)));

        $instance->setName('calendarize:import');
        $instance->setDescription('Imports a iCalendar ICS into a page ID');

        return $instance;
    }

    /**
     * Gets the public 'HDNET\Calendarize\Command\ReindexCommandController' shared autowired service.
     *
     * @return \HDNET\Calendarize\Command\ReindexCommandController
     */
    protected static function getReindexCommandControllerService($container)
    {
        $container->services['HDNET\\Calendarize\\Command\\ReindexCommandController'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Command\ReindexCommandController::class);

        $instance->setName('calendarize:reindex');
        $instance->setDescription('Reindex all events');

        return $instance;
    }

    /**
     * Gets the public 'HDNET\Calendarize\Controller\BackendController' autowired service.
     *
     * @return \HDNET\Calendarize\Controller\BackendController
     */
    protected static function getBackendControllerService($container)
    {
        $container->factories['HDNET\\Calendarize\\Controller\\BackendController'] = function ($container) {
            $a = ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container));

            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Controller\BackendController::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), $a, ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), ($container->services['TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory'] ?? self::getLanguageServiceFactoryService($container)));

            $instance->injectPluginConfigurationService(($container->services['HDNET\\Calendarize\\Service\\PluginConfigurationService'] ?? self::getPluginConfigurationServiceService($container)));
            $instance->injectIndexRepository(($container->services['HDNET\\Calendarize\\Domain\\Repository\\IndexRepository'] ?? self::getIndexRepositoryService($container)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectResponseFactory(($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)));
            $instance->injectStreamFactory(($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
            $instance->injectValidatorResolver(($container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? self::getValidatorResolverService($container)));
            $instance->injectViewResolver(($container->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $container)));
            $instance->injectReflectionService(($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)));
            $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
            $instance->injectMvcPropertyMappingConfigurationService(($container->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? self::getMvcPropertyMappingConfigurationServiceService($container)));
            $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
            $instance->injectPropertyMapper(($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? self::getPropertyMapperService($container)));
            $instance->injectInternalFlashMessageService($a);
            $instance->injectInternalExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));

            return $instance;
        };

        return $container->factories['HDNET\\Calendarize\\Controller\\BackendController']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\Controller\BookingController' autowired service.
     *
     * @return \HDNET\Calendarize\Controller\BookingController
     */
    protected static function getBookingControllerService($container)
    {
        $container->factories['HDNET\\Calendarize\\Controller\\BookingController'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Controller\BookingController::class);

            $instance->injectPluginConfigurationService(($container->services['HDNET\\Calendarize\\Service\\PluginConfigurationService'] ?? self::getPluginConfigurationServiceService($container)));
            $instance->injectIndexRepository(($container->services['HDNET\\Calendarize\\Domain\\Repository\\IndexRepository'] ?? self::getIndexRepositoryService($container)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectResponseFactory(($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)));
            $instance->injectStreamFactory(($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
            $instance->injectValidatorResolver(($container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? self::getValidatorResolverService($container)));
            $instance->injectViewResolver(($container->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $container)));
            $instance->injectReflectionService(($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)));
            $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
            $instance->injectMvcPropertyMappingConfigurationService(($container->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? self::getMvcPropertyMappingConfigurationServiceService($container)));
            $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
            $instance->injectPropertyMapper(($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? self::getPropertyMapperService($container)));
            $instance->injectInternalFlashMessageService(($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)));
            $instance->injectInternalExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));

            return $instance;
        };

        return $container->factories['HDNET\\Calendarize\\Controller\\BookingController']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\Controller\CalendarController' autowired service.
     *
     * @return \HDNET\Calendarize\Controller\CalendarController
     */
    protected static function getCalendarControllerService($container)
    {
        $container->factories['HDNET\\Calendarize\\Controller\\CalendarController'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Controller\CalendarController::class);

            $instance->injectPluginConfigurationService(($container->services['HDNET\\Calendarize\\Service\\PluginConfigurationService'] ?? self::getPluginConfigurationServiceService($container)));
            $instance->injectIndexRepository(($container->services['HDNET\\Calendarize\\Domain\\Repository\\IndexRepository'] ?? self::getIndexRepositoryService($container)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectResponseFactory(($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)));
            $instance->injectStreamFactory(($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
            $instance->injectValidatorResolver(($container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? self::getValidatorResolverService($container)));
            $instance->injectViewResolver(($container->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $container)));
            $instance->injectReflectionService(($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)));
            $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
            $instance->injectMvcPropertyMappingConfigurationService(($container->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? self::getMvcPropertyMappingConfigurationServiceService($container)));
            $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
            $instance->injectPropertyMapper(($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? self::getPropertyMapperService($container)));
            $instance->injectInternalFlashMessageService(($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)));
            $instance->injectInternalExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));

            return $instance;
        };

        return $container->factories['HDNET\\Calendarize\\Controller\\CalendarController']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\Domain\Repository\AbstractRepository' shared autowired service.
     *
     * @return \HDNET\Calendarize\Domain\Repository\AbstractRepository
     */
    protected static function getAbstractRepositoryService($container)
    {
        $container->services['HDNET\\Calendarize\\Domain\\Repository\\AbstractRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Domain\Repository\AbstractRepository::class);

        $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

        return $instance;
    }

    /**
     * Gets the public 'HDNET\Calendarize\Domain\Repository\CategoryRepository' shared autowired service.
     *
     * @return \HDNET\Calendarize\Domain\Repository\CategoryRepository
     */
    protected static function getCategoryRepository2Service($container)
    {
        $container->services['HDNET\\Calendarize\\Domain\\Repository\\CategoryRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Domain\Repository\CategoryRepository::class);

        $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

        return $instance;
    }

    /**
     * Gets the public 'HDNET\Calendarize\Domain\Repository\ConfigurationGroupRepository' shared autowired service.
     *
     * @return \HDNET\Calendarize\Domain\Repository\ConfigurationGroupRepository
     */
    protected static function getConfigurationGroupRepositoryService($container)
    {
        $container->services['HDNET\\Calendarize\\Domain\\Repository\\ConfigurationGroupRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Domain\Repository\ConfigurationGroupRepository::class);

        $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

        return $instance;
    }

    /**
     * Gets the public 'HDNET\Calendarize\Domain\Repository\ConfigurationRepository' shared autowired service.
     *
     * @return \HDNET\Calendarize\Domain\Repository\ConfigurationRepository
     */
    protected static function getConfigurationRepositoryService($container)
    {
        $container->services['HDNET\\Calendarize\\Domain\\Repository\\ConfigurationRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Domain\Repository\ConfigurationRepository::class);

        $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

        return $instance;
    }

    /**
     * Gets the public 'HDNET\Calendarize\Domain\Repository\EventRepository' shared autowired service.
     *
     * @return \HDNET\Calendarize\Domain\Repository\EventRepository
     */
    protected static function getEventRepositoryService($container)
    {
        $container->services['HDNET\\Calendarize\\Domain\\Repository\\EventRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Domain\Repository\EventRepository::class);

        $instance->injectIndexRepository(($container->services['HDNET\\Calendarize\\Domain\\Repository\\IndexRepository'] ?? self::getIndexRepositoryService($container)));
        $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

        return $instance;
    }

    /**
     * Gets the public 'HDNET\Calendarize\Domain\Repository\IndexRepository' shared autowired service.
     *
     * @return \HDNET\Calendarize\Domain\Repository\IndexRepository
     */
    protected static function getIndexRepositoryService($container)
    {
        $container->services['HDNET\\Calendarize\\Domain\\Repository\\IndexRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Domain\Repository\IndexRepository::class);

        $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
        $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

        return $instance;
    }

    /**
     * Gets the public 'HDNET\Calendarize\EventListener\BookingCountriesListener' shared autowired service.
     *
     * @return \HDNET\Calendarize\EventListener\BookingCountriesListener
     */
    protected static function getBookingCountriesListenerService($container)
    {
        return $container->services['HDNET\\Calendarize\\EventListener\\BookingCountriesListener'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\EventListener\BookingCountriesListener::class);
    }

    /**
     * Gets the public 'HDNET\Calendarize\EventListener\CalendarizeFieldListener' shared autowired service.
     *
     * @return \HDNET\Calendarize\EventListener\CalendarizeFieldListener
     */
    protected static function getCalendarizeFieldListenerService($container)
    {
        return $container->services['HDNET\\Calendarize\\EventListener\\CalendarizeFieldListener'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\EventListener\CalendarizeFieldListener::class);
    }

    /**
     * Gets the public 'HDNET\Calendarize\EventListener\CategoryConstraintEventListener' shared autowired service.
     *
     * @return \HDNET\Calendarize\EventListener\CategoryConstraintEventListener
     */
    protected static function getCategoryConstraintEventListenerService($container)
    {
        return $container->services['HDNET\\Calendarize\\EventListener\\CategoryConstraintEventListener'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\EventListener\CategoryConstraintEventListener::class);
    }

    /**
     * Gets the public 'HDNET\Calendarize\EventListener\CategoryFilterEventListener' shared autowired service.
     *
     * @return \HDNET\Calendarize\EventListener\CategoryFilterEventListener
     */
    protected static function getCategoryFilterEventListenerService($container)
    {
        return $container->services['HDNET\\Calendarize\\EventListener\\CategoryFilterEventListener'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\EventListener\CategoryFilterEventListener::class, ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)), ($container->services['HDNET\\Calendarize\\Domain\\Repository\\CategoryRepository'] ?? self::getCategoryRepository2Service($container)));
    }

    /**
     * Gets the public 'HDNET\Calendarize\EventListener\ImportSingleIcalEventListener' shared autowired service.
     *
     * @return \HDNET\Calendarize\EventListener\ImportSingleIcalEventListener
     */
    protected static function getImportSingleIcalEventListenerService($container)
    {
        return $container->services['HDNET\\Calendarize\\EventListener\\ImportSingleIcalEventListener'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\EventListener\ImportSingleIcalEventListener::class, ($container->services['HDNET\\Calendarize\\Domain\\Repository\\EventRepository'] ?? self::getEventRepositoryService($container)), ($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)), ($container->services['HDNET\\Calendarize\\Service\\EventConfigurationService'] ?? self::getEventConfigurationServiceService($container)));
    }

    /**
     * Gets the public 'HDNET\Calendarize\EventListener\PreviewRenderingEventListener' shared autowired service.
     *
     * @return \HDNET\Calendarize\EventListener\PreviewRenderingEventListener
     */
    protected static function getPreviewRenderingEventListenerService($container)
    {
        return $container->services['HDNET\\Calendarize\\EventListener\\PreviewRenderingEventListener'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\EventListener\PreviewRenderingEventListener::class, ($container->services['HDNET\\Calendarize\\Service\\FlexFormService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Service\FlexFormService::class)), ($container->services['HDNET\\Calendarize\\Service\\ContentElementLayoutService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Service\ContentElementLayoutService::class)), ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)));
    }

    /**
     * Gets the public 'HDNET\Calendarize\EventListener\SearchConstraintEventListener' shared autowired service.
     *
     * @return \HDNET\Calendarize\EventListener\SearchConstraintEventListener
     */
    protected static function getSearchConstraintEventListenerService($container)
    {
        return $container->services['HDNET\\Calendarize\\EventListener\\SearchConstraintEventListener'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\EventListener\SearchConstraintEventListener::class, ($container->services['HDNET\\Calendarize\\Domain\\Repository\\EventRepository'] ?? self::getEventRepositoryService($container)));
    }

    /**
     * Gets the public 'HDNET\Calendarize\Property\TypeConverter\AbstractBookingRequest' shared autowired service.
     *
     * @return \HDNET\Calendarize\Property\TypeConverter\AbstractBookingRequest
     */
    protected static function getAbstractBookingRequestService($container)
    {
        return $container->services['HDNET\\Calendarize\\Property\\TypeConverter\\AbstractBookingRequest'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Property\TypeConverter\AbstractBookingRequest::class);
    }

    /**
     * Gets the public 'HDNET\Calendarize\Seo\CalendarizeTitleProvider' shared autowired service.
     *
     * @return \HDNET\Calendarize\Seo\CalendarizeTitleProvider
     */
    protected static function getCalendarizeTitleProviderService($container)
    {
        return $container->services['HDNET\\Calendarize\\Seo\\CalendarizeTitleProvider'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Seo\CalendarizeTitleProvider::class);
    }

    /**
     * Gets the public 'HDNET\Calendarize\Service\AbstractService' shared autowired service.
     *
     * @return \HDNET\Calendarize\Service\AbstractService
     */
    protected static function getAbstractServiceService($container)
    {
        return $container->services['HDNET\\Calendarize\\Service\\AbstractService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Service\AbstractService::class);
    }

    /**
     * Gets the public 'HDNET\Calendarize\Service\BreadcrumbService' shared autowired service.
     *
     * @return \HDNET\Calendarize\Service\BreadcrumbService
     */
    protected static function getBreadcrumbServiceService($container)
    {
        return $container->services['HDNET\\Calendarize\\Service\\BreadcrumbService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Service\BreadcrumbService::class);
    }

    /**
     * Gets the public 'HDNET\Calendarize\Service\ContentElementLayoutService' shared autowired service.
     *
     * @return \HDNET\Calendarize\Service\ContentElementLayoutService
     */
    protected static function getContentElementLayoutServiceService($container)
    {
        return $container->services['HDNET\\Calendarize\\Service\\ContentElementLayoutService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Service\ContentElementLayoutService::class);
    }

    /**
     * Gets the public 'HDNET\Calendarize\Service\EventConfigurationService' shared autowired service.
     *
     * @return \HDNET\Calendarize\Service\EventConfigurationService
     */
    protected static function getEventConfigurationServiceService($container)
    {
        $container->services['HDNET\\Calendarize\\Service\\EventConfigurationService'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Service\EventConfigurationService::class);

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('HDNET\\Calendarize\\Service\\EventConfigurationService'));

        return $instance;
    }

    /**
     * Gets the public 'HDNET\Calendarize\Service\FlexFormService' shared autowired service.
     *
     * @return \HDNET\Calendarize\Service\FlexFormService
     */
    protected static function getFlexFormServiceService($container)
    {
        return $container->services['HDNET\\Calendarize\\Service\\FlexFormService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Service\FlexFormService::class);
    }

    /**
     * Gets the public 'HDNET\Calendarize\Service\Ical\DissectICalService' shared autowired service.
     *
     * @return \HDNET\Calendarize\Service\Ical\DissectICalService
     */
    protected static function getDissectICalServiceService($container)
    {
        return $container->services['HDNET\\Calendarize\\Service\\Ical\\DissectICalService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Service\Ical\DissectICalService::class);
    }

    /**
     * Gets the public 'HDNET\Calendarize\Service\Ical\ICalUrlService' shared autowired service.
     *
     * @return \HDNET\Calendarize\Service\Ical\ICalUrlService
     */
    protected static function getICalUrlServiceService($container)
    {
        $container->services['HDNET\\Calendarize\\Service\\Ical\\ICalUrlService'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Service\Ical\ICalUrlService::class, ($container->services['TYPO3\\CMS\\Core\\LinkHandling\\LinkService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\LinkHandling\LinkService::class)));

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('HDNET\\Calendarize\\Service\\Ical\\ICalUrlService'));

        return $instance;
    }

    /**
     * Gets the public 'HDNET\Calendarize\Service\Ical\VObjectICalService' shared autowired service.
     *
     * @return \HDNET\Calendarize\Service\Ical\VObjectICalService
     */
    protected static function getVObjectICalServiceService($container)
    {
        return $container->services['HDNET\\Calendarize\\Service\\Ical\\VObjectICalService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Service\Ical\VObjectICalService::class);
    }

    /**
     * Gets the public 'HDNET\Calendarize\Service\IndexPreparationService' shared autowired service.
     *
     * @return \HDNET\Calendarize\Service\IndexPreparationService
     */
    protected static function getIndexPreparationServiceService($container)
    {
        return $container->services['HDNET\\Calendarize\\Service\\IndexPreparationService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Service\IndexPreparationService::class, ($container->services['HDNET\\Calendarize\\Service\\Url\\SlugService'] ?? self::getSlugServiceService($container)));
    }

    /**
     * Gets the public 'HDNET\Calendarize\Service\IndexerService' shared autowired service.
     *
     * @return \HDNET\Calendarize\Service\IndexerService
     */
    protected static function getIndexerServiceService($container)
    {
        $container->services['HDNET\\Calendarize\\Service\\IndexerService'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Service\IndexerService::class, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->services['HDNET\\Calendarize\\Service\\IndexPreparationService'] ?? self::getIndexPreparationServiceService($container)), ($container->services['HDNET\\Calendarize\\Service\\Url\\SlugService'] ?? self::getSlugServiceService($container)), ($container->privates['HDNET\\Calendarize\\Domain\\Repository\\RawIndexRepository'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Domain\Repository\RawIndexRepository::class)));

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('HDNET\\Calendarize\\Service\\IndexerService'));

        return $instance;
    }

    /**
     * Gets the public 'HDNET\Calendarize\Service\PluginConfigurationService' shared autowired service.
     *
     * @return \HDNET\Calendarize\Service\PluginConfigurationService
     */
    protected static function getPluginConfigurationServiceService($container)
    {
        return $container->services['HDNET\\Calendarize\\Service\\PluginConfigurationService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Service\PluginConfigurationService::class, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
    }

    /**
     * Gets the public 'HDNET\Calendarize\Service\RecurrenceService' shared autowired service.
     *
     * @return \HDNET\Calendarize\Service\RecurrenceService
     */
    protected static function getRecurrenceServiceService($container)
    {
        $container->services['HDNET\\Calendarize\\Service\\RecurrenceService'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Service\RecurrenceService::class);

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('HDNET\\Calendarize\\Service\\RecurrenceService'));

        return $instance;
    }

    /**
     * Gets the public 'HDNET\Calendarize\Service\SecondaryTimeTableService' shared autowired service.
     *
     * @return \HDNET\Calendarize\Service\SecondaryTimeTableService
     */
    protected static function getSecondaryTimeTableServiceService($container)
    {
        return $container->services['HDNET\\Calendarize\\Service\\SecondaryTimeTableService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Service\SecondaryTimeTableService::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(RewindableGenerator::class, function () use ($container) {
            yield 0 => ($container->services['HDNET\\Calendarize\\Service\\TimeTable\\Secondary\\ManipulationTimeTable'] ?? self::getManipulationTimeTableService($container));
        }, 1));
    }

    /**
     * Gets the public 'HDNET\Calendarize\Service\TcaInformation' shared autowired service.
     *
     * @return \HDNET\Calendarize\Service\TcaInformation
     */
    protected static function getTcaInformationService($container)
    {
        return $container->services['HDNET\\Calendarize\\Service\\TcaInformation'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Service\TcaInformation::class);
    }

    /**
     * Gets the public 'HDNET\Calendarize\Service\TcaService' shared autowired service.
     *
     * @return \HDNET\Calendarize\Service\TcaService
     */
    protected static function getTcaServiceService($container)
    {
        return $container->services['HDNET\\Calendarize\\Service\\TcaService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Service\TcaService::class);
    }

    /**
     * Gets the public 'HDNET\Calendarize\Service\TimeTableService' shared autowired service.
     *
     * @return \HDNET\Calendarize\Service\TimeTableService
     */
    protected static function getTimeTableServiceService($container)
    {
        return $container->services['HDNET\\Calendarize\\Service\\TimeTableService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Service\TimeTableService::class);
    }

    /**
     * Gets the public 'HDNET\Calendarize\Service\TimeTable\ExternalTimeTable' shared autowired service.
     *
     * @return \HDNET\Calendarize\Service\TimeTable\ExternalTimeTable
     */
    protected static function getExternalTimeTableService($container)
    {
        $container->services['HDNET\\Calendarize\\Service\\TimeTable\\ExternalTimeTable'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Service\TimeTable\ExternalTimeTable::class);

        $instance->injectICalServiceInterface(($container->services['HDNET\\Calendarize\\Service\\Ical\\VObjectICalService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Service\Ical\VObjectICalService::class)));
        $instance->injectICalUrlService(($container->services['HDNET\\Calendarize\\Service\\Ical\\ICalUrlService'] ?? self::getICalUrlServiceService($container)));
        $instance->injectTimeTableService(($container->services['HDNET\\Calendarize\\Service\\TimeTableService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Service\TimeTableService::class)));

        return $instance;
    }

    /**
     * Gets the public 'HDNET\Calendarize\Service\TimeTable\GroupTimeTable' shared autowired service.
     *
     * @return \HDNET\Calendarize\Service\TimeTable\GroupTimeTable
     */
    protected static function getGroupTimeTableService($container)
    {
        $container->services['HDNET\\Calendarize\\Service\\TimeTable\\GroupTimeTable'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Service\TimeTable\GroupTimeTable::class);

        $instance->injectTimeTableService(($container->services['HDNET\\Calendarize\\Service\\TimeTableService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Service\TimeTableService::class)));

        return $instance;
    }

    /**
     * Gets the public 'HDNET\Calendarize\Service\TimeTable\Secondary\ManipulationTimeTable' shared autowired service.
     *
     * @return \HDNET\Calendarize\Service\TimeTable\Secondary\ManipulationTimeTable
     */
    protected static function getManipulationTimeTableService($container)
    {
        $container->services['HDNET\\Calendarize\\Service\\TimeTable\\Secondary\\ManipulationTimeTable'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Service\TimeTable\Secondary\ManipulationTimeTable::class, ($container->services['TYPO3\\CMS\\Core\\Service\\FlexFormService'] ?? self::getFlexFormService2Service($container)));

        $instance->injectTimeTableService(($container->services['HDNET\\Calendarize\\Service\\TimeTableService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Service\TimeTableService::class)));

        return $instance;
    }

    /**
     * Gets the public 'HDNET\Calendarize\Service\TimeTable\TimeTimeTable' shared autowired service.
     *
     * @return \HDNET\Calendarize\Service\TimeTable\TimeTimeTable
     */
    protected static function getTimeTimeTableService($container)
    {
        $container->services['HDNET\\Calendarize\\Service\\TimeTable\\TimeTimeTable'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Service\TimeTable\TimeTimeTable::class);

        $instance->injectTimeTableService(($container->services['HDNET\\Calendarize\\Service\\TimeTableService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Service\TimeTableService::class)));

        return $instance;
    }

    /**
     * Gets the public 'HDNET\Calendarize\Service\Url\SlugService' shared autowired service.
     *
     * @return \HDNET\Calendarize\Service\Url\SlugService
     */
    protected static function getSlugServiceService($container)
    {
        return $container->services['HDNET\\Calendarize\\Service\\Url\\SlugService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Service\Url\SlugService::class, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
    }

    /**
     * Gets the public 'HDNET\Calendarize\Validation\Validator\BookingRequestValidator' autowired service.
     *
     * @return \HDNET\Calendarize\Validation\Validator\BookingRequestValidator
     */
    protected static function getBookingRequestValidatorService($container)
    {
        $container->factories['HDNET\\Calendarize\\Validation\\Validator\\BookingRequestValidator'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Validation\Validator\BookingRequestValidator::class);
        };

        return $container->factories['HDNET\\Calendarize\\Validation\\Validator\\BookingRequestValidator']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\Be\RecordRowViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\Be\RecordRowViewHelper
     */
    protected static function getRecordRowViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\Be\\RecordRowViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\Be\RecordRowViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\Be\\RecordRowViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\DateTime\FormatUtcDateViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\DateTime\FormatUtcDateViewHelper
     */
    protected static function getFormatUtcDateViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\DateTime\\FormatUtcDateViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\DateTime\FormatUtcDateViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\DateTime\\FormatUtcDateViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\DateTime\IndexOnDayViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\DateTime\IndexOnDayViewHelper
     */
    protected static function getIndexOnDayViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\DateTime\\IndexOnDayViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\DateTime\IndexOnDayViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\DateTime\\IndexOnDayViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\DateTime\ModifyViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\DateTime\ModifyViewHelper
     */
    protected static function getModifyViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\DateTime\\ModifyViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\DateTime\ModifyViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\DateTime\\ModifyViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\Format\DateViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\Format\DateViewHelper
     */
    protected static function getDateViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\Format\\DateViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\Format\DateViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\Format\\DateViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\Format\EscapeIcalTextViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\Format\EscapeIcalTextViewHelper
     */
    protected static function getEscapeIcalTextViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\Format\\EscapeIcalTextViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\Format\EscapeIcalTextViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\Format\\EscapeIcalTextViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\Format\LineFoldingViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\Format\LineFoldingViewHelper
     */
    protected static function getLineFoldingViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\Format\\LineFoldingViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\Format\LineFoldingViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\Format\\LineFoldingViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\Format\RemoveBlankLinesViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\Format\RemoveBlankLinesViewHelper
     */
    protected static function getRemoveBlankLinesViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\Format\\RemoveBlankLinesViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\Format\RemoveBlankLinesViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\Format\\RemoveBlankLinesViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\IfDateLowerViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\IfDateLowerViewHelper
     */
    protected static function getIfDateLowerViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\IfDateLowerViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\IfDateLowerViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\IfDateLowerViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\IfDateUpperViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\IfDateUpperViewHelper
     */
    protected static function getIfDateUpperViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\IfDateUpperViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\IfDateUpperViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\IfDateUpperViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\IfExtensionLoadedViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\IfExtensionLoadedViewHelper
     */
    protected static function getIfExtensionLoadedViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\IfExtensionLoadedViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\IfExtensionLoadedViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\IfExtensionLoadedViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\InArrayViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\InArrayViewHelper
     */
    protected static function getInArrayViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\InArrayViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\InArrayViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\InArrayViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\IndexTraversingViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\IndexTraversingViewHelper
     */
    protected static function getIndexTraversingViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\IndexTraversingViewHelper'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\IndexTraversingViewHelper::class);

            $instance->injectIndexRepository(($container->services['HDNET\\Calendarize\\Domain\\Repository\\IndexRepository'] ?? self::getIndexRepositoryService($container)));

            return $instance;
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\IndexTraversingViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\IndicesByObjectViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\IndicesByObjectViewHelper
     */
    protected static function getIndicesByObjectViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\IndicesByObjectViewHelper'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\IndicesByObjectViewHelper::class);

            $instance->injectIndexRepository(($container->services['HDNET\\Calendarize\\Domain\\Repository\\IndexRepository'] ?? self::getIndexRepositoryService($container)));

            return $instance;
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\IndicesByObjectViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\JsQuoteViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\JsQuoteViewHelper
     */
    protected static function getJsQuoteViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\JsQuoteViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\JsQuoteViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\JsQuoteViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\LanguageInformationViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\LanguageInformationViewHelper
     */
    protected static function getLanguageInformationViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\LanguageInformationViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\LanguageInformationViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\LanguageInformationViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\LanguageViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\LanguageViewHelper
     */
    protected static function getLanguageViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\LanguageViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\LanguageViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\LanguageViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\Link\AbstractActionViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\Link\AbstractActionViewHelper
     */
    protected static function getAbstractActionViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\Link\\AbstractActionViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\Link\AbstractActionViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\Link\\AbstractActionViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\Link\BookingViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\Link\BookingViewHelper
     */
    protected static function getBookingViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\Link\\BookingViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\Link\BookingViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\Link\\BookingViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\Link\DayViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\Link\DayViewHelper
     */
    protected static function getDayViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\Link\\DayViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\Link\DayViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\Link\\DayViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\Link\IndexViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\Link\IndexViewHelper
     */
    protected static function getIndexViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\Link\\IndexViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\Link\IndexViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\Link\\IndexViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\Link\ListViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\Link\ListViewHelper
     */
    protected static function getListViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\Link\\ListViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\Link\ListViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\Link\\ListViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\Link\MonthViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\Link\MonthViewHelper
     */
    protected static function getMonthViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\Link\\MonthViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\Link\MonthViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\Link\\MonthViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\Link\QuarterViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\Link\QuarterViewHelper
     */
    protected static function getQuarterViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\Link\\QuarterViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\Link\QuarterViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\Link\\QuarterViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\Link\WeekViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\Link\WeekViewHelper
     */
    protected static function getWeekViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\Link\\WeekViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\Link\WeekViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\Link\\WeekViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\Link\YearViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\Link\YearViewHelper
     */
    protected static function getYearViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\Link\\YearViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\Link\YearViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\Link\\YearViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\Loop\DaysInMonthViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\Loop\DaysInMonthViewHelper
     */
    protected static function getDaysInMonthViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\Loop\\DaysInMonthViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\Loop\DaysInMonthViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\Loop\\DaysInMonthViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\Loop\DaysInWeekViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\Loop\DaysInWeekViewHelper
     */
    protected static function getDaysInWeekViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\Loop\\DaysInWeekViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\Loop\DaysInWeekViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\Loop\\DaysInWeekViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\Loop\MonthsInYearViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\Loop\MonthsInYearViewHelper
     */
    protected static function getMonthsInYearViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\Loop\\MonthsInYearViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\Loop\MonthsInYearViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\Loop\\MonthsInYearViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\Loop\WeeksInMonthViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\Loop\WeeksInMonthViewHelper
     */
    protected static function getWeeksInMonthViewHelperService($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\Loop\\WeeksInMonthViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\Loop\WeeksInMonthViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\Loop\\WeeksInMonthViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\TitleTagViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\TitleTagViewHelper
     */
    protected static function getTitleTagViewHelper2Service($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\TitleTagViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\TitleTagViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\TitleTagViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\Uri\BookingViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\Uri\BookingViewHelper
     */
    protected static function getBookingViewHelper2Service($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\Uri\\BookingViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\Uri\BookingViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\Uri\\BookingViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\Uri\DayViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\Uri\DayViewHelper
     */
    protected static function getDayViewHelper2Service($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\Uri\\DayViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\Uri\DayViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\Uri\\DayViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\Uri\IndexViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\Uri\IndexViewHelper
     */
    protected static function getIndexViewHelper2Service($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\Uri\\IndexViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\Uri\IndexViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\Uri\\IndexViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\Uri\ListViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\Uri\ListViewHelper
     */
    protected static function getListViewHelper2Service($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\Uri\\ListViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\Uri\ListViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\Uri\\ListViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\Uri\MonthViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\Uri\MonthViewHelper
     */
    protected static function getMonthViewHelper2Service($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\Uri\\MonthViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\Uri\MonthViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\Uri\\MonthViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\Uri\QuarterViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\Uri\QuarterViewHelper
     */
    protected static function getQuarterViewHelper2Service($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\Uri\\QuarterViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\Uri\QuarterViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\Uri\\QuarterViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\Uri\WeekViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\Uri\WeekViewHelper
     */
    protected static function getWeekViewHelper2Service($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\Uri\\WeekViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\Uri\WeekViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\Uri\\WeekViewHelper']($container);
    }

    /**
     * Gets the public 'HDNET\Calendarize\ViewHelpers\Uri\YearViewHelper' autowired service.
     *
     * @return \HDNET\Calendarize\ViewHelpers\Uri\YearViewHelper
     */
    protected static function getYearViewHelper2Service($container)
    {
        $container->factories['HDNET\\Calendarize\\ViewHelpers\\Uri\\YearViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\ViewHelpers\Uri\YearViewHelper::class);
        };

        return $container->factories['HDNET\\Calendarize\\ViewHelpers\\Uri\\YearViewHelper']($container);
    }

    /**
     * Gets the public 'Masterminds\HTML5' shared autowired service.
     *
     * @return \Masterminds\HTML5
     */
    protected static function getHTML5Service($container)
    {
        return $container->services['Masterminds\\HTML5'] = \TYPO3\CMS\Core\DependencyInjection\CommonFactory::createHtml5Parser();
    }

    /**
     * Gets the public 'Psr\EventDispatcher\EventDispatcherInterface_decorated_1' shared service.
     *
     * @return \Psr\EventDispatcher\EventDispatcherInterface
     */
    protected static function getEventDispatcherInterfaceDecorated1Service($container)
    {
        return $container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] = \TYPO3\CMS\Core\ServiceProvider::provideFallbackEventDispatcher($container, ($container->services['TYPO3\\CMS\\Adminpanel\\Service\\EventDispatcher'] ?? self::getEventDispatcherService($container)));
    }

    /**
     * Gets the public 'Psr\Http\Client\ClientInterface' shared autowired service.
     *
     * @return \GuzzleHttp\Client
     */
    protected static function getClientInterfaceService($container)
    {
        return $container->services['Psr\\Http\\Client\\ClientInterface'] = ($container->services['TYPO3\\CMS\\Core\\Http\\Client\\GuzzleClientFactory'] ?? self::getGuzzleClientFactoryService($container))->getClient();
    }

    /**
     * Gets the public 'Psr\Http\Message\ResponseFactoryInterface' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Http\ResponseFactory
     */
    protected static function getResponseFactoryInterfaceService($container)
    {
        return $container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class);
    }

    /**
     * Gets the public 'Psr\Http\Message\ServerRequestFactoryInterface' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Http\ServerRequestFactory
     */
    protected static function getServerRequestFactoryInterfaceService($container)
    {
        return $container->services['Psr\\Http\\Message\\ServerRequestFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ServerRequestFactory::class);
    }

    /**
     * Gets the public 'Psr\Http\Message\StreamFactoryInterface' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Http\StreamFactory
     */
    protected static function getStreamFactoryInterfaceService($container)
    {
        return $container->services['Psr\\Http\\Message\\StreamFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class);
    }

    /**
     * Gets the public 'Psr\Http\Message\UploadedFileFactoryInterface' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Http\UploadedFileFactory
     */
    protected static function getUploadedFileFactoryInterfaceService($container)
    {
        return $container->services['Psr\\Http\\Message\\UploadedFileFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\UploadedFileFactory::class);
    }

    /**
     * Gets the public 'Psr\Http\Message\UriFactoryInterface' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Http\UriFactory
     */
    protected static function getUriFactoryInterfaceService($container)
    {
        return $container->services['Psr\\Http\\Message\\UriFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\UriFactory::class);
    }

    /**
     * Gets the public 'Symfony\Component\Console\Command\HelpCommand' shared service.
     *
     * @return \Symfony\Component\Console\Command\HelpCommand
     */
    protected static function getHelpCommandService($container)
    {
        return $container->services['Symfony\\Component\\Console\\Command\\HelpCommand'] = \TYPO3\CMS\Core\ServiceProvider::getHelpCommand($container);
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\Core\Parser\TemplateProcessor\EscapingModifierTemplateProcessor' autowired service.
     *
     * @return \TYPO3Fluid\Fluid\Core\Parser\TemplateProcessor\EscapingModifierTemplateProcessor
     */
    protected static function getEscapingModifierTemplateProcessorService($container)
    {
        $container->factories['TYPO3Fluid\\Fluid\\Core\\Parser\\TemplateProcessor\\EscapingModifierTemplateProcessor'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\Core\Parser\TemplateProcessor\EscapingModifierTemplateProcessor::class);
        };

        return $container->factories['TYPO3Fluid\\Fluid\\Core\\Parser\\TemplateProcessor\\EscapingModifierTemplateProcessor']($container);
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\Core\Parser\TemplateProcessor\NamespaceDetectionTemplateProcessor' autowired service.
     *
     * @return \TYPO3Fluid\Fluid\Core\Parser\TemplateProcessor\NamespaceDetectionTemplateProcessor
     */
    protected static function getNamespaceDetectionTemplateProcessorService($container)
    {
        $container->factories['TYPO3Fluid\\Fluid\\Core\\Parser\\TemplateProcessor\\NamespaceDetectionTemplateProcessor'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\Core\Parser\TemplateProcessor\NamespaceDetectionTemplateProcessor::class);
        };

        return $container->factories['TYPO3Fluid\\Fluid\\Core\\Parser\\TemplateProcessor\\NamespaceDetectionTemplateProcessor']($container);
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\Core\Parser\TemplateProcessor\PassthroughSourceModifierTemplateProcessor' autowired service.
     *
     * @return \TYPO3Fluid\Fluid\Core\Parser\TemplateProcessor\PassthroughSourceModifierTemplateProcessor
     */
    protected static function getPassthroughSourceModifierTemplateProcessorService($container)
    {
        $container->factories['TYPO3Fluid\\Fluid\\Core\\Parser\\TemplateProcessor\\PassthroughSourceModifierTemplateProcessor'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\Core\Parser\TemplateProcessor\PassthroughSourceModifierTemplateProcessor::class);
        };

        return $container->factories['TYPO3Fluid\\Fluid\\Core\\Parser\\TemplateProcessor\\PassthroughSourceModifierTemplateProcessor']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Adminpanel\Controller\AjaxController' shared autowired service.
     *
     * @return \TYPO3\CMS\Adminpanel\Controller\AjaxController
     */
    protected static function getAjaxControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Adminpanel\\Controller\\AjaxController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Controller\AjaxController::class, ($container->services['TYPO3\\CMS\\Adminpanel\\Service\\ConfigurationService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Service\ConfigurationService::class)), ($container->privates['TYPO3\\CMS\\Adminpanel\\Service\\ModuleLoader'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Service\ModuleLoader::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Adminpanel\Controller\MainController' shared autowired service.
     *
     * @return \TYPO3\CMS\Adminpanel\Controller\MainController
     */
    protected static function getMainControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Adminpanel\\Controller\\MainController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Controller\MainController::class, ($container->privates['TYPO3\\CMS\\Adminpanel\\Service\\ModuleLoader'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Service\ModuleLoader::class)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['_early.TYPO3\\CMS\\Core\\Core\\RequestId'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Core\\RequestId', 1)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Adminpanel\Log\InMemoryLogWriter' shared autowired service.
     *
     * @return \TYPO3\CMS\Adminpanel\Log\InMemoryLogWriter
     */
    protected static function getInMemoryLogWriterService($container)
    {
        return $container->services['TYPO3\\CMS\\Adminpanel\\Log\\InMemoryLogWriter'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Log\InMemoryLogWriter::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Adminpanel\Middleware\AdminPanelDataPersister' shared autowired service.
     *
     * @return \TYPO3\CMS\Adminpanel\Middleware\AdminPanelDataPersister
     */
    protected static function getAdminPanelDataPersisterService($container)
    {
        return $container->services['TYPO3\\CMS\\Adminpanel\\Middleware\\AdminPanelDataPersister'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Middleware\AdminPanelDataPersister::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Adminpanel\Middleware\AdminPanelInitiator' shared autowired service.
     *
     * @return \TYPO3\CMS\Adminpanel\Middleware\AdminPanelInitiator
     */
    protected static function getAdminPanelInitiatorService($container)
    {
        return $container->services['TYPO3\\CMS\\Adminpanel\\Middleware\\AdminPanelInitiator'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Middleware\AdminPanelInitiator::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Adminpanel\Middleware\AdminPanelRenderer' shared autowired service.
     *
     * @return \TYPO3\CMS\Adminpanel\Middleware\AdminPanelRenderer
     */
    protected static function getAdminPanelRendererService($container)
    {
        return $container->services['TYPO3\\CMS\\Adminpanel\\Middleware\\AdminPanelRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Middleware\AdminPanelRenderer::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Adminpanel\Middleware\SqlLogging' shared autowired service.
     *
     * @return \TYPO3\CMS\Adminpanel\Middleware\SqlLogging
     */
    protected static function getSqlLoggingService($container)
    {
        return $container->services['TYPO3\\CMS\\Adminpanel\\Middleware\\SqlLogging'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Middleware\SqlLogging::class, ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Adminpanel\Modules\CacheModule' shared autowired service.
     *
     * @return \TYPO3\CMS\Adminpanel\Modules\CacheModule
     */
    protected static function getCacheModuleService($container)
    {
        $container->services['TYPO3\\CMS\\Adminpanel\\Modules\\CacheModule'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Modules\CacheModule::class);

        $instance->injectConfigurationService(($container->services['TYPO3\\CMS\\Adminpanel\\Service\\ConfigurationService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Service\ConfigurationService::class)));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Adminpanel\Modules\DebugModule' shared autowired service.
     *
     * @return \TYPO3\CMS\Adminpanel\Modules\DebugModule
     */
    protected static function getDebugModuleService($container)
    {
        $container->services['TYPO3\\CMS\\Adminpanel\\Modules\\DebugModule'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Modules\DebugModule::class);

        $instance->injectConfigurationService(($container->services['TYPO3\\CMS\\Adminpanel\\Service\\ConfigurationService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Service\ConfigurationService::class)));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Adminpanel\Modules\Debug\Events' shared autowired service.
     *
     * @return \TYPO3\CMS\Adminpanel\Modules\Debug\Events
     */
    protected static function getEventsService($container)
    {
        return $container->services['TYPO3\\CMS\\Adminpanel\\Modules\\Debug\\Events'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Modules\Debug\Events::class, ($container->services['_early.TYPO3\\CMS\\Core\\Core\\RequestId'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Core\\RequestId', 1)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Adminpanel\Modules\Debug\Log' shared autowired service.
     *
     * @return \TYPO3\CMS\Adminpanel\Modules\Debug\Log
     */
    protected static function getLogService($container)
    {
        return $container->services['TYPO3\\CMS\\Adminpanel\\Modules\\Debug\\Log'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Modules\Debug\Log::class, ($container->services['TYPO3\\CMS\\Adminpanel\\Service\\ConfigurationService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Service\ConfigurationService::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Adminpanel\Modules\InfoModule' shared autowired service.
     *
     * @return \TYPO3\CMS\Adminpanel\Modules\InfoModule
     */
    protected static function getInfoModuleService($container)
    {
        $container->services['TYPO3\\CMS\\Adminpanel\\Modules\\InfoModule'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Modules\InfoModule::class);

        $instance->injectConfigurationService(($container->services['TYPO3\\CMS\\Adminpanel\\Service\\ConfigurationService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Service\ConfigurationService::class)));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Adminpanel\Modules\PreviewModule' shared autowired service.
     *
     * @return \TYPO3\CMS\Adminpanel\Modules\PreviewModule
     */
    protected static function getPreviewModuleService($container)
    {
        $container->services['TYPO3\\CMS\\Adminpanel\\Modules\\PreviewModule'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Modules\PreviewModule::class);

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Adminpanel\\Modules\\PreviewModule'));
        $instance->injectCacheManager(($container->services['TYPO3\\CMS\\Core\\Cache\\CacheManager'] ?? self::getCacheManagerService($container)));
        $instance->injectConfigurationService(($container->services['TYPO3\\CMS\\Adminpanel\\Service\\ConfigurationService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Service\ConfigurationService::class)));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Adminpanel\Modules\TsDebugModule' shared autowired service.
     *
     * @return \TYPO3\CMS\Adminpanel\Modules\TsDebugModule
     */
    protected static function getTsDebugModuleService($container)
    {
        $container->services['TYPO3\\CMS\\Adminpanel\\Modules\\TsDebugModule'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Modules\TsDebugModule::class);

        $instance->injectConfigurationService(($container->services['TYPO3\\CMS\\Adminpanel\\Service\\ConfigurationService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Service\ConfigurationService::class)));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Adminpanel\Modules\TsDebug\TypoScriptWaterfall' shared autowired service.
     *
     * @return \TYPO3\CMS\Adminpanel\Modules\TsDebug\TypoScriptWaterfall
     */
    protected static function getTypoScriptWaterfallService($container)
    {
        return $container->services['TYPO3\\CMS\\Adminpanel\\Modules\\TsDebug\\TypoScriptWaterfall'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Modules\TsDebug\TypoScriptWaterfall::class, ($container->services['TYPO3\\CMS\\Adminpanel\\Service\\ConfigurationService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Service\ConfigurationService::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Adminpanel\Service\ConfigurationService' shared autowired service.
     *
     * @return \TYPO3\CMS\Adminpanel\Service\ConfigurationService
     */
    protected static function getConfigurationServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Adminpanel\\Service\\ConfigurationService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Service\ConfigurationService::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Adminpanel\Service\EventDispatcher' shared autowired service.
     *
     * @return \TYPO3\CMS\Adminpanel\Service\EventDispatcher
     */
    protected static function getEventDispatcherService($container)
    {
        return $container->services['TYPO3\\CMS\\Adminpanel\\Service\\EventDispatcher'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Service\EventDispatcher::class, ($container->services['TYPO3\\CMS\\Core\\EventDispatcher\\ListenerProvider_decorated_3'] ?? self::getListenerProviderDecorated3Service($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Adminpanel\ViewHelpers\IsArrayViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Adminpanel\ViewHelpers\IsArrayViewHelper
     */
    protected static function getIsArrayViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Adminpanel\\ViewHelpers\\IsArrayViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\ViewHelpers\IsArrayViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Adminpanel\\ViewHelpers\\IsArrayViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Adminpanel\ViewHelpers\SubModuleRenderViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Adminpanel\ViewHelpers\SubModuleRenderViewHelper
     */
    protected static function getSubModuleRenderViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Adminpanel\\ViewHelpers\\SubModuleRenderViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\ViewHelpers\SubModuleRenderViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Adminpanel\\ViewHelpers\\SubModuleRenderViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Backend\Avatar\Avatar' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Backend\Avatar\Avatar
     */
    protected static function getAvatarService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Backend\\Avatar\\Avatar'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Backend\Avatar\Avatar::class, ($container->privates['cache.runtime'] ?? self::getCache_RuntimeService($container)), ($container->services['TYPO3\\CMS\\Core\\Service\\DependencyOrderingService'] ?? self::getDependencyOrderingServiceService($container)), ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Backend\Shortcut\ShortcutRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Backend\Shortcut\ShortcutRepository
     */
    protected static function getShortcutRepositoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Backend\\Shortcut\\ShortcutRepository'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Backend\Shortcut\ShortcutRepository::class, ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)), ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\Router_decorated_1'] ?? self::getRouterDecorated1Service($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Backend\ToolbarItems\ClearCacheToolbarItem' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Backend\ToolbarItems\ClearCacheToolbarItem
     */
    protected static function getClearCacheToolbarItemService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Backend\\ToolbarItems\\ClearCacheToolbarItem'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Backend\ToolbarItems\ClearCacheToolbarItem::class, ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Backend\ToolbarItems\ShortcutToolbarItem' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Backend\ToolbarItems\ShortcutToolbarItem
     */
    protected static function getShortcutToolbarItemService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Backend\\ToolbarItems\\ShortcutToolbarItem'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Backend\ToolbarItems\ShortcutToolbarItem::class, ($container->services['TYPO3\\CMS\\Backend\\Backend\\Shortcut\\ShortcutRepository'] ?? self::getShortcutRepositoryService($container)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Backend\ToolbarItems\SystemInformationToolbarItem' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Backend\ToolbarItems\SystemInformationToolbarItem
     */
    protected static function getSystemInformationToolbarItemService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Backend\\ToolbarItems\\SystemInformationToolbarItem'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Backend\ToolbarItems\SystemInformationToolbarItem::class, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->privates['TYPO3\\CMS\\Core\\Information\\Typo3Version'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Information\Typo3Version::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Clipboard\Clipboard' autowired service.
     *
     * @return \TYPO3\CMS\Backend\Clipboard\Clipboard
     */
    protected static function getClipboardService($container)
    {
        $container->factories['TYPO3\\CMS\\Backend\\Clipboard\\Clipboard'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Clipboard\Clipboard::class, ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? self::getResourceFactoryService($container)));
        };

        return $container->factories['TYPO3\\CMS\\Backend\\Clipboard\\Clipboard']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Command\CreateBackendUserCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Command\CreateBackendUserCommand
     */
    protected static function getCreateBackendUserCommandService($container)
    {
        $container->services['TYPO3\\CMS\\Backend\\Command\\CreateBackendUserCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Command\CreateBackendUserCommand::class, ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)), ($container->services['_early.TYPO3\\CMS\\Core\\Configuration\\ConfigurationManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Configuration\\ConfigurationManager', 1)), ($container->services['TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory'] ?? self::getLanguageServiceFactoryService($container)));

        $instance->setName('backend:user:create');
        $instance->setDescription('Create a backend user');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Command\LockBackendCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Command\LockBackendCommand
     */
    protected static function getLockBackendCommandService($container)
    {
        $container->services['TYPO3\\CMS\\Backend\\Command\\LockBackendCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Command\LockBackendCommand::class);

        $instance->setName('backend:lock');
        $instance->setDescription('Lock the TYPO3 Backend');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Command\ReferenceIndexUpdateCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Command\ReferenceIndexUpdateCommand
     */
    protected static function getReferenceIndexUpdateCommandService($container)
    {
        $container->services['TYPO3\\CMS\\Backend\\Command\\ReferenceIndexUpdateCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Command\ReferenceIndexUpdateCommand::class);

        $instance->setName('referenceindex:update');
        $instance->setDescription('Update the reference index of TYPO3');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Command\ResetPasswordCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Command\ResetPasswordCommand
     */
    protected static function getResetPasswordCommandService($container)
    {
        $container->services['TYPO3\\CMS\\Backend\\Command\\ResetPasswordCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Command\ResetPasswordCommand::class, ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)), ($container->privates['TYPO3\\CMS\\Backend\\Authentication\\PasswordReset'] ?? self::getPasswordResetService($container)));

        $instance->setName('backend:resetpassword');
        $instance->setDescription('Trigger a password reset for a backend user');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Command\UnlockBackendCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Command\UnlockBackendCommand
     */
    protected static function getUnlockBackendCommandService($container)
    {
        $container->services['TYPO3\\CMS\\Backend\\Command\\UnlockBackendCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Command\UnlockBackendCommand::class);

        $instance->setName('backend:unlock');
        $instance->setDescription('Unlock the TYPO3 Backend');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ContextMenu\ContextMenu' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\ContextMenu\ContextMenu
     */
    protected static function getContextMenuService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\ContextMenu\\ContextMenu'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ContextMenu\ContextMenu::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ContextMenu\ItemProviders\ItemProvidersRegistry::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(RewindableGenerator::class, function () use ($container) {
            yield 0 => ($container->privates['TYPO3\\CMS\\Backend\\ContextMenu\\ItemProviders\\AbstractProvider'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ContextMenu\ItemProviders\AbstractProvider::class));
            yield 1 => ($container->privates['TYPO3\\CMS\\Backend\\ContextMenu\\ItemProviders\\PageProvider'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ContextMenu\ItemProviders\PageProvider::class));
            yield 2 => ($container->privates['TYPO3\\CMS\\Backend\\ContextMenu\\ItemProviders\\RecordProvider'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ContextMenu\ItemProviders\RecordProvider::class));
            yield 3 => ($container->privates['TYPO3\\CMS\\Filelist\\ContextMenu\\ItemProviders\\FileProvider'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Filelist\ContextMenu\ItemProviders\FileProvider::class));
            yield 4 => ($container->privates['TYPO3\\CMS\\Impexp\\ContextMenu\\ItemProvider'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Impexp\ContextMenu\ItemProvider::class));
            yield 5 => ($container->privates['TYPO3\\CMS\\Form\\Hooks\\FormFileProvider'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Hooks\FormFileProvider::class));
        }, 6)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ContextMenu\ImportMapConfigurator' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\ContextMenu\ImportMapConfigurator
     */
    protected static function getImportMapConfiguratorService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\ContextMenu\\ImportMapConfigurator'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ContextMenu\ImportMapConfigurator::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\AboutController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\AboutController
     */
    protected static function getAboutControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container));

        return $container->services['TYPO3\\CMS\\Backend\\Controller\\AboutController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\AboutController::class, ($container->privates['TYPO3\\CMS\\Core\\Information\\Typo3Version'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Information\Typo3Version::class)), ($container->privates['TYPO3\\CMS\\Core\\Information\\Typo3Information'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Information\Typo3Information::class)), $a, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->services['_early.TYPO3\\CMS\\Core\\Package\\PackageManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Package\\PackageManager', 1)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), $a, ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\AjaxLoginController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\AjaxLoginController
     */
    protected static function getAjaxLoginControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Controller\\AjaxLoginController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\AjaxLoginController::class, ($container->services['TYPO3\\CMS\\Core\\FormProtection\\FormProtectionFactory'] ?? self::getFormProtectionFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\BackendController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\BackendController
     */
    protected static function getBackendController2Service($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Controller\\BackendController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\BackendController::class, ($container->privates['TYPO3\\CMS\\Core\\Information\\Typo3Version'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Information\Typo3Version::class)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->privates['TYPO3\\CMS\\Backend\\Toolbar\\ToolbarItemsRegistry'] ?? self::getToolbarItemsRegistryService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\ClipboardController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\ClipboardController
     */
    protected static function getClipboardControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Controller\\ClipboardController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\ClipboardController::class, ($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)), ($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\ColumnSelectorController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\ColumnSelectorController
     */
    protected static function getColumnSelectorControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Controller\\ColumnSelectorController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\ColumnSelectorController::class, ($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\ContentElement\ElementHistoryController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\ContentElement\ElementHistoryController
     */
    protected static function getElementHistoryControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $b = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));

        return $container->services['TYPO3\\CMS\\Backend\\Controller\\ContentElement\\ElementHistoryController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\ContentElement\ElementHistoryController::class, $a, $b, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), $a, $b, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\ContentElement\ElementInformationController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\ContentElement\ElementInformationController
     */
    protected static function getElementInformationControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $b = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));

        return $container->services['TYPO3\\CMS\\Backend\\Controller\\ContentElement\\ElementInformationController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\ContentElement\ElementInformationController::class, $a, $b, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), $a, $b, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), ($container->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? self::getResourceFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\ContentElement\MoveElementController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\ContentElement\MoveElementController
     */
    protected static function getMoveElementControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $b = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));

        return $container->services['TYPO3\\CMS\\Backend\\Controller\\ContentElement\\MoveElementController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\ContentElement\MoveElementController::class, $a, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), $a, $b, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), $b);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\ContentElement\NewContentElementController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\ContentElement\NewContentElementController
     */
    protected static function getNewContentElementControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Controller\\ContentElement\\NewContentElementController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\ContentElement\NewContentElementController::class, ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->services['TYPO3\\CMS\\Core\\Service\\DependencyOrderingService'] ?? self::getDependencyOrderingServiceService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\DummyController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\DummyController
     */
    protected static function getDummyControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Controller\\DummyController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\DummyController::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\EditDocumentController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\EditDocumentController
     */
    protected static function getEditDocumentControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $b = ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container));
        $c = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));
        $d = ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container));

        return $container->services['TYPO3\\CMS\\Backend\\Controller\\EditDocumentController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\EditDocumentController::class, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), $a, $b, $c, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, $c, $d, ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), ($container->services['TYPO3\\CMS\\Core\\Routing\\BackendEntryPointResolver'] ?? self::getBackendEntryPointResolverService($container)), $d);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\ElementBrowserController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\ElementBrowserController
     */
    protected static function getElementBrowserControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Controller\\ElementBrowserController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\ElementBrowserController::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ElementBrowser\ElementBrowserRegistry::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(RewindableGenerator::class, function () use ($container) {
            yield 0 => (isset($container->factories['service_container']['TYPO3\\CMS\\Backend\\ElementBrowser\\DatabaseBrowser']) ? $container->factories['service_container']['TYPO3\\CMS\\Backend\\ElementBrowser\\DatabaseBrowser']($container) : self::getDatabaseBrowserService($container));
            yield 1 => ($container->privates['TYPO3\\CMS\\Filelist\\ElementBrowser\\CreateFolderBrowser'] ?? self::getCreateFolderBrowserService($container));
            yield 2 => (isset($container->factories['service_container']['TYPO3\\CMS\\Filelist\\ElementBrowser\\FileBrowser']) ? $container->factories['service_container']['TYPO3\\CMS\\Filelist\\ElementBrowser\\FileBrowser']($container) : self::getFileBrowserService($container));
            yield 3 => (isset($container->factories['service_container']['TYPO3\\CMS\\Filelist\\ElementBrowser\\FolderBrowser']) ? $container->factories['service_container']['TYPO3\\CMS\\Filelist\\ElementBrowser\\FolderBrowser']($container) : self::getFolderBrowserService($container));
        }, 4)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\File\FileController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\File\FileController
     */
    protected static function getFileControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Controller\\File\\FileController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\File\FileController::class, ($container->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? self::getResourceFactoryService($container)), ($container->privates['TYPO3\\CMS\\Core\\Utility\\File\\ExtendedFileUtility'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Utility\File\ExtendedFileUtility::class)), ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\File\ImageProcessController' autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\File\ImageProcessController
     */
    protected static function getImageProcessControllerService($container)
    {
        $container->factories['TYPO3\\CMS\\Backend\\Controller\\File\\ImageProcessController'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\File\ImageProcessController::class, ($container->privates['TYPO3\\CMS\\Core\\Resource\\Service\\ImageProcessingService'] ?? self::getImageProcessingServiceService($container)));

            $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Backend\\Controller\\File\\ImageProcessController'));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Backend\\Controller\\File\\ImageProcessController']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\FormFilesAjaxController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\FormFilesAjaxController
     */
    protected static function getFormFilesAjaxControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Controller\\FormFilesAjaxController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\FormFilesAjaxController::class, ($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)), ($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\FormSlugAjaxController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\FormSlugAjaxController
     */
    protected static function getFormSlugAjaxControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Controller\\FormSlugAjaxController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\FormSlugAjaxController::class, ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\LinkBrowserController' autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\LinkBrowserController
     */
    protected static function getLinkBrowserControllerService($container)
    {
        $container->factories['TYPO3\\CMS\\Backend\\Controller\\LinkBrowserController'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\LinkBrowserController::class, ($container->services['TYPO3\\CMS\\Core\\LinkHandling\\LinkService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\LinkHandling\LinkService::class)), ($container->privates['TYPO3\\CMS\\Core\\LinkHandling\\TypoLinkCodecService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\LinkHandling\TypoLinkCodecService::class)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)));

            $instance->injectDependencyOrderingService(($container->services['TYPO3\\CMS\\Core\\Service\\DependencyOrderingService'] ?? self::getDependencyOrderingServiceService($container)));
            $instance->injectPageRenderer(($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)));
            $instance->injectUriBuilder(($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)));
            $instance->injectExtensionConfiguration(($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)));
            $instance->injectBackendViewFactory(($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)));
            $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Backend\\Controller\\LinkBrowserController']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\LinkController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\LinkController
     */
    protected static function getLinkControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Controller\\LinkController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\LinkController::class, ($container->services['TYPO3\\CMS\\Core\\LinkHandling\\LinkService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\LinkHandling\LinkService::class)), ($container->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? self::getResourceFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\LiveSearchController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\LiveSearchController
     */
    protected static function getLiveSearchControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Controller\\LiveSearchController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\LiveSearchController::class, ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Search\LiveSearch\SearchRepository::class, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Search\LiveSearch\SearchProviderRegistry::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(RewindableGenerator::class, function () use ($container) {
            yield 0 => ($container->privates['TYPO3\\CMS\\Backend\\Search\\LiveSearch\\PageRecordProvider'] ?? self::getPageRecordProviderService($container));
            yield 1 => ($container->privates['TYPO3\\CMS\\Backend\\Search\\LiveSearch\\DatabaseRecordProvider'] ?? self::getDatabaseRecordProviderService($container));
        }, 2))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\LoginController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\LoginController
     */
    protected static function getLoginControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Controller\\LoginController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\LoginController::class, ($container->privates['TYPO3\\CMS\\Core\\Information\\Typo3Information'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Information\Typo3Information::class)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\Features'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\Features::class)), ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\LoginProvider\LoginProviderResolver::class), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->services['TYPO3\\CMS\\Core\\Routing\\BackendEntryPointResolver'] ?? self::getBackendEntryPointResolverService($container)), ($container->services['TYPO3\\CMS\\Core\\FormProtection\\FormProtectionFactory'] ?? self::getFormProtectionFactoryService($container)), ($container->services['TYPO3\\CMS\\Core\\Localization\\Locales'] ?? self::getLocalesService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\LogoutController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\LogoutController
     */
    protected static function getLogoutControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Controller\\LogoutController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\LogoutController::class, ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Core\\FormProtection\\FormProtectionFactory'] ?? self::getFormProtectionFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\MfaAjaxController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\MfaAjaxController
     */
    protected static function getMfaAjaxControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Controller\\MfaAjaxController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\MfaAjaxController::class, ($container->services['TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaProviderRegistry'] ?? self::getMfaProviderRegistryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\MfaConfigurationController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\MfaConfigurationController
     */
    protected static function getMfaConfigurationControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $b = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));

        $container->services['TYPO3\\CMS\\Backend\\Controller\\MfaConfigurationController'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\MfaConfigurationController::class, $a, $b, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), $a, $b, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))));

        $instance->injectMfaProviderRegistry(($container->services['TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaProviderRegistry'] ?? self::getMfaProviderRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\MfaController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\MfaController
     */
    protected static function getMfaControllerService($container)
    {
        $container->services['TYPO3\\CMS\\Backend\\Controller\\MfaController'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\MfaController::class, ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Backend\\View\\AuthenticationStyleInformation'] ?? self::getAuthenticationStyleInformationService($container)), ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Backend\\Controller\\MfaController'), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));

        $instance->injectMfaProviderRegistry(($container->services['TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaProviderRegistry'] ?? self::getMfaProviderRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\MfaSetupController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\MfaSetupController
     */
    protected static function getMfaSetupControllerService($container)
    {
        $container->services['TYPO3\\CMS\\Backend\\Controller\\MfaSetupController'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\MfaSetupController::class, ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Backend\\View\\AuthenticationStyleInformation'] ?? self::getAuthenticationStyleInformationService($container)), ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Backend\\Controller\\MfaSetupController'), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)));

        $instance->injectMfaProviderRegistry(($container->services['TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaProviderRegistry'] ?? self::getMfaProviderRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\NewRecordController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\NewRecordController
     */
    protected static function getNewRecordControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $b = ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container));
        $c = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));

        return $container->services['TYPO3\\CMS\\Backend\\Controller\\NewRecordController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\NewRecordController::class, $a, $b, $c, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, $c, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\OnlineMediaController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\OnlineMediaController
     */
    protected static function getOnlineMediaControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Controller\\OnlineMediaController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\OnlineMediaController::class, ($container->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? self::getResourceFactoryService($container)), ($container->services['TYPO3\\CMS\\Core\\Resource\\DefaultUploadFolderResolver'] ?? self::getDefaultUploadFolderResolverService($container)), ($container->services['TYPO3\\CMS\\Core\\Resource\\OnlineMedia\\Helpers\\OnlineMediaHelperRegistry'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\OnlineMedia\Helpers\OnlineMediaHelperRegistry::class)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\PageLayoutController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\PageLayoutController
     */
    protected static function getPageLayoutControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $b = ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container));
        $c = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));
        $d = ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container));
        $e = ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container));

        return $container->services['TYPO3\\CMS\\Backend\\Controller\\PageLayoutController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\PageLayoutController::class, $a, $b, $c, ($container->privates['TYPO3\\CMS\\Core\\Domain\\Repository\\PageRepository'] ?? self::getPageRepositoryService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, $c, $d, ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), $e), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), $d, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\View\Drawing\BackendLayoutRenderer::class, $e), ($container->services['TYPO3\\CMS\\Backend\\View\\BackendLayoutView'] ?? self::getBackendLayoutViewService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\PageTsConfig\PageTsConfigActiveController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\PageTsConfig\PageTsConfigActiveController
     */
    protected static function getPageTsConfigActiveControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));

        return $container->services['TYPO3\\CMS\\Backend\\Controller\\PageTsConfig\\PageTsConfigActiveController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\PageTsConfig\PageTsConfigActiveController::class, $container, $a, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), $a, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), ($container->services['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\TsConfigTreeBuilder'] ?? self::getTsConfigTreeBuilderService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\PageTsConfig\PageTsConfigIncludesController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\PageTsConfig\PageTsConfigIncludesController
     */
    protected static function getPageTsConfigIncludesControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));

        return $container->services['TYPO3\\CMS\\Backend\\Controller\\PageTsConfig\\PageTsConfigIncludesController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\PageTsConfig\PageTsConfigIncludesController::class, $container, $a, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), $a, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), ($container->services['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\TsConfigTreeBuilder'] ?? self::getTsConfigTreeBuilderService($container)), ($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)), ($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\PageTsConfig\PageTsConfigRecordsOverviewController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\PageTsConfig\PageTsConfigRecordsOverviewController
     */
    protected static function getPageTsConfigRecordsOverviewControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $b = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));

        return $container->services['TYPO3\\CMS\\Backend\\Controller\\PageTsConfig\\PageTsConfigRecordsOverviewController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\PageTsConfig\PageTsConfigRecordsOverviewController::class, $a, $b, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), $a, $b, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\Page\MovePageController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\Page\MovePageController
     */
    protected static function getMovePageControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $b = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));

        return $container->services['TYPO3\\CMS\\Backend\\Controller\\Page\\MovePageController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\Page\MovePageController::class, $a, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), $a, $b, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), $b);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\Page\NewMultiplePagesController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\Page\NewMultiplePagesController
     */
    protected static function getNewMultiplePagesControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));

        return $container->services['TYPO3\\CMS\\Backend\\Controller\\Page\\NewMultiplePagesController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\Page\NewMultiplePagesController::class, $a, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), $a, ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\Page\SortSubPagesController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\Page\SortSubPagesController
     */
    protected static function getSortSubPagesControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));

        return $container->services['TYPO3\\CMS\\Backend\\Controller\\Page\\SortSubPagesController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\Page\SortSubPagesController::class, $a, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), $a, ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\RecordListController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\RecordListController
     */
    protected static function getRecordListControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $b = ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container));
        $c = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));

        return $container->services['TYPO3\\CMS\\Backend\\Controller\\RecordListController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\RecordListController::class, $a, $b, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), $c, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, $c, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\RecordListDownloadController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\RecordListDownloadController
     */
    protected static function getRecordListDownloadControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Controller\\RecordListDownloadController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\RecordListDownloadController::class, ($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\ResetPasswordController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\ResetPasswordController
     */
    protected static function getResetPasswordControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Controller\\ResetPasswordController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\ResetPasswordController::class, ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)), ($container->services['TYPO3\\CMS\\Core\\Localization\\Locales'] ?? self::getLocalesService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\Features'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\Features::class)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), ($container->privates['TYPO3\\CMS\\Backend\\Authentication\\PasswordReset'] ?? self::getPasswordResetService($container)), ($container->privates['TYPO3\\CMS\\Core\\Information\\Typo3Information'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Information\Typo3Information::class)), ($container->services['TYPO3\\CMS\\Backend\\View\\AuthenticationStyleInformation'] ?? self::getAuthenticationStyleInformationService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\Resource\ResourceController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\Resource\ResourceController
     */
    protected static function getResourceControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Controller\\Resource\\ResourceController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\Resource\ResourceController::class, ($container->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? self::getResourceFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\Security\SudoModeController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\Security\SudoModeController
     */
    protected static function getSudoModeControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));
        $b = ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container));

        $container->services['TYPO3\\CMS\\Backend\\Controller\\Security\\SudoModeController'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\Security\SudoModeController::class, $a, $b, ($container->services['TYPO3\\CMS\\Backend\\Security\\SudoMode\\Access\\AccessFactory'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Security\SudoMode\Access\AccessFactory::class)), ($container->services['TYPO3\\CMS\\Backend\\Security\\SudoMode\\Access\\AccessStorage'] ?? self::getAccessStorageService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Security\SudoMode\PasswordVerification::class, ($container->services['TYPO3\\CMS\\Core\\Crypto\\PasswordHashing\\PasswordHashFactory'] ?? self::getPasswordHashFactoryService($container))), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), $a, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), ($container->services['TYPO3\\CMS\\Core\\Routing\\BackendEntryPointResolver'] ?? self::getBackendEntryPointResolverService($container)));

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Backend\\Controller\\Security\\SudoModeController'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\ShortcutController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\ShortcutController
     */
    protected static function getShortcutControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Controller\\ShortcutController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\ShortcutController::class, ($container->services['TYPO3\\CMS\\Backend\\Backend\\ToolbarItems\\ShortcutToolbarItem'] ?? self::getShortcutToolbarItemService($container)), ($container->services['TYPO3\\CMS\\Backend\\Backend\\Shortcut\\ShortcutRepository'] ?? self::getShortcutRepositoryService($container)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\SiteConfigurationController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\SiteConfigurationController
     */
    protected static function getSiteConfigurationControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $b = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));
        $c = ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container));

        return $container->services['TYPO3\\CMS\\Backend\\Controller\\SiteConfigurationController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\SiteConfigurationController::class, ($container->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? self::getSiteFinderService($container)), $a, $b, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $c, $a, $b, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), $c, ($container->services['TYPO3\\CMS\\Core\\Configuration\\SiteConfiguration'] ?? self::getSiteConfigurationService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\SwitchUserController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\SwitchUserController
     */
    protected static function getSwitchUserControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Controller\\SwitchUserController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\SwitchUserController::class, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\SystemInformationController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\SystemInformationController
     */
    protected static function getSystemInformationControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Controller\\SystemInformationController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\SystemInformationController::class, ($container->services['TYPO3\\CMS\\Backend\\Backend\\ToolbarItems\\SystemInformationToolbarItem'] ?? self::getSystemInformationToolbarItemService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\Wizard\ImageManipulationController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\Wizard\ImageManipulationController
     */
    protected static function getImageManipulationControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Controller\\Wizard\\ImageManipulationController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\Wizard\ImageManipulationController::class, ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\EventListener\AfterBackendPageRenderEventListener' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\EventListener\AfterBackendPageRenderEventListener
     */
    protected static function getAfterBackendPageRenderEventListenerService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\EventListener\\AfterBackendPageRenderEventListener'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\EventListener\AfterBackendPageRenderEventListener::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\EventListener\FailedLoginAttemptNotification' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\EventListener\FailedLoginAttemptNotification
     */
    protected static function getFailedLoginAttemptNotificationService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\EventListener\\FailedLoginAttemptNotification'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\EventListener\FailedLoginAttemptNotification::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\EventListener\SilentSiteLanguageFlagMigration' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\EventListener\SilentSiteLanguageFlagMigration
     */
    protected static function getSilentSiteLanguageFlagMigrationService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\EventListener\\SilentSiteLanguageFlagMigration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\EventListener\SilentSiteLanguageFlagMigration::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Form\FormDataProvider\ReturnUrl' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Form\FormDataProvider\ReturnUrl
     */
    protected static function getReturnUrlService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\ReturnUrl'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Form\FormDataProvider\ReturnUrl::class, ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Form\FormDataProvider\SiteDatabaseEditRow' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Form\FormDataProvider\SiteDatabaseEditRow
     */
    protected static function getSiteDatabaseEditRowService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\SiteDatabaseEditRow'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Form\FormDataProvider\SiteDatabaseEditRow::class, ($container->services['TYPO3\\CMS\\Core\\Configuration\\SiteConfiguration'] ?? self::getSiteConfigurationService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\History\RecordHistoryRollback' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\History\RecordHistoryRollback
     */
    protected static function getRecordHistoryRollbackService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\History\\RecordHistoryRollback'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\History\RecordHistoryRollback::class, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Http\Application' shared service.
     *
     * @return \TYPO3\CMS\Backend\Http\Application
     */
    protected static function getApplicationService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Http\\Application'] = \TYPO3\CMS\Backend\ServiceProvider::getApplication($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Http\RequestHandler' shared service.
     *
     * @return \TYPO3\CMS\Backend\Http\RequestHandler
     */
    protected static function getRequestHandlerService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Http\\RequestHandler'] = \TYPO3\CMS\Backend\ServiceProvider::getRequestHandler($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Http\RouteDispatcher' shared service.
     *
     * @return \TYPO3\CMS\Backend\Http\RouteDispatcher
     */
    protected static function getRouteDispatcherService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Http\\RouteDispatcher'] = \TYPO3\CMS\Backend\ServiceProvider::getRouteDispatcher($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\LinkHandler\RecordLinkHandler' autowired service.
     *
     * @return \TYPO3\CMS\Backend\LinkHandler\RecordLinkHandler
     */
    protected static function getRecordLinkHandlerService($container)
    {
        $container->factories['TYPO3\\CMS\\Backend\\LinkHandler\\RecordLinkHandler'] = function ($container) {
            $a = ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container));

            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\LinkHandler\RecordLinkHandler::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\RecordList\ElementBrowserRecordList::class, ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->privates['TYPO3\\CMS\\Backend\\Configuration\\TranslationConfigurationProvider'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Configuration\TranslationConfigurationProvider::class)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), $a, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container))), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\View\RecordSearchBoxComponent::class, $a), ($container->services['TYPO3\\CMS\\Core\\LinkHandling\\LinkService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\LinkHandling\LinkService::class)));
        };

        return $container->factories['TYPO3\\CMS\\Backend\\LinkHandler\\RecordLinkHandler']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Middleware\AdditionalResponseHeaders' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Middleware\AdditionalResponseHeaders
     */
    protected static function getAdditionalResponseHeadersService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Middleware\\AdditionalResponseHeaders'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Middleware\AdditionalResponseHeaders::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Middleware\BackendModuleValidator' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Middleware\BackendModuleValidator
     */
    protected static function getBackendModuleValidatorService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Middleware\\BackendModuleValidator'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Middleware\BackendModuleValidator::class, ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Middleware\BackendRouteInitialization' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Middleware\BackendRouteInitialization
     */
    protected static function getBackendRouteInitializationService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Middleware\\BackendRouteInitialization'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Middleware\BackendRouteInitialization::class, ($container->services['TYPO3\\CMS\\Backend\\Routing\\Router_decorated_1'] ?? self::getRouterDecorated1Service($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Core\\Routing\\RequestContextFactory'] ?? self::getRequestContextFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Middleware\BackendUserAuthenticator' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Middleware\BackendUserAuthenticator
     */
    protected static function getBackendUserAuthenticatorService($container)
    {
        $container->services['TYPO3\\CMS\\Backend\\Middleware\\BackendUserAuthenticator'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Middleware\BackendUserAuthenticator::class, ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)), ($container->services['TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory'] ?? self::getLanguageServiceFactoryService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\RateLimiter\RateLimiterFactory::class));

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Backend\\Middleware\\BackendUserAuthenticator'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Middleware\ContentSecurityPolicyHeaders' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Middleware\ContentSecurityPolicyHeaders
     */
    protected static function getContentSecurityPolicyHeadersService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Middleware\\ContentSecurityPolicyHeaders'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Middleware\ContentSecurityPolicyHeaders::class, ($container->privates['TYPO3\\CMS\\Core\\Configuration\\Features'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\Features::class)), ($container->services['_early.TYPO3\\CMS\\Core\\Core\\RequestId'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Core\\RequestId', 1)), ($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Backend\\Middleware\\ContentSecurityPolicyHeaders'), ($container->services['_early.cache.assets'] ?? $container->get('_early.cache.assets', 1)), ($container->services['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\PolicyProvider'] ?? self::getPolicyProviderService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Middleware\ContentSecurityPolicyReporter' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Middleware\ContentSecurityPolicyReporter
     */
    protected static function getContentSecurityPolicyReporterService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Middleware\\ContentSecurityPolicyReporter'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Middleware\ContentSecurityPolicyReporter::class, ($container->services['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\PolicyProvider'] ?? self::getPolicyProviderService($container)), ($container->privates['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Reporting\\ReportRepository'] ?? self::getReportRepositoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Middleware\ForcedHttpsBackendRedirector' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Middleware\ForcedHttpsBackendRedirector
     */
    protected static function getForcedHttpsBackendRedirectorService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Middleware\\ForcedHttpsBackendRedirector'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Middleware\ForcedHttpsBackendRedirector::class, ($container->services['TYPO3\\CMS\\Core\\Routing\\BackendEntryPointResolver'] ?? self::getBackendEntryPointResolverService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Middleware\LockedBackendGuard' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Middleware\LockedBackendGuard
     */
    protected static function getLockedBackendGuardService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Middleware\\LockedBackendGuard'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Middleware\LockedBackendGuard::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Middleware\OutputCompression' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Middleware\OutputCompression
     */
    protected static function getOutputCompressionService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Middleware\\OutputCompression'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Middleware\OutputCompression::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Middleware\SiteResolver' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Middleware\SiteResolver
     */
    protected static function getSiteResolverService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Middleware\\SiteResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Middleware\SiteResolver::class, ($container->services['TYPO3\\CMS\\Core\\Routing\\SiteMatcher'] ?? self::getSiteMatcherService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Middleware\SudoModeInterceptor' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Middleware\SudoModeInterceptor
     */
    protected static function getSudoModeInterceptorService($container)
    {
        $container->services['TYPO3\\CMS\\Backend\\Middleware\\SudoModeInterceptor'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Middleware\SudoModeInterceptor::class, ($container->services['TYPO3\\CMS\\Backend\\Security\\SudoMode\\Access\\AccessStorage'] ?? self::getAccessStorageService($container)), ($container->services['TYPO3\\CMS\\Backend\\Controller\\Security\\SudoModeController'] ?? self::getSudoModeControllerService($container)));

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Backend\\Middleware\\SudoModeInterceptor'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Module\ModuleFactory' shared service.
     *
     * @return \TYPO3\CMS\Backend\Module\ModuleFactory
     */
    protected static function getModuleFactoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Module\\ModuleFactory'] = \TYPO3\CMS\Backend\ServiceProvider::getModuleFactory($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Module\ModuleProvider' shared service.
     *
     * @return \TYPO3\CMS\Backend\Module\ModuleProvider
     */
    protected static function getModuleProviderService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] = \TYPO3\CMS\Backend\ServiceProvider::getModuleProvider($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Module\ModuleRegistry' shared service.
     *
     * @return \TYPO3\CMS\Backend\Module\ModuleRegistry
     */
    protected static function getModuleRegistryService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Module\\ModuleRegistry'] = \TYPO3\CMS\Backend\ServiceProvider::getModuleRegistry($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\RecordList\DatabaseRecordList' autowired service.
     *
     * @return \TYPO3\CMS\Backend\RecordList\DatabaseRecordList
     */
    protected static function getDatabaseRecordListService($container)
    {
        $container->factories['TYPO3\\CMS\\Backend\\RecordList\\DatabaseRecordList'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\RecordList\DatabaseRecordList::class, ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->privates['TYPO3\\CMS\\Backend\\Configuration\\TranslationConfigurationProvider'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Configuration\TranslationConfigurationProvider::class)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)));
        };

        return $container->factories['TYPO3\\CMS\\Backend\\RecordList\\DatabaseRecordList']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\RecordList\ElementBrowserRecordList' autowired service.
     *
     * @return \TYPO3\CMS\Backend\RecordList\ElementBrowserRecordList
     */
    protected static function getElementBrowserRecordListService($container)
    {
        $container->factories['TYPO3\\CMS\\Backend\\RecordList\\ElementBrowserRecordList'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\RecordList\ElementBrowserRecordList::class, ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->privates['TYPO3\\CMS\\Backend\\Configuration\\TranslationConfigurationProvider'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Configuration\TranslationConfigurationProvider::class)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)));
        };

        return $container->factories['TYPO3\\CMS\\Backend\\RecordList\\ElementBrowserRecordList']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Resource\PublicUrlPrefixer' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Resource\PublicUrlPrefixer
     */
    protected static function getPublicUrlPrefixerService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Resource\\PublicUrlPrefixer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Resource\PublicUrlPrefixer::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Routing\Router_decorated_1' shared service.
     *
     * @return \TYPO3\CMS\Backend\Routing\Router
     */
    protected static function getRouterDecorated1Service($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Routing\\Router_decorated_1'] = \TYPO3\CMS\Backend\ServiceProvider::configureBackendRouter($container, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Routing\Router::class, ($container->services['TYPO3\\CMS\\Core\\Routing\\RequestContextFactory'] ?? self::getRequestContextFactoryService($container))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Routing\UriBuilder' shared service.
     *
     * @return \TYPO3\CMS\Backend\Routing\UriBuilder
     */
    protected static function getUriBuilderService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] = \TYPO3\CMS\Backend\ServiceProvider::getUriBuilder($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Search\EventListener\AddLiveSearchResultActionsListener' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Search\EventListener\AddLiveSearchResultActionsListener
     */
    protected static function getAddLiveSearchResultActionsListenerService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Search\\EventListener\\AddLiveSearchResultActionsListener'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Search\EventListener\AddLiveSearchResultActionsListener::class, ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory'] ?? self::getLanguageServiceFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Search\EventListener\ExcludePagesFromSearchFieldsLookup' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Search\EventListener\ExcludePagesFromSearchFieldsLookup
     */
    protected static function getExcludePagesFromSearchFieldsLookupService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Search\\EventListener\\ExcludePagesFromSearchFieldsLookup'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Search\EventListener\ExcludePagesFromSearchFieldsLookup::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Security\CategoryPermissionsAspect' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Security\CategoryPermissionsAspect
     */
    protected static function getCategoryPermissionsAspectService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Security\\CategoryPermissionsAspect'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Security\CategoryPermissionsAspect::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Security\ContentSecurityPolicy\CspAjaxController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Security\ContentSecurityPolicy\CspAjaxController
     */
    protected static function getCspAjaxControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Security\\ContentSecurityPolicy\\CspAjaxController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Security\ContentSecurityPolicy\CspAjaxController::class, ($container->privates['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\ModelService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Security\ContentSecurityPolicy\ModelService::class)), ($container->services['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\PolicyProvider'] ?? self::getPolicyProviderService($container)), ($container->privates['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Reporting\\ReportRepository'] ?? self::getReportRepositoryService($container)), ($container->privates['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Reporting\\ResolutionRepository'] ?? self::getResolutionRepositoryService($container)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Security\ContentSecurityPolicy\CspModuleController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Security\ContentSecurityPolicy\CspModuleController
     */
    protected static function getCspModuleControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));
        $b = ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container));

        return $container->services['TYPO3\\CMS\\Backend\\Security\\ContentSecurityPolicy\\CspModuleController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Security\ContentSecurityPolicy\CspModuleController::class, ($container->privates['TYPO3\\CMS\\Core\\Configuration\\Features'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\Features::class)), $a, $b, ($container->privates['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\ScopeRepository'] ?? self::getScopeRepositoryService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), $a, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Security\EmailLoginNotification' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Security\EmailLoginNotification
     */
    protected static function getEmailLoginNotificationService($container)
    {
        $container->services['TYPO3\\CMS\\Backend\\Security\\EmailLoginNotification'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Security\EmailLoginNotification::class, ($container->services['TYPO3\\CMS\\Core\\Mail\\Mailer'] ?? self::getMailerService($container)));

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Backend\\Security\\EmailLoginNotification'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Security\SudoMode\Access\AccessFactory' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Security\SudoMode\Access\AccessFactory
     */
    protected static function getAccessFactoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Security\\SudoMode\\Access\\AccessFactory'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Security\SudoMode\Access\AccessFactory::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Security\SudoMode\Access\AccessStorage' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Security\SudoMode\Access\AccessStorage
     */
    protected static function getAccessStorageService($container)
    {
        $container->services['TYPO3\\CMS\\Backend\\Security\\SudoMode\\Access\\AccessStorage'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Security\SudoMode\Access\AccessStorage::class, ($container->services['TYPO3\\CMS\\Backend\\Security\\SudoMode\\Access\\AccessFactory'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Security\SudoMode\Access\AccessFactory::class)));

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Backend\\Security\\SudoMode\\Access\\AccessStorage'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Template\ModuleTemplateFactory' autowired service.
     *
     * @return \TYPO3\CMS\Backend\Template\ModuleTemplateFactory
     */
    protected static function getModuleTemplateFactoryService($container)
    {
        $container->factories['TYPO3\\CMS\\Backend\\Template\\ModuleTemplateFactory'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)));
        };

        return $container->factories['TYPO3\\CMS\\Backend\\Template\\ModuleTemplateFactory']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Tree\View\ContentCreationPagePositionMap' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Tree\View\ContentCreationPagePositionMap
     */
    protected static function getContentCreationPagePositionMapService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Tree\\View\\ContentCreationPagePositionMap'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Tree\View\ContentCreationPagePositionMap::class, ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Backend\\View\\BackendLayoutView'] ?? self::getBackendLayoutViewService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Tree\View\ContentMovingPagePositionMap' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Tree\View\ContentMovingPagePositionMap
     */
    protected static function getContentMovingPagePositionMapService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\Tree\\View\\ContentMovingPagePositionMap'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Tree\View\ContentMovingPagePositionMap::class, ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Backend\\View\\BackendLayoutView'] ?? self::getBackendLayoutViewService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ViewHelpers\AvatarViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Backend\ViewHelpers\AvatarViewHelper
     */
    protected static function getAvatarViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\AvatarViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ViewHelpers\AvatarViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\AvatarViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ViewHelpers\LanguageColumnViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Backend\ViewHelpers\LanguageColumnViewHelper
     */
    protected static function getLanguageColumnViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\LanguageColumnViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ViewHelpers\LanguageColumnViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\LanguageColumnViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ViewHelpers\Link\DocumentationViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Backend\ViewHelpers\Link\DocumentationViewHelper
     */
    protected static function getDocumentationViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\Link\\DocumentationViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ViewHelpers\Link\DocumentationViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\Link\\DocumentationViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ViewHelpers\Link\EditRecordViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Backend\ViewHelpers\Link\EditRecordViewHelper
     */
    protected static function getEditRecordViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\Link\\EditRecordViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ViewHelpers\Link\EditRecordViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\Link\\EditRecordViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ViewHelpers\Link\NewRecordViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Backend\ViewHelpers\Link\NewRecordViewHelper
     */
    protected static function getNewRecordViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\Link\\NewRecordViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ViewHelpers\Link\NewRecordViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\Link\\NewRecordViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ViewHelpers\Mfa\IfHasStateViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Backend\ViewHelpers\Mfa\IfHasStateViewHelper
     */
    protected static function getIfHasStateViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\Mfa\\IfHasStateViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ViewHelpers\Mfa\IfHasStateViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\Mfa\\IfHasStateViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ViewHelpers\ModuleLinkViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Backend\ViewHelpers\ModuleLinkViewHelper
     */
    protected static function getModuleLinkViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLinkViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ViewHelpers\ModuleLinkViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLinkViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ViewHelpers\ThumbnailViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Backend\ViewHelpers\ThumbnailViewHelper
     */
    protected static function getThumbnailViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\ThumbnailViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ViewHelpers\ThumbnailViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\ThumbnailViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ViewHelpers\Toolbar\AttributesViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Backend\ViewHelpers\Toolbar\AttributesViewHelper
     */
    protected static function getAttributesViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\Toolbar\\AttributesViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ViewHelpers\Toolbar\AttributesViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\Toolbar\\AttributesViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ViewHelpers\Toolbar\IfHasDropdownViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Backend\ViewHelpers\Toolbar\IfHasDropdownViewHelper
     */
    protected static function getIfHasDropdownViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\Toolbar\\IfHasDropdownViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ViewHelpers\Toolbar\IfHasDropdownViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\Toolbar\\IfHasDropdownViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ViewHelpers\TypoScript\FineDiffViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Backend\ViewHelpers\TypoScript\FineDiffViewHelper
     */
    protected static function getFineDiffViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\TypoScript\\FineDiffViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ViewHelpers\TypoScript\FineDiffViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\TypoScript\\FineDiffViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ViewHelpers\Uri\EditRecordViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Backend\ViewHelpers\Uri\EditRecordViewHelper
     */
    protected static function getEditRecordViewHelper2Service($container)
    {
        $container->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\Uri\\EditRecordViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ViewHelpers\Uri\EditRecordViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\Uri\\EditRecordViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ViewHelpers\Uri\NewRecordViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Backend\ViewHelpers\Uri\NewRecordViewHelper
     */
    protected static function getNewRecordViewHelper2Service($container)
    {
        $container->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\Uri\\NewRecordViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ViewHelpers\Uri\NewRecordViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\Uri\\NewRecordViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\View\AuthenticationStyleInformation' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\View\AuthenticationStyleInformation
     */
    protected static function getAuthenticationStyleInformationService($container)
    {
        $container->services['TYPO3\\CMS\\Backend\\View\\AuthenticationStyleInformation'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\View\AuthenticationStyleInformation::class, ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)));

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Backend\\View\\AuthenticationStyleInformation'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\View\BackendLayoutView' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\View\BackendLayoutView
     */
    protected static function getBackendLayoutViewService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\View\\BackendLayoutView'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\View\BackendLayoutView::class, ($container->services['TYPO3\\CMS\\Backend\\View\\BackendLayout\\DataProviderCollection'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\View\BackendLayout\DataProviderCollection::class)), ($container->services['TYPO3\\CMS\\Core\\TypoScript\\TypoScriptStringFactory'] ?? self::getTypoScriptStringFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\View\BackendLayout\DataProviderCollection' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\View\BackendLayout\DataProviderCollection
     */
    protected static function getDataProviderCollectionService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\View\\BackendLayout\\DataProviderCollection'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\View\BackendLayout\DataProviderCollection::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\View\BackendLayout\DataProviderContext' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\View\BackendLayout\DataProviderContext
     */
    protected static function getDataProviderContextService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\View\\BackendLayout\\DataProviderContext'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\View\BackendLayout\DataProviderContext::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\View\BackendLayout\RecordRememberer' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\View\BackendLayout\RecordRememberer
     */
    protected static function getRecordRemembererService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\View\\BackendLayout\\RecordRememberer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\View\BackendLayout\RecordRememberer::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\View\PageLayoutViewDrawEmptyColposContent' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\View\PageLayoutViewDrawEmptyColposContent
     */
    protected static function getPageLayoutViewDrawEmptyColposContentService($container)
    {
        return $container->services['TYPO3\\CMS\\Backend\\View\\PageLayoutViewDrawEmptyColposContent'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\View\PageLayoutViewDrawEmptyColposContent::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\View\RecordSearchBoxComponent' autowired service.
     *
     * @return \TYPO3\CMS\Backend\View\RecordSearchBoxComponent
     */
    protected static function getRecordSearchBoxComponentService($container)
    {
        $container->factories['TYPO3\\CMS\\Backend\\View\\RecordSearchBoxComponent'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\View\RecordSearchBoxComponent::class, ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)));
        };

        return $container->factories['TYPO3\\CMS\\Backend\\View\\RecordSearchBoxComponent']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Belog\Controller\BackendLogController' autowired service.
     *
     * @return \TYPO3\CMS\Belog\Controller\BackendLogController
     */
    protected static function getBackendLogControllerService($container)
    {
        $container->factories['TYPO3\\CMS\\Belog\\Controller\\BackendLogController'] = function ($container) {
            $a = ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container));

            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Belog\Controller\BackendLogController::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), $a, ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), ($container->services['TYPO3\\CMS\\Belog\\Domain\\Repository\\LogEntryRepository'] ?? self::getLogEntryRepositoryService($container)), ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)));

            $instance->injectResponseFactory(($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)));
            $instance->injectStreamFactory(($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectValidatorResolver(($container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? self::getValidatorResolverService($container)));
            $instance->injectViewResolver(($container->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $container)));
            $instance->injectReflectionService(($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)));
            $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
            $instance->injectMvcPropertyMappingConfigurationService(($container->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? self::getMvcPropertyMappingConfigurationServiceService($container)));
            $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
            $instance->injectPropertyMapper(($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? self::getPropertyMapperService($container)));
            $instance->injectInternalFlashMessageService($a);
            $instance->injectInternalExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Belog\\Controller\\BackendLogController']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Belog\Controller\SystemInformationController' shared autowired service.
     *
     * @return \TYPO3\CMS\Belog\Controller\SystemInformationController
     */
    protected static function getSystemInformationController2Service($container)
    {
        return $container->services['TYPO3\\CMS\\Belog\\Controller\\SystemInformationController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Belog\Controller\SystemInformationController::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Belog\Domain\Repository\LogEntryRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Belog\Domain\Repository\LogEntryRepository
     */
    protected static function getLogEntryRepositoryService($container)
    {
        $container->services['TYPO3\\CMS\\Belog\\Domain\\Repository\\LogEntryRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Belog\Domain\Repository\LogEntryRepository::class);

        $instance->injectQuerySettings(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Typo3QuerySettings::class, ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)), ($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container))));
        $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));
        $instance->initializeObject();

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Belog\ViewHelpers\Be\PagePathViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Belog\ViewHelpers\Be\PagePathViewHelper
     */
    protected static function getPagePathViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Belog\\ViewHelpers\\Be\\PagePathViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Belog\ViewHelpers\Be\PagePathViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Belog\\ViewHelpers\\Be\\PagePathViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Belog\ViewHelpers\FormatDetailsViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Belog\ViewHelpers\FormatDetailsViewHelper
     */
    protected static function getFormatDetailsViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Belog\\ViewHelpers\\FormatDetailsViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Belog\ViewHelpers\FormatDetailsViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Belog\\ViewHelpers\\FormatDetailsViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Belog\ViewHelpers\UsernameViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Belog\ViewHelpers\UsernameViewHelper
     */
    protected static function getUsernameViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Belog\\ViewHelpers\\UsernameViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Belog\ViewHelpers\UsernameViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Belog\\ViewHelpers\\UsernameViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Belog\ViewHelpers\WorkspaceTitleViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Belog\ViewHelpers\WorkspaceTitleViewHelper
     */
    protected static function getWorkspaceTitleViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Belog\\ViewHelpers\\WorkspaceTitleViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Belog\ViewHelpers\WorkspaceTitleViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Belog\\ViewHelpers\\WorkspaceTitleViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Beuser\Controller\BackendUserController' autowired service.
     *
     * @return \TYPO3\CMS\Beuser\Controller\BackendUserController
     */
    protected static function getBackendUserControllerService($container)
    {
        $container->factories['TYPO3\\CMS\\Beuser\\Controller\\BackendUserController'] = function ($container) {
            $a = ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container));
            $b = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
            $c = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));
            $d = ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container));

            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Beuser\Controller\BackendUserController::class, ($container->services['TYPO3\\CMS\\Beuser\\Domain\\Repository\\BackendUserRepository'] ?? self::getBackendUserRepositoryService($container)), ($container->services['TYPO3\\CMS\\Beuser\\Domain\\Repository\\BackendUserGroupRepository'] ?? self::getBackendUserGroupRepositoryService($container)), ($container->privates['TYPO3\\CMS\\Beuser\\Domain\\Repository\\BackendUserSessionRepository'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Beuser\Domain\Repository\BackendUserSessionRepository::class)), ($container->privates['TYPO3\\CMS\\Beuser\\Service\\UserInformationService'] ?? self::getUserInformationServiceService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $a, $b, $c, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), $d, ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), $c, $b, $a, ($container->services['TYPO3\\CMS\\Beuser\\Domain\\Repository\\FileMountRepository'] ?? self::getFileMountRepositoryService($container)));

            $instance->injectResponseFactory(($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)));
            $instance->injectStreamFactory(($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectValidatorResolver(($container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? self::getValidatorResolverService($container)));
            $instance->injectViewResolver(($container->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $container)));
            $instance->injectReflectionService(($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)));
            $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
            $instance->injectMvcPropertyMappingConfigurationService(($container->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? self::getMvcPropertyMappingConfigurationServiceService($container)));
            $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
            $instance->injectPropertyMapper(($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? self::getPropertyMapperService($container)));
            $instance->injectInternalFlashMessageService($d);
            $instance->injectInternalExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Beuser\\Controller\\BackendUserController']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Beuser\Controller\PermissionController' shared autowired service.
     *
     * @return \TYPO3\CMS\Beuser\Controller\PermissionController
     */
    protected static function getPermissionControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container));
        $b = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $c = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));
        $d = ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container));

        return $container->services['TYPO3\\CMS\\Beuser\\Controller\\PermissionController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Beuser\Controller\PermissionController::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $a, $b, $c, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), $d), $a, $b, $c, ($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)), $d);
    }

    /**
     * Gets the public 'TYPO3\CMS\Beuser\Domain\Repository\BackendUserGroupRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Beuser\Domain\Repository\BackendUserGroupRepository
     */
    protected static function getBackendUserGroupRepositoryService($container)
    {
        $container->services['TYPO3\\CMS\\Beuser\\Domain\\Repository\\BackendUserGroupRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Beuser\Domain\Repository\BackendUserGroupRepository::class);

        $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Beuser\Domain\Repository\BackendUserRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Beuser\Domain\Repository\BackendUserRepository
     */
    protected static function getBackendUserRepositoryService($container)
    {
        $container->services['TYPO3\\CMS\\Beuser\\Domain\\Repository\\BackendUserRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Beuser\Domain\Repository\BackendUserRepository::class);

        $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Beuser\Domain\Repository\FileMountRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Beuser\Domain\Repository\FileMountRepository
     */
    protected static function getFileMountRepositoryService($container)
    {
        $container->services['TYPO3\\CMS\\Beuser\\Domain\\Repository\\FileMountRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Beuser\Domain\Repository\FileMountRepository::class);

        $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));
        $instance->initializeObject();

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Beuser\ViewHelpers\ArrayElementViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Beuser\ViewHelpers\ArrayElementViewHelper
     */
    protected static function getArrayElementViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Beuser\\ViewHelpers\\ArrayElementViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Beuser\ViewHelpers\ArrayElementViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Beuser\\ViewHelpers\\ArrayElementViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Beuser\ViewHelpers\Display\TableAccessViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Beuser\ViewHelpers\Display\TableAccessViewHelper
     */
    protected static function getTableAccessViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Beuser\\ViewHelpers\\Display\\TableAccessViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Beuser\ViewHelpers\Display\TableAccessViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Beuser\\ViewHelpers\\Display\\TableAccessViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Beuser\ViewHelpers\IsArrayViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Beuser\ViewHelpers\IsArrayViewHelper
     */
    protected static function getIsArrayViewHelper2Service($container)
    {
        $container->factories['TYPO3\\CMS\\Beuser\\ViewHelpers\\IsArrayViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Beuser\ViewHelpers\IsArrayViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Beuser\\ViewHelpers\\IsArrayViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Beuser\ViewHelpers\MfaStatusViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Beuser\ViewHelpers\MfaStatusViewHelper
     */
    protected static function getMfaStatusViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Beuser\\ViewHelpers\\MfaStatusViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Beuser\ViewHelpers\MfaStatusViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Beuser\\ViewHelpers\\MfaStatusViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Beuser\ViewHelpers\PermissionsViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Beuser\ViewHelpers\PermissionsViewHelper
     */
    protected static function getPermissionsViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Beuser\\ViewHelpers\\PermissionsViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Beuser\ViewHelpers\PermissionsViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Beuser\\ViewHelpers\\PermissionsViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Beuser\ViewHelpers\SpriteIconForRecordViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Beuser\ViewHelpers\SpriteIconForRecordViewHelper
     */
    protected static function getSpriteIconForRecordViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Beuser\\ViewHelpers\\SpriteIconForRecordViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Beuser\ViewHelpers\SpriteIconForRecordViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Beuser\\ViewHelpers\\SpriteIconForRecordViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Beuser\ViewHelpers\SwitchUserViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Beuser\ViewHelpers\SwitchUserViewHelper
     */
    protected static function getSwitchUserViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Beuser\\ViewHelpers\\SwitchUserViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Beuser\ViewHelpers\SwitchUserViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Beuser\\ViewHelpers\\SwitchUserViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Adapter\EventDispatcherAdapter' shared service.
     *
     * @return \Symfony\Contracts\EventDispatcher\EventDispatcherInterface
     */
    protected static function getEventDispatcherAdapterService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Adapter\\EventDispatcherAdapter'] = \TYPO3\CMS\Core\ServiceProvider::getSymfonyEventDispatcher($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Authentication\GroupResolver' autowired service.
     *
     * @return \TYPO3\CMS\Core\Authentication\GroupResolver
     */
    protected static function getGroupResolverService($container)
    {
        $container->factories['TYPO3\\CMS\\Core\\Authentication\\GroupResolver'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Authentication\GroupResolver::class, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
        };

        return $container->factories['TYPO3\\CMS\\Core\\Authentication\\GroupResolver']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Authentication\Mfa\MfaProviderRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Authentication\Mfa\MfaProviderRegistry
     */
    protected static function getMfaProviderRegistryService($container)
    {
        $container->services['TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaProviderRegistry'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Authentication\Mfa\MfaProviderRegistry::class);

        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Authentication\Mfa\MfaProviderManifest::class, 'totp', 'LLL:EXT:core/Resources/Private/Language/locallang_mfa_provider.xlf:totp.title', 'LLL:EXT:core/Resources/Private/Language/locallang_mfa_provider.xlf:totp.description', 'LLL:EXT:core/Resources/Private/Language/locallang_mfa_provider.xlf:totp.setupInstructions', 'actions-qrcode', true, 'TYPO3\\CMS\\Core\\Authentication\\Mfa\\Provider\\TotpProvider', $container));
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Authentication\Mfa\MfaProviderManifest::class, 'recovery-codes', 'LLL:EXT:core/Resources/Private/Language/locallang_mfa_provider.xlf:recoveryCodes.title', 'LLL:EXT:core/Resources/Private/Language/locallang_mfa_provider.xlf:recoveryCodes.description', 'LLL:EXT:core/Resources/Private/Language/locallang_mfa_provider.xlf:recoveryCodes.setupInstructions', 'content-text-columns', false, 'TYPO3\\CMS\\Core\\Authentication\\Mfa\\Provider\\RecoveryCodesProvider', $container));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Authentication\Mfa\Provider\RecoveryCodesProvider' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Authentication\Mfa\Provider\RecoveryCodesProvider
     */
    protected static function getRecoveryCodesProviderService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Authentication\\Mfa\\Provider\\RecoveryCodesProvider'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Authentication\Mfa\Provider\RecoveryCodesProvider::class, ($container->services['TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaProviderRegistry'] ?? self::getMfaProviderRegistryService($container)), ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Authentication\Mfa\Provider\TotpProvider' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Authentication\Mfa\Provider\TotpProvider
     */
    protected static function getTotpProviderService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Authentication\\Mfa\\Provider\\TotpProvider'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Authentication\Mfa\Provider\TotpProvider::class, ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Cache\CacheManager' shared service.
     *
     * @return \TYPO3\CMS\Core\Cache\CacheManager
     */
    protected static function getCacheManagerService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Cache\\CacheManager'] = \TYPO3\CMS\Core\ServiceProvider::getCacheManager($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Cache\DatabaseSchemaService' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Cache\DatabaseSchemaService
     */
    protected static function getDatabaseSchemaServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Cache\\DatabaseSchemaService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Cache\DatabaseSchemaService::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Charset\CharsetConverter' shared service.
     *
     * @return \TYPO3\CMS\Core\Charset\CharsetConverter
     */
    protected static function getCharsetConverterService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Charset\\CharsetConverter'] = \TYPO3\CMS\Core\ServiceProvider::getCharsetConverter($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Command\CacheFlushCommand' shared service.
     *
     * @return \TYPO3\CMS\Core\Command\CacheFlushCommand
     */
    protected static function getCacheFlushCommandService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Command\\CacheFlushCommand'] = \TYPO3\CMS\Core\ServiceProvider::getCacheFlushCommand($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Command\CacheWarmupCommand' shared service.
     *
     * @return \TYPO3\CMS\Core\Command\CacheWarmupCommand
     */
    protected static function getCacheWarmupCommandService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Command\\CacheWarmupCommand'] = \TYPO3\CMS\Core\ServiceProvider::getCacheWarmupCommand($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Command\ConsumeMessagesCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Command\ConsumeMessagesCommand
     */
    protected static function getConsumeMessagesCommandService($container)
    {
        $container->services['TYPO3\\CMS\\Core\\Command\\ConsumeMessagesCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Command\ConsumeMessagesCommand::class, ($container->privates['messenger.bus.default'] ?? self::getMessenger_Bus_DefaultService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\Symfony\Component\DependencyInjection\Argument\ServiceLocator::class, $container->getService ??= $container->getService(...), [
            'doctrine' => ['privates', 'Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport', 'getDoctrineTransportService', false],
        ], [
            'doctrine' => 'Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport',
        ]), ($container->services['TYPO3\\CMS\\Core\\Messenger\\EventListener\\StopWorkerOnTimeLimitListener'] ?? self::getStopWorkerOnTimeLimitListenerService($container)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));

        $instance->setName('messenger:consume');
        $instance->setDescription('Consume messages');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Command\DumpAutoloadCommand' shared service.
     *
     * @return \TYPO3\CMS\Core\Command\DumpAutoloadCommand
     */
    protected static function getDumpAutoloadCommandService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Command\\DumpAutoloadCommand'] = \TYPO3\CMS\Core\ServiceProvider::getDumpAutoloadCommand($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Command\ExtensionListCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Command\ExtensionListCommand
     */
    protected static function getExtensionListCommandService($container)
    {
        $container->services['TYPO3\\CMS\\Core\\Command\\ExtensionListCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Command\ExtensionListCommand::class, ($container->services['_early.TYPO3\\CMS\\Core\\Package\\PackageManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Package\\PackageManager', 1)));

        $instance->setName('extension:list');
        $instance->setDescription('Shows the list of extensions available to the system');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Command\ListCommand' shared service.
     *
     * @return \TYPO3\CMS\Core\Command\ListCommand
     */
    protected static function getListCommandService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Command\\ListCommand'] = \TYPO3\CMS\Core\ServiceProvider::getListCommand($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Command\SendEmailCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Command\SendEmailCommand
     */
    protected static function getSendEmailCommandService($container)
    {
        $container->services['TYPO3\\CMS\\Core\\Command\\SendEmailCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Command\SendEmailCommand::class);

        $instance->setName('mailer:spool:send');
        $instance->setDescription('Sends emails from the spool');
        $instance->setAliases(['swiftmailer:spool:send']);

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Command\SiteListCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Command\SiteListCommand
     */
    protected static function getSiteListCommandService($container)
    {
        $container->services['TYPO3\\CMS\\Core\\Command\\SiteListCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Command\SiteListCommand::class, ($container->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? self::getSiteFinderService($container)));

        $instance->setName('site:list');
        $instance->setDescription('Shows the list of sites available to the system');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Command\SiteShowCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Command\SiteShowCommand
     */
    protected static function getSiteShowCommandService($container)
    {
        $container->services['TYPO3\\CMS\\Core\\Command\\SiteShowCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Command\SiteShowCommand::class, ($container->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? self::getSiteFinderService($container)));

        $instance->setName('site:show');
        $instance->setDescription('Shows the configuration of the specified site');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Composer\PackageArtifactBuilder' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Composer\PackageArtifactBuilder
     */
    protected static function getPackageArtifactBuilderService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Composer\\PackageArtifactBuilder'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Composer\PackageArtifactBuilder::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Configuration\Loader\PageTsConfigLoader_decorated_1' shared service.
     *
     * @return \TYPO3\CMS\Core\Configuration\Loader\PageTsConfigLoader
     */
    protected static function getPageTsConfigLoaderDecorated1Service($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Configuration\\Loader\\PageTsConfigLoader_decorated_1'] = \TYPO3\CMS\Core\ServiceProvider::configurePageTsConfigLoader($container, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\Loader\PageTsConfigLoader::class, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Configuration\PageTsConfig' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Configuration\PageTsConfig
     */
    protected static function getPageTsConfig2Service($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Configuration\\PageTsConfig'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\PageTsConfig::class, ($container->privates['cache.runtime'] ?? self::getCache_RuntimeService($container)), ($container->services['TYPO3\\CMS\\Core\\Configuration\\Loader\\PageTsConfigLoader_decorated_1'] ?? self::getPageTsConfigLoaderDecorated1Service($container)), ($container->services['TYPO3\\CMS\\Core\\Configuration\\Parser\\PageTsConfigParser'] ?? self::getPageTsConfigParserService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Configuration\Parser\PageTsConfigParser' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Configuration\Parser\PageTsConfigParser
     */
    protected static function getPageTsConfigParserService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Configuration\\Parser\\PageTsConfigParser'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\Parser\PageTsConfigParser::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\TypoScript\Parser\TypoScriptParser::class), ($container->services['TYPO3\\CMS\\Core\\Cache\\CacheManager'] ?? self::getCacheManagerService($container))->getCache('hash'));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Configuration\SiteConfiguration' shared service.
     *
     * @return \TYPO3\CMS\Core\Configuration\SiteConfiguration
     */
    protected static function getSiteConfigurationService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Configuration\\SiteConfiguration'] = \TYPO3\CMS\Core\ServiceProvider::getSiteConfiguration($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Console\CommandApplication' shared service.
     *
     * @return \TYPO3\CMS\Core\Console\CommandApplication
     */
    protected static function getCommandApplicationService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Console\\CommandApplication'] = \TYPO3\CMS\Core\ServiceProvider::getConsoleCommandApplication($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Console\CommandRegistry_decorated_2' shared service.
     *
     * @return \TYPO3\CMS\Core\Console\CommandRegistry
     */
    protected static function getCommandRegistryDecorated2Service($container)
    {
        $a = \TYPO3\CMS\Core\ServiceProvider::getConsoleCommandRegistry($container);
        $a->addLazyCommand('messenger:consume', 'TYPO3\\CMS\\Core\\Command\\ConsumeMessagesCommand', 'Consume messages', false, true, NULL);
        $a->addLazyCommand('extension:list', 'TYPO3\\CMS\\Core\\Command\\ExtensionListCommand', 'Shows the list of extensions available to the system', false, false, NULL);
        $a->addLazyCommand('mailer:spool:send', 'TYPO3\\CMS\\Core\\Command\\SendEmailCommand', 'Sends emails from the spool', false, true, NULL);
        $a->addLazyCommand('swiftmailer:spool:send', 'TYPO3\\CMS\\Core\\Command\\SendEmailCommand', 'Sends emails from the spool', false, false, 'mailer:spool:send');
        $a->addLazyCommand('site:list', 'TYPO3\\CMS\\Core\\Command\\SiteListCommand', 'Shows the list of sites available to the system', false, false, NULL);
        $a->addLazyCommand('site:show', 'TYPO3\\CMS\\Core\\Command\\SiteShowCommand', 'Shows the configuration of the specified site', false, false, NULL);
        $a->addLazyCommand('scheduler:run', 'TYPO3\\CMS\\Scheduler\\Command\\SchedulerCommand', 'Start the TYPO3 Scheduler from the command line.', false, false, NULL);
        $a->addLazyCommand('scheduler:execute', 'TYPO3\\CMS\\Scheduler\\Command\\SchedulerExecuteCommand', 'Execute given Scheduler tasks.', false, false, NULL);
        $a->addLazyCommand('scheduler:list', 'TYPO3\\CMS\\Scheduler\\Command\\SchedulerListCommand', 'List all Scheduler tasks.', false, false, NULL);
        $a->addLazyCommand('backend:user:create', 'TYPO3\\CMS\\Backend\\Command\\CreateBackendUserCommand', 'Create a backend user', false, false, NULL);
        $a->addLazyCommand('backend:lock', 'TYPO3\\CMS\\Backend\\Command\\LockBackendCommand', 'Lock the TYPO3 Backend', false, true, NULL);
        $a->addLazyCommand('referenceindex:update', 'TYPO3\\CMS\\Backend\\Command\\ReferenceIndexUpdateCommand', 'Update the reference index of TYPO3', false, true, NULL);
        $a->addLazyCommand('backend:resetpassword', 'TYPO3\\CMS\\Backend\\Command\\ResetPasswordCommand', 'Trigger a password reset for a backend user', false, false, NULL);
        $a->addLazyCommand('backend:unlock', 'TYPO3\\CMS\\Backend\\Command\\UnlockBackendCommand', 'Unlock the TYPO3 Backend', false, true, NULL);
        $a->addLazyCommand('impexp:export', 'TYPO3\\CMS\\Impexp\\Command\\ExportCommand', 'Exports a T3D / XML file with content of a page tree', false, true, NULL);
        $a->addLazyCommand('impexp:import', 'TYPO3\\CMS\\Impexp\\Command\\ImportCommand', 'Imports a T3D / XML file with content into a page tree', false, true, NULL);
        $a->addLazyCommand('cleanup:flexforms', 'TYPO3\\CMS\\Lowlevel\\Command\\CleanFlexFormsCommand', 'Updates all database records which have a FlexForm field and the XML data does not match the chosen datastructure.', false, true, NULL);
        $a->addLazyCommand('cleanup:localprocessedfiles', 'TYPO3\\CMS\\Lowlevel\\Command\\CleanUpLocalProcessedFilesCommand', 'Delete processed files and their database records.', false, true, NULL);
        $a->addLazyCommand('cleanup:deletedrecords', 'TYPO3\\CMS\\Lowlevel\\Command\\DeletedRecordsCommand', 'Permanently deletes all records marked as "deleted" in the database.', false, true, NULL);
        $a->addLazyCommand('syslog:list', 'TYPO3\\CMS\\Lowlevel\\Command\\ListSysLogCommand', 'Show entries from the sys_log database table of the last 24 hours.', false, false, NULL);
        $a->addLazyCommand('cleanup:missingrelations', 'TYPO3\\CMS\\Lowlevel\\Command\\MissingRelationsCommand', 'Find all record references pointing to a non-existing record', false, true, NULL);
        $a->addLazyCommand('cleanup:orphanrecords', 'TYPO3\\CMS\\Lowlevel\\Command\\OrphanRecordsCommand', 'Find and delete records that have lost their connection with the page tree.', false, true, NULL);
        $a->addLazyCommand('redirects:checkintegrity', 'TYPO3\\CMS\\Redirects\\Command\\CheckIntegrityCommand', 'Check integrity of redirects', false, true, NULL);
        $a->addLazyCommand('redirects:cleanup', 'TYPO3\\CMS\\Redirects\\Command\\CleanupRedirectsCommand', 'Cleanup old redirects periodically for given constraints like days, hit count or domains.', false, true, NULL);
        $a->addLazyCommand('extension:activate', 'TYPO3\\CMS\\Extensionmanager\\Command\\ActivateExtensionCommand', 'Activates an extension by key', true, false, NULL);
        $a->addLazyCommand('extensionmanager:extension:install', 'TYPO3\\CMS\\Extensionmanager\\Command\\ActivateExtensionCommand', 'Activates an extension by key', true, false, 'extension:activate');
        $a->addLazyCommand('extension:install', 'TYPO3\\CMS\\Extensionmanager\\Command\\ActivateExtensionCommand', 'Activates an extension by key', true, false, 'extension:activate');
        $a->addLazyCommand('extension:deactivate', 'TYPO3\\CMS\\Extensionmanager\\Command\\DeactivateExtensionCommand', 'Deactivates an extension by key', true, false, NULL);
        $a->addLazyCommand('extensionmanager:extension:uninstall', 'TYPO3\\CMS\\Extensionmanager\\Command\\DeactivateExtensionCommand', 'Deactivates an extension by key', true, false, 'extension:deactivate');
        $a->addLazyCommand('extension:uninstall', 'TYPO3\\CMS\\Extensionmanager\\Command\\DeactivateExtensionCommand', 'Deactivates an extension by key', true, false, 'extension:deactivate');
        $a->addLazyCommand('extension:setup', 'TYPO3\\CMS\\Extensionmanager\\Command\\SetupExtensionsCommand', 'Set up extensions', false, false, NULL);
        $a->addLazyCommand('workspace:autopublish', 'TYPO3\\CMS\\Workspaces\\Command\\AutoPublishCommand', 'Publish a workspace with a publication date.', false, true, NULL);
        $a->addLazyCommand('cleanup:previewlinks', 'TYPO3\\CMS\\Workspaces\\Command\\CleanupPreviewLinksCommand', 'Clean up expired preview links from shared workspace previews.', false, true, NULL);
        $a->addLazyCommand('cleanup:versions', 'TYPO3\\CMS\\Workspaces\\Command\\WorkspaceVersionRecordsCommand', 'Find all versioned records and possibly cleans up invalid records in the database.', false, true, NULL);
        $a->addLazyCommand('news:rebuildProxyClasses', 'GeorgRinger\\News\\Command\\ProxyClassRebuildCommand', 'Rebuild the proxy classes used to extend EXT:news', false, false, NULL);
        $a->addLazyCommand('container:deleteChildrenWithNonExistingParent', 'B13\\Container\\Command\\DeleteChildrenWithNonExistingParentCommand', 'delete all child records with a non existing parent record (they are displayed as unsued)', false, false, NULL);
        $a->addLazyCommand('container:deleteChildrenWithWrongPid', 'B13\\Container\\Command\\DeleteChildrenWithWrongPidCommand', 'delete all child records with pid neq containers pid', false, false, NULL);
        $a->addLazyCommand('container:fixContainerParentForConnectedMode', 'B13\\Container\\Command\\FixContainerParentForConnectedModeCommand', 'tx_container_parent of children in connected mode should point to default language container', false, false, NULL);
        $a->addLazyCommand('container:fixLanguageMode', 'B13\\Container\\Command\\FixLanguageModeCommand', 'connect children of connected container if possible, else disconnect container', false, false, NULL);
        $a->addLazyCommand('container:integrity', 'B13\\Container\\Command\\IntegrityCommand', 'Checks integrity of containers', false, true, NULL);
        $a->addLazyCommand('container:sorting', 'B13\\Container\\Command\\SortingCommand', 'Resort Content Elements', false, false, NULL);
        $a->addLazyCommand('container:sorting-in-page', 'B13\\Container\\Command\\SortingInPageCommand', 'Resort Content Elements', false, false, NULL);
        $a->addLazyCommand('calendarize:cleanup', 'HDNET\\Calendarize\\Command\\CleanupCommandController', 'Remove outdated events to keep a small footprint', false, true, NULL);
        $a->addLazyCommand('calendarize:import', 'HDNET\\Calendarize\\Command\\ImportCommandController', 'Imports a iCalendar ICS into a page ID', false, true, NULL);
        $a->addLazyCommand('calendarize:reindex', 'HDNET\\Calendarize\\Command\\ReindexCommandController', 'Reindex all events', false, true, NULL);

        return $container->services['TYPO3\\CMS\\Core\\Console\\CommandRegistry_decorated_2'] = \TYPO3\CMS\Install\ServiceProvider::configureCommands($container, \TYPO3\CMS\Core\ServiceProvider::configureCommands($container, $a));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Context\Context' shared service.
     *
     * @return \TYPO3\CMS\Core\Context\Context
     */
    protected static function getContextService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Context\\Context'] = \TYPO3\CMS\Core\ServiceProvider::getContext($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Controller\FileDumpController' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Controller\FileDumpController
     */
    protected static function getFileDumpControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Controller\\FileDumpController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Controller\FileDumpController::class, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? self::getResourceFactoryService($container)), ($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Controller\PasswordGeneratorController' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Controller\PasswordGeneratorController
     */
    protected static function getPasswordGeneratorControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Controller\\PasswordGeneratorController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Controller\PasswordGeneratorController::class, ($container->privates['TYPO3\\CMS\\Core\\Crypto\\Random'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Crypto\Random::class)), ($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)), ($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Core\BootService' shared service.
     *
     * @return \TYPO3\CMS\Core\Core\BootService
     */
    protected static function getBootServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Core\\BootService'] = \TYPO3\CMS\Core\ServiceProvider::getBootService($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Core\ClassLoadingInformation' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Core\ClassLoadingInformation
     */
    protected static function getClassLoadingInformationService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Core\\ClassLoadingInformation'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Core\ClassLoadingInformation::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Core\Event\WarmupBaseTcaCache' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Core\Event\WarmupBaseTcaCache
     */
    protected static function getWarmupBaseTcaCacheService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Core\\Event\\WarmupBaseTcaCache'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Core\Event\WarmupBaseTcaCache::class, ($container->services['_early.cache.core'] ?? $container->get('_early.cache.core', 1)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Crypto\PasswordHashing\PasswordHashFactory' shared service.
     *
     * @return \TYPO3\CMS\Core\Crypto\PasswordHashing\PasswordHashFactory
     */
    protected static function getPasswordHashFactoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Crypto\\PasswordHashing\\PasswordHashFactory'] = \TYPO3\CMS\Core\ServiceProvider::getPasswordHashFactory($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\DataHandling\ItemProcessingService' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\DataHandling\ItemProcessingService
     */
    protected static function getItemProcessingServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\DataHandling\\ItemProcessingService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\ItemProcessingService::class, ($container->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? self::getSiteFinderService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\DataHandling\PageDoktypeRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\DataHandling\PageDoktypeRegistry
     */
    protected static function getPageDoktypeRegistryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\DataHandling\\PageDoktypeRegistry'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\PageDoktypeRegistry::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\DataHandling\SoftReference\EmailSoftReferenceParser' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\DataHandling\SoftReference\EmailSoftReferenceParser
     */
    protected static function getEmailSoftReferenceParserService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\EmailSoftReferenceParser'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\EmailSoftReferenceParser::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\DataHandling\SoftReference\ExtensionPathSoftReferenceParser' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\DataHandling\SoftReference\ExtensionPathSoftReferenceParser
     */
    protected static function getExtensionPathSoftReferenceParserService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\ExtensionPathSoftReferenceParser'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\ExtensionPathSoftReferenceParser::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\DataHandling\SoftReference\NotifySoftReferenceParser' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\DataHandling\SoftReference\NotifySoftReferenceParser
     */
    protected static function getNotifySoftReferenceParserService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\NotifySoftReferenceParser'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\NotifySoftReferenceParser::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\DataHandling\SoftReference\SoftReferenceParserFactory' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\DataHandling\SoftReference\SoftReferenceParserFactory
     */
    protected static function getSoftReferenceParserFactoryService($container)
    {
        $container->services['TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\SoftReferenceParserFactory'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\SoftReferenceParserFactory::class, ($container->privates['cache.runtime'] ?? self::getCache_RuntimeService($container)), ($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\SoftReferenceParserFactory'));

        $instance->addParser(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\EmailSoftReferenceParser::class), 'email');
        $instance->addParser(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\ExtensionPathSoftReferenceParser::class), 'ext_fileref');
        $instance->addParser(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\NotifySoftReferenceParser::class), 'notify');
        $instance->addParser(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\SubstituteSoftReferenceParser::class), 'substitute');
        $instance->addParser(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\TypolinkSoftReferenceParser::class, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container))), 'typolink');
        $instance->addParser(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\TypolinkTagSoftReferenceParser::class), 'typolink_tag');
        $instance->addParser(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\UrlSoftReferenceParser::class), 'url');
        $instance->addParser(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\SoftReference\FormPersistenceIdentifierSoftReferenceParser::class), 'formPersistenceIdentifier');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\DataHandling\SoftReference\SubstituteSoftReferenceParser' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\DataHandling\SoftReference\SubstituteSoftReferenceParser
     */
    protected static function getSubstituteSoftReferenceParserService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\SubstituteSoftReferenceParser'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\SubstituteSoftReferenceParser::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\DataHandling\SoftReference\TypolinkSoftReferenceParser' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\DataHandling\SoftReference\TypolinkSoftReferenceParser
     */
    protected static function getTypolinkSoftReferenceParserService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\TypolinkSoftReferenceParser'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\TypolinkSoftReferenceParser::class, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\DataHandling\SoftReference\TypolinkTagSoftReferenceParser' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\DataHandling\SoftReference\TypolinkTagSoftReferenceParser
     */
    protected static function getTypolinkTagSoftReferenceParserService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\TypolinkTagSoftReferenceParser'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\TypolinkTagSoftReferenceParser::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\DataHandling\SoftReference\UrlSoftReferenceParser' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\DataHandling\SoftReference\UrlSoftReferenceParser
     */
    protected static function getUrlSoftReferenceParserService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\UrlSoftReferenceParser'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\UrlSoftReferenceParser::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Database\ConnectionPool' shared service.
     *
     * @return \TYPO3\CMS\Core\Database\ConnectionPool
     */
    protected static function getConnectionPoolService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] = \TYPO3\CMS\Core\ServiceProvider::getConnectionPool($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Database\Schema\SchemaMigrator' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Database\Schema\SchemaMigrator
     */
    protected static function getSchemaMigratorService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Database\\Schema\\SchemaMigrator'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Database\Schema\SchemaMigrator::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Database\Schema\SqlReader' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Database\Schema\SqlReader
     */
    protected static function getSqlReaderService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Database\\Schema\\SqlReader'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Database\Schema\SqlReader::class, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->services['_early.TYPO3\\CMS\\Core\\Package\\PackageManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Package\\PackageManager', 1)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Domain\Access\RecordAccessVoter' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Domain\Access\RecordAccessVoter
     */
    protected static function getRecordAccessVoterService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Domain\\Access\\RecordAccessVoter'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Domain\Access\RecordAccessVoter::class, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Error\DebugExceptionHandler' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Error\DebugExceptionHandler
     */
    protected static function getDebugExceptionHandlerService($container)
    {
        $container->services['TYPO3\\CMS\\Core\\Error\\DebugExceptionHandler'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Error\DebugExceptionHandler::class);

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Core\\Error\\DebugExceptionHandler'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Error\ProductionExceptionHandler' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Error\ProductionExceptionHandler
     */
    protected static function getProductionExceptionHandlerService($container)
    {
        $container->services['TYPO3\\CMS\\Core\\Error\\ProductionExceptionHandler'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Error\ProductionExceptionHandler::class);

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Core\\Error\\ProductionExceptionHandler'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\EventDispatcher\EventDispatcher' shared service.
     *
     * @return \TYPO3\CMS\Core\EventDispatcher\EventDispatcher
     */
    protected static function getEventDispatcher2Service($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\EventDispatcher\\EventDispatcher'] = \TYPO3\CMS\Core\ServiceProvider::getEventDispatcher($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\EventDispatcher\ListenerProvider_decorated_3' shared service.
     *
     * @return \TYPO3\CMS\Core\EventDispatcher\ListenerProvider
     */
    protected static function getListenerProviderDecorated3Service($container)
    {
        $a = \TYPO3\CMS\Core\ServiceProvider::getEventListenerProvider($container);
        $a->addListener('TYPO3\\CMS\\Core\\Database\\Event\\AlterTableDefinitionStatementsEvent', 'TYPO3\\CMS\\Core\\Cache\\DatabaseSchemaService', 'addCachingFrameworkDatabaseSchema', 'caching-framework');
        $a->addListener('TYPO3\\CMS\\Core\\Database\\Event\\AlterTableDefinitionStatementsEvent', 'HDNET\\Calendarize\\EventListener\\CalendarizeFieldListener', NULL, 'calendarizeField');
        $a->addListener('TYPO3\\CMS\\Core\\Database\\Event\\AlterTableDefinitionStatementsEvent', 'TYPO3\\CMS\\IndexedSearch\\Service\\DatabaseSchemaService', 'addMysqlFulltextIndex', 'indexed-search');
        $a->addListener('TYPO3\\CMS\\Core\\Package\\Event\\AfterPackageActivationEvent', 'TYPO3\\CMS\\Core\\Core\\ClassLoadingInformation', 'updateClassLoadingInformationAfterPackageActivation', 'non-composer-class-loader');
        $a->addListener('TYPO3\\CMS\\Core\\Package\\Event\\AfterPackageDeactivationEvent', 'TYPO3\\CMS\\Core\\Core\\ClassLoadingInformation', 'updateClassLoadingInformationAfterPackageDeactivation', 'non-composer-class-loader');
        $a->addListener('TYPO3\\CMS\\Core\\Cache\\Event\\CacheWarmupEvent', 'TYPO3\\CMS\\Core\\ExpressionLanguage\\ProviderConfigurationLoader', 'warmupCaches', 'TYPO3\\CMS\\Core\\ExpressionLanguage\\ProviderConfigurationLoader');
        $a->addListener('TYPO3\\CMS\\Core\\Cache\\Event\\CacheWarmupEvent', 'TYPO3\\CMS\\Core\\Localization\\CacheWarmer', 'warmupCaches', 'TYPO3\\CMS\\Core\\Localization\\CacheWarmer');
        $a->addListener('TYPO3\\CMS\\Core\\Cache\\Event\\CacheWarmupEvent', 'TYPO3\\CMS\\Core\\Page\\ImportMapCacheWarmer', 'warmupCaches', 'TYPO3\\CMS\\Core\\Page\\ImportMapCacheWarmer');
        $a->addListener('Symfony\\Component\\Messenger\\Event\\WorkerRunningEvent', 'TYPO3\\CMS\\Core\\Messenger\\EventListener\\StopWorkerOnTimeLimitListener', 'onWorkerRunning', 'messenger-stopontime-on-worker-running');
        $a->addListener('Symfony\\Component\\Messenger\\Event\\WorkerStartedEvent', 'TYPO3\\CMS\\Core\\Messenger\\EventListener\\StopWorkerOnTimeLimitListener', 'onWorkerStarted', 'messenger-stopontime-on-worker-started');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileMetaDataUpdatedEvent', 'TYPO3\\CMS\\Core\\Resource\\MetaDataEventListener', 'afterFileMetaDataUpdated', 'synchronize-file-meta-data-translations-after-update');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileAddedEvent', 'TYPO3\\CMS\\Core\\Resource\\Processing\\FileDeletionAspect', 'cleanupProcessedFilesPostFileAdd', 'delete-processed-files-after-add');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileReplacedEvent', 'TYPO3\\CMS\\Core\\Resource\\Processing\\FileDeletionAspect', 'cleanupProcessedFilesPostFileReplace', 'delete-processed-files-after-replace');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileDeletedEvent', 'TYPO3\\CMS\\Core\\Resource\\Processing\\FileDeletionAspect', 'removeFromRepositoryAfterFileDeleted', 'delete-processed-files-after-delete');
        $a->addListener('TYPO3\\CMS\\Backend\\Form\\Event\\ModifyEditFormUserAccessEvent', 'TYPO3\\CMS\\Core\\Resource\\Security\\FileMetadataPermissionsAspect', 'isAllowedToShowEditForm', 'evaluate-file-meta-data-edit-form-access');
        $a->addListener('TYPO3\\CMS\\Backend\\Form\\Event\\ModifyEditFormUserAccessEvent', 'TYPO3\\CMS\\Workspaces\\Hook\\BackendUtilityHook', 'displayEditingStagedElementInformation', 'typo3-workspaces/display-editing-staged-element-information');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\AfterResourceStorageInitializationEvent', 'TYPO3\\CMS\\Core\\Resource\\Security\\StoragePermissionsAspect', 'addUserPermissionsToStorage', 'backend-user-permissions');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileAddedEvent', 'TYPO3\\CMS\\Form\\Slot\\FilePersistenceSlot', 'onPreFileAdd', 'form-framework/add');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileAddedEvent', 'TYPO3\\CMS\\Core\\Resource\\Security\\SvgEventListener', 'beforeFileAdded', 'svg-resource-storage-listener-before-file-added');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileReplacedEvent', 'TYPO3\\CMS\\Form\\Slot\\FilePersistenceSlot', 'onPreFileReplace', 'form-framework/replace');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileReplacedEvent', 'TYPO3\\CMS\\Core\\Resource\\Security\\SvgEventListener', 'beforeFileReplaced', 'svg-resource-storage-listener-before-file-replaced');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileContentsSetEvent', 'TYPO3\\CMS\\Core\\Resource\\Security\\SvgEventListener', 'afterFileContentsSet', 'svg-resource-storage-listener-after-file-content-set');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\AfterFolderRenamedEvent', 'TYPO3\\CMS\\Core\\Resource\\SynchronizeFolderRelations', 'synchronizeFileCollectionsAfterRename', 'synchronize-file-collections-after-folder-renamed');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\AfterFolderRenamedEvent', 'TYPO3\\CMS\\Core\\Resource\\SynchronizeFolderRelations', 'synchronizeFilemountsAfterRename', 'synchronize-filemounts-after-folder-renamed');
        $a->addListener('TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Event\\InvestigateMutationsEvent', 'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Processing\\AssetHandler', NULL, 'security-csp-asset-handler');
        $a->addListener('TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Event\\InvestigateMutationsEvent', 'TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Processing\\GoogleMapsHandler', NULL, 'security-csp-google-maps-handler');
        $a->addListener('TYPO3\\CMS\\Backend\\Backend\\Event\\SystemInformationToolbarCollectorEvent', 'TYPO3\\CMS\\Belog\\Controller\\SystemInformationController', 'appendMessage', 'belog/show-latest-errors');
        $a->addListener('TYPO3\\CMS\\Backend\\Backend\\Event\\SystemInformationToolbarCollectorEvent', 'TYPO3\\CMS\\Scheduler\\SystemInformation\\ToolbarItemProvider', 'getItem', 'scheduler/show-latest-errors');
        $a->addListener('TYPO3\\CMS\\Backend\\Module\\BeforeModuleCreationEvent', 'TYPO3\\CMS\\Extbase\\EventListener\\AddDefaultModuleIcon', NULL, 'extbase/add-default-extbase-module-icon');
        $a->addListener('TYPO3\\CMS\\Core\\Page\\Event\\ResolveJavaScriptImportEvent', 'TYPO3\\CMS\\Backend\\ContextMenu\\ImportMapConfigurator', NULL, 'TYPO3\\CMS\\Backend\\ContextMenu\\ImportMapConfigurator');
        $a->addListener('TYPO3\\CMS\\Backend\\Controller\\Event\\AfterBackendPageRenderEvent', 'TYPO3\\CMS\\Backend\\EventListener\\AfterBackendPageRenderEventListener', NULL, 'TYPO3\\CMS\\Backend\\EventListener\\AfterBackendPageRenderEventListener');
        $a->addListener('TYPO3\\CMS\\Backend\\Controller\\Event\\AfterBackendPageRenderEvent', 'TYPO3\\CMS\\Dashboard\\EventListener\\AfterBackendPageRenderEventListener', NULL, 'TYPO3\\CMS\\Dashboard\\EventListener\\AfterBackendPageRenderEventListener');
        $a->addListener('TYPO3\\CMS\\Backend\\Controller\\Event\\AfterBackendPageRenderEvent', 'TYPO3\\CMS\\Redirects\\EventListener\\AfterBackendPageRendererEventListener', NULL, 'redirects-after-backend-page-renderer-event');
        $a->addListener('TYPO3\\CMS\\Core\\Authentication\\Event\\LoginAttemptFailedEvent', 'TYPO3\\CMS\\Backend\\EventListener\\FailedLoginAttemptNotification', NULL, 'typo3/cms-backend/failed-login-attempt-notification');
        $a->addListener('TYPO3\\CMS\\Core\\Authentication\\Event\\LoginAttemptFailedEvent', 'TYPO3\\CMS\\Backend\\EventListener\\FailedLoginAttemptNotification', NULL, 'typo3/cms-backend/failed-mfa-verification-notification');
        $a->addListener('TYPO3\\CMS\\Core\\Authentication\\Event\\MfaVerificationFailedEvent', 'TYPO3\\CMS\\Backend\\EventListener\\FailedLoginAttemptNotification', NULL, 'typo3/cms-backend/failed-login-attempt-notification');
        $a->addListener('TYPO3\\CMS\\Core\\Authentication\\Event\\MfaVerificationFailedEvent', 'TYPO3\\CMS\\Backend\\EventListener\\FailedLoginAttemptNotification', NULL, 'typo3/cms-backend/failed-mfa-verification-notification');
        $a->addListener('TYPO3\\CMS\\Core\\Configuration\\Event\\SiteConfigurationLoadedEvent', 'TYPO3\\CMS\\Backend\\EventListener\\SilentSiteLanguageFlagMigration', NULL, 'TYPO3\\CMS\\Backend\\EventListener\\SilentSiteLanguageFlagMigration');
        $a->addListener('TYPO3\\CMS\\Backend\\Search\\Event\\ModifyResultItemInLiveSearchEvent', 'TYPO3\\CMS\\Backend\\Search\\EventListener\\AddLiveSearchResultActionsListener', NULL, 'typo3/cms-backend/add-live-search-result-actions-listener');
        $a->addListener('TYPO3\\CMS\\Backend\\Search\\Event\\BeforeSearchInDatabaseRecordProviderEvent', 'TYPO3\\CMS\\Backend\\Search\\EventListener\\ExcludePagesFromSearchFieldsLookup', NULL, 'typo3/cms-backend/exclude-pages-from-search-fields-lookup');
        $a->addListener('TYPO3\\CMS\\Core\\Tree\\Event\\ModifyTreeDataEvent', 'TYPO3\\CMS\\Backend\\Security\\CategoryPermissionsAspect', 'addUserPermissionsToCategoryTreeData', 'backend-user-permissions');
        $a->addListener('TYPO3\\CMS\\Core\\Authentication\\Event\\AfterUserLoggedInEvent', 'TYPO3\\CMS\\Backend\\Security\\EmailLoginNotification', 'emailAtLogin', 'typo3/cms-backend/login-notification');
        $a->addListener('TYPO3\\CMS\\Backend\\View\\Event\\AfterSectionMarkupGeneratedEvent', 'TYPO3\\CMS\\Backend\\View\\PageLayoutViewDrawEmptyColposContent', NULL, 'backend-empty-colpos');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\EnrichFileMetaDataEvent', 'TYPO3\\CMS\\Frontend\\Aspect\\FileMetadataOverlayAspect', 'languageAndWorkspaceOverlay', 'typo3-frontend/overlay');
        $a->addListener('TYPO3\\CMS\\Lowlevel\\Event\\ModifyBlindedConfigurationOptionsEvent', 'TYPO3\\CMS\\Lowlevel\\HookProvider\\ModifyBlindedConfigurationOptionsHookProvider', NULL, 'TYPO3\\CMS\\Lowlevel\\HookProvider\\ModifyBlindedConfigurationOptionsHookProvider');
        $a->addListener('TYPO3\\CMS\\Core\\Configuration\\Event\\AfterFlexFormDataStructureIdentifierInitializedEvent', 'TYPO3\\CMS\\Form\\EventListener\\DataStructureIdentifierListener', 'modifyDataStructureIdentifier', 'form-framework/modify-data-structure-identifier');
        $a->addListener('TYPO3\\CMS\\Core\\Configuration\\Event\\AfterFlexFormDataStructureParsedEvent', 'TYPO3\\CMS\\Form\\EventListener\\DataStructureIdentifierListener', 'modifyDataStructure', 'form-framework/modify-data-structure');
        $a->addListener('TYPO3\\CMS\\Filelist\\Event\\ProcessFileListActionsEvent', 'TYPO3\\CMS\\Form\\EventListener\\ProcessFileListActionsEventListener', NULL, 'form-framework/form-definition-files');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileCreatedEvent', 'TYPO3\\CMS\\Form\\Slot\\FilePersistenceSlot', 'onPreFileCreate', 'form-framework/creation');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileRenamedEvent', 'TYPO3\\CMS\\Form\\Slot\\FilePersistenceSlot', 'onPreFileRename', 'form-framework/rename');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileMovedEvent', 'TYPO3\\CMS\\Form\\Slot\\FilePersistenceSlot', 'onPreFileMove', 'form-framework/move');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileContentsSetEvent', 'TYPO3\\CMS\\Form\\Slot\\FilePersistenceSlot', 'onPreFileSetContents', 'form-framework/update-content');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\GeneratePublicUrlForResourceEvent', 'TYPO3\\CMS\\Form\\Slot\\ResourcePublicationSlot', 'getPublicUrl', 'form-framework/resource-getPublicUrl');
        $a->addListener('TYPO3\\CMS\\Backend\\Controller\\Event\\ModifyGenericBackendMessagesEvent', 'TYPO3\\CMS\\Reports\\Report\\WarningsForAboutModule', NULL, 'typo3-reports/warnings');
        $a->addListener('TYPO3\\CMS\\Redirects\\Event\\SlugRedirectChangeItemCreatedEvent', 'TYPO3\\CMS\\Redirects\\EventListener\\AddPlainSlugReplacementSource', NULL, 'redirects-add-plain-slug-replacement-source');
        $a->addListener('TYPO3\\CMS\\Redirects\\Event\\SlugRedirectChangeItemCreatedEvent', 'TYPO3\\CMS\\Redirects\\EventListener\\AddPageTypeZeroSource', NULL, 'redirects-add-page-type-zero-source');
        $a->addListener('TYPO3\\CMS\\Redirects\\Event\\RedirectWasHitEvent', 'TYPO3\\CMS\\Redirects\\EventListener\\IncrementHitCount', NULL, 'redirects-increment-hit-count');
        $a->addListener('TYPO3\\CMS\\Backend\\History\\Event\\BeforeHistoryRollbackStartEvent', 'TYPO3\\CMS\\Redirects\\EventListener\\RecordHistoryRollbackEventsListener', 'beforeHistoryRollbackStartEvent', 'redirects-disable-hook');
        $a->addListener('TYPO3\\CMS\\Backend\\History\\Event\\AfterHistoryRollbackFinishedEvent', 'TYPO3\\CMS\\Redirects\\EventListener\\RecordHistoryRollbackEventsListener', 'afterHistoryRollbackFinishedEvent', 'redirects-enable-hook');
        $a->addListener('TYPO3\\CMS\\Frontend\\Event\\ModifyHrefLangTagsEvent', 'TYPO3\\CMS\\Seo\\HrefLang\\HrefLangGenerator', NULL, 'typo3-seo/hreflangGenerator');
        $a->addListener('TYPO3\\CMS\\Frontend\\Event\\ModifyHrefLangTagsEvent', 'GeorgRinger\\News\\Seo\\HrefLangEvent', NULL, 'ext-news/modify-hreflang');
        $a->addListener('TYPO3\\CMS\\Core\\Html\\Event\\BrokenLinkAnalysisEvent', 'TYPO3\\CMS\\Linkvalidator\\EventListener\\CheckBrokenRteLinkEventListener', 'checkExternalLink', 'rte-check-link-external');
        $a->addListener('TYPO3\\CMS\\Core\\Html\\Event\\BrokenLinkAnalysisEvent', 'TYPO3\\CMS\\Linkvalidator\\EventListener\\CheckBrokenRteLinkEventListener', 'checkFileLink', 'rte-check-link-to-file');
        $a->addListener('TYPO3\\CMS\\Core\\Html\\Event\\BrokenLinkAnalysisEvent', 'TYPO3\\CMS\\Linkvalidator\\EventListener\\CheckBrokenRteLinkEventListener', 'checkPageLink', 'rte-check-link-to-page');
        $a->addListener('TYPO3\\CMS\\Frontend\\Event\\AfterCacheableContentIsGeneratedEvent', 'TYPO3\\CMS\\IndexedSearch\\EventListener\\FrontendGenerationPageIndexingTrigger', 'indexPageContent', 'indexed-search');
        $a->addListener('TYPO3\\CMS\\Core\\Authentication\\Event\\BeforeRequestTokenProcessedEvent', 'TYPO3\\CMS\\FrontendLogin\\Event\\ProcessRequestTokenListener', NULL, 'felogin-process-request-token');
        $a->addListener('TYPO3\\CMS\\Backend\\Template\\Components\\ModifyButtonBarEvent', 'TYPO3\\CMS\\SysNote\\Provider\\ButtonBarProvider', NULL, 'note-to-button-bar');
        $a->addListener('TYPO3\\CMS\\Info\\Controller\\Event\\ModifyInfoModuleContentEvent', 'TYPO3\\CMS\\SysNote\\Provider\\InfoModuleProvider', NULL, 'note-to-info-module');
        $a->addListener('TYPO3\\CMS\\Backend\\Controller\\Event\\ModifyPageLayoutContentEvent', 'TYPO3\\CMS\\SysNote\\Provider\\PageModuleProvider', NULL, 'note-to-page-module');
        $a->addListener('TYPO3\\CMS\\Backend\\Controller\\Event\\RenderAdditionalContentToRecordListEvent', 'TYPO3\\CMS\\SysNote\\Provider\\RecordListProvider', NULL, 'note-to-record-list');
        $a->addListener('TYPO3\\CMS\\Filelist\\Event\\ModifyEditFileFormDataEvent', 'TYPO3\\CMS\\T3editor\\EventListener\\InitializeT3editorInEditFileForm', NULL, 'typo3-t3editor/initialize-t3editor-in-edit-file-form');
        $a->addListener('TYPO3\\CMS\\Backend\\Controller\\Event\\AfterPageTreeItemsPreparedEvent', 'TYPO3\\CMS\\Workspaces\\EventListener\\PageTreeItemsHighlighter', NULL, 'typo3-workspaces/page-tree-items-highlighter');
        $a->addListener('TYPO3\\CMS\\Backend\\Routing\\Event\\BeforePagePreviewUriGeneratedEvent', 'TYPO3\\CMS\\Workspaces\\Hook\\BackendUtilityHook', 'createPageUriForWorkspaceVersion', 'typo3-workspaces/link-modifier');
        $a->addListener('TYPO3\\CMS\\Backend\\View\\Event\\ModifyDatabaseQueryForContentEvent', 'GeorgRinger\\News\\Event\\Listener\\ModifyDatabaseQueryForContentEventListener', 'modify', 'ext-news/modify-database-query-for-content');
        $a->addListener('TYPO3\\CMS\\Backend\\View\\Event\\ModifyDatabaseQueryForRecordListingEvent', 'GeorgRinger\\News\\Event\\Listener\\ModifyDatabaseQueryForRecordListingEventListener', 'modify', 'ext-news/modify-database-query-for-list');
        $a->addListener('TYPO3\\CMS\\Backend\\Form\\Event\\ModifyFileReferenceControlsEvent', 'GeorgRinger\\News\\Event\\Listener\\ModifyFileReferenceControlsEventListener', 'modifyControls', 'ext-news/modify-inline-element-control');
        $a->addListener('TYPO3\\CMS\\Core\\Core\\Event\\BootCompletedEvent', 'B13\\Container\\Listener\\BootCompleted', NULL, 'tx-container-boot-completed');
        $a->addListener('TYPO3\\CMS\\Backend\\View\\Event\\IsContentUsedOnPageLayoutEvent', 'B13\\Container\\Listener\\ContentUsedOnPage', NULL, 'tx-container-content-used-on-page');
        $a->addListener('TYPO3\\CMS\\Backend\\Controller\\Event\\ModifyNewContentElementWizardItemsEvent', 'B13\\Container\\Listener\\ModifyNewContentElementWizardItems', NULL, 'tx-container-new-content-element-wizard');
        $a->addListener('TYPO3\\CMS\\Core\\Configuration\\Event\\ModifyLoadedPageTsConfigEvent', 'B13\\Container\\Listener\\PageTsConfig', NULL, 'tx-container-page-ts-config');
        $a->addListener('TYPO3\\CMS\\Backend\\Controller\\Event\\AfterRecordSummaryForLocalizationEvent', 'B13\\Container\\Listener\\RecordSummaryForLocalization', NULL, 'tx-container-record-summary-for-localization');
        $a->addListener('HDNET\\Calendarize\\Event\\GenericActionAssignmentEvent', 'HDNET\\Calendarize\\EventListener\\BookingCountriesListener', NULL, 'bookingCountries');
        $a->addListener('HDNET\\Calendarize\\Event\\GenericActionAssignmentEvent', 'HDNET\\Calendarize\\EventListener\\CategoryFilterEventListener', NULL, 'categoryFilter');
        $a->addListener('HDNET\\Calendarize\\Event\\IndexRepositoryDefaultConstraintEvent', 'HDNET\\Calendarize\\EventListener\\CategoryConstraintEventListener', NULL, 'defaultEventConstraints');
        $a->addListener('HDNET\\Calendarize\\Event\\ImportSingleIcalEvent', 'HDNET\\Calendarize\\EventListener\\ImportSingleIcalEventListener', NULL, 'importSingelIcal');
        $a->addListener('TYPO3\\CMS\\Backend\\View\\Event\\PageContentPreviewRenderingEvent', 'HDNET\\Calendarize\\EventListener\\PreviewRenderingEventListener', NULL, 'getExtensionSummary');
        $a->addListener('HDNET\\Calendarize\\Event\\IndexRepositoryFindBySearchEvent', 'HDNET\\Calendarize\\EventListener\\SearchConstraintEventListener', NULL, 'defaultEventSearch');
        $a->addListener('TYPO3\\CMS\\Redirects\\Event\\RedirectWasHitEvent', 'TYPO3\\CMS\\Webhooks\\Listener\\MessageListener', '__invoke');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileAddedEvent', 'TYPO3\\CMS\\Webhooks\\Listener\\MessageListener', '__invoke');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileDeletedEvent', 'TYPO3\\CMS\\Webhooks\\Listener\\MessageListener', '__invoke');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileUpdatedInIndexEvent', 'TYPO3\\CMS\\Webhooks\\Listener\\MessageListener', '__invoke');
        $a->addListener('TYPO3\\CMS\\Core\\Authentication\\Event\\LoginAttemptFailedEvent', 'TYPO3\\CMS\\Webhooks\\Listener\\MessageListener', '__invoke');
        $a->addListener('TYPO3\\CMS\\Core\\Authentication\\Event\\MfaVerificationFailedEvent', 'TYPO3\\CMS\\Webhooks\\Listener\\MessageListener', '__invoke');

        return $container->services['TYPO3\\CMS\\Core\\EventDispatcher\\ListenerProvider_decorated_3'] = \TYPO3\CMS\Dashboard\ServiceProvider::addEventListeners($container, \TYPO3\CMS\Backend\ServiceProvider::addEventListeners($container, \TYPO3\CMS\Core\ServiceProvider::extendEventListenerProvider($container, $a)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\ExpressionLanguage\DefaultProvider' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\ExpressionLanguage\DefaultProvider
     */
    protected static function getDefaultProviderService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\ExpressionLanguage\\DefaultProvider'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\ExpressionLanguage\DefaultProvider::class, ($container->privates['TYPO3\\CMS\\Core\\Information\\Typo3Version'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Information\Typo3Version::class)), ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\Features'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\Features::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\ExpressionLanguage\ProviderConfigurationLoader' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\ExpressionLanguage\ProviderConfigurationLoader
     */
    protected static function getProviderConfigurationLoaderService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\ExpressionLanguage\\ProviderConfigurationLoader'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\ExpressionLanguage\ProviderConfigurationLoader::class, ($container->services['_early.TYPO3\\CMS\\Core\\Package\\PackageManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Package\\PackageManager', 1)), ($container->services['_early.cache.core'] ?? $container->get('_early.cache.core', 1)), ($container->services['TYPO3\\CMS\\Core\\Package\\Cache\\PackageDependentCacheIdentifier'] ?? self::getPackageDependentCacheIdentifierService($container))->withPrefix("ExpressionLanguageProviders")->toString());
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\FormProtection\FormProtectionFactory' shared service.
     *
     * @return \TYPO3\CMS\Core\FormProtection\FormProtectionFactory
     */
    protected static function getFormProtectionFactoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\FormProtection\\FormProtectionFactory'] = \TYPO3\CMS\Core\ServiceProvider::getFormProtectionFactory($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Html\DefaultSanitizerBuilder' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Html\DefaultSanitizerBuilder
     */
    protected static function getDefaultSanitizerBuilderService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Html\\DefaultSanitizerBuilder'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Html\DefaultSanitizerBuilder::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Html\RteHtmlParser' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Html\RteHtmlParser
     */
    protected static function getRteHtmlParserService($container)
    {
        $container->services['TYPO3\\CMS\\Core\\Html\\RteHtmlParser'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Html\RteHtmlParser::class, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Core\\Html\\RteHtmlParser'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Http\Client\GuzzleClientFactory' shared service.
     *
     * @return \TYPO3\CMS\Core\Http\Client\GuzzleClientFactory
     */
    protected static function getGuzzleClientFactoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Http\\Client\\GuzzleClientFactory'] = \TYPO3\CMS\Core\ServiceProvider::getGuzzleClientFactory($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Http\MiddlewareStackResolver' shared service.
     *
     * @return \TYPO3\CMS\Core\Http\MiddlewareStackResolver
     */
    protected static function getMiddlewareStackResolverService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Http\\MiddlewareStackResolver'] = \TYPO3\CMS\Core\ServiceProvider::getMiddlewareStackResolver($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Http\RequestFactory' shared service.
     *
     * @return \TYPO3\CMS\Core\Http\RequestFactory
     */
    protected static function getRequestFactoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Http\\RequestFactory'] = \TYPO3\CMS\Core\ServiceProvider::getRequestFactory($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Imaging\IconFactory' shared service.
     *
     * @return \TYPO3\CMS\Core\Imaging\IconFactory
     */
    protected static function getIconFactoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] = \TYPO3\CMS\Core\ServiceProvider::getIconFactory($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Imaging\IconRegistry_decorated_1' shared service.
     *
     * @return \TYPO3\CMS\Core\Imaging\IconRegistry
     */
    protected static function getIconRegistryDecorated1Service($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Imaging\\IconRegistry_decorated_1'] = \TYPO3\CMS\Core\ServiceProvider::configureIconRegistry($container, \TYPO3\CMS\Core\ServiceProvider::getIconRegistry($container));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\LinkHandling\LinkService' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\LinkHandling\LinkService
     */
    protected static function getLinkServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\LinkHandling\\LinkService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\LinkHandling\LinkService::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Localization\CacheWarmer' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Localization\CacheWarmer
     */
    protected static function getCacheWarmerService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Localization\\CacheWarmer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Localization\CacheWarmer::class, ($container->services['_early.TYPO3\\CMS\\Core\\Package\\PackageManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Package\\PackageManager', 1)), ($container->services['TYPO3\\CMS\\Core\\Localization\\Locales'] ?? self::getLocalesService($container)), ($container->services['TYPO3\\CMS\\Core\\Localization\\LocalizationFactory'] ?? self::getLocalizationFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Localization\LanguageServiceFactory' shared service.
     *
     * @return \TYPO3\CMS\Core\Localization\LanguageServiceFactory
     */
    protected static function getLanguageServiceFactoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory'] = \TYPO3\CMS\Core\ServiceProvider::getLanguageServiceFactory($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Localization\LanguageStore' shared service.
     *
     * @return \TYPO3\CMS\Core\Localization\LanguageStore
     */
    protected static function getLanguageStoreService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Localization\\LanguageStore'] = \TYPO3\CMS\Core\ServiceProvider::getLanguageStore($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Localization\Locales' shared service.
     *
     * @return \TYPO3\CMS\Core\Localization\Locales
     */
    protected static function getLocalesService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Localization\\Locales'] = \TYPO3\CMS\Core\ServiceProvider::getLocales($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Localization\LocalizationFactory' shared service.
     *
     * @return \TYPO3\CMS\Core\Localization\LocalizationFactory
     */
    protected static function getLocalizationFactoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Localization\\LocalizationFactory'] = \TYPO3\CMS\Core\ServiceProvider::getLocalizationFactory($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Localization\TcaSystemLanguageCollector' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Localization\TcaSystemLanguageCollector
     */
    protected static function getTcaSystemLanguageCollectorService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Localization\\TcaSystemLanguageCollector'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Localization\TcaSystemLanguageCollector::class, ($container->services['TYPO3\\CMS\\Core\\Localization\\Locales'] ?? self::getLocalesService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Locking\LockFactory' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Locking\LockFactory
     */
    protected static function getLockFactoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Locking\\LockFactory'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Locking\LockFactory::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Locking\ResourceMutex' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Locking\ResourceMutex
     */
    protected static function getResourceMutexService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Locking\\ResourceMutex'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Locking\ResourceMutex::class, ($container->services['TYPO3\\CMS\\Core\\Locking\\LockFactory'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Locking\LockFactory::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Mail\Mailer' shared service.
     *
     * @return \TYPO3\CMS\Core\Mail\Mailer
     */
    protected static function getMailerService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Mail\\Mailer'] = \TYPO3\CMS\Install\ServiceProvider::getMailer($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Mail\MemorySpool' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Mail\MemorySpool
     */
    protected static function getMemorySpoolService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Mail\\MemorySpool'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Mail\MemorySpool::class, ($container->services['TYPO3\\CMS\\Core\\Adapter\\EventDispatcherAdapter'] ?? self::getEventDispatcherAdapterService($container)), ($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Core\\Mail\\MemorySpool'));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Mail\TransportFactory' shared service.
     *
     * @return \TYPO3\CMS\Core\Mail\TransportFactory
     */
    protected static function getTransportFactoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Mail\\TransportFactory'] = \TYPO3\CMS\Core\ServiceProvider::getMailTransportFactory($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Messaging\FlashMessageService' shared service.
     *
     * @return \TYPO3\CMS\Core\Messaging\FlashMessageService
     */
    protected static function getFlashMessageServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] = \TYPO3\CMS\Core\ServiceProvider::getFlashMessageService($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Messenger\EventListener\StopWorkerOnTimeLimitListener' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Messenger\EventListener\StopWorkerOnTimeLimitListener
     */
    protected static function getStopWorkerOnTimeLimitListenerService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Messenger\\EventListener\\StopWorkerOnTimeLimitListener'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Messenger\EventListener\StopWorkerOnTimeLimitListener::class, 3600, ($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Core\\Messenger\\EventListener\\StopWorkerOnTimeLimitListener'));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\MetaTag\MetaTagManagerRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\MetaTag\MetaTagManagerRegistry
     */
    protected static function getMetaTagManagerRegistryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\MetaTag\\MetaTagManagerRegistry'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\MetaTag\MetaTagManagerRegistry::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Middleware\NormalizedParamsAttribute' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Middleware\NormalizedParamsAttribute
     */
    protected static function getNormalizedParamsAttributeService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Middleware\\NormalizedParamsAttribute'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Middleware\NormalizedParamsAttribute::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Middleware\RequestTokenMiddleware' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Middleware\RequestTokenMiddleware
     */
    protected static function getRequestTokenMiddlewareService($container)
    {
        $container->services['TYPO3\\CMS\\Core\\Middleware\\RequestTokenMiddleware'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Middleware\RequestTokenMiddleware::class, ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)));

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Core\\Middleware\\RequestTokenMiddleware'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Middleware\ResponsePropagation' shared service.
     *
     * @return \TYPO3\CMS\Core\Middleware\ResponsePropagation
     */
    protected static function getResponsePropagationService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Middleware\\ResponsePropagation'] = \TYPO3\CMS\Core\ServiceProvider::getResponsePropagationMiddleware($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Middleware\VerifyHostHeader' shared service.
     *
     * @return \TYPO3\CMS\Core\Middleware\VerifyHostHeader
     */
    protected static function getVerifyHostHeaderService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Middleware\\VerifyHostHeader'] = \TYPO3\CMS\Core\ServiceProvider::getVerifyHostHeaderMiddleware($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Package\Cache\PackageDependentCacheIdentifier' shared service.
     *
     * @return \TYPO3\CMS\Core\Package\Cache\PackageDependentCacheIdentifier
     */
    protected static function getPackageDependentCacheIdentifierService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Package\\Cache\\PackageDependentCacheIdentifier'] = \TYPO3\CMS\Core\ServiceProvider::getPackageDependentCacheIdentifier($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Package\FailsafePackageManager' shared service.
     *
     * @return \TYPO3\CMS\Core\Package\FailsafePackageManager
     */
    protected static function getFailsafePackageManagerService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Package\\FailsafePackageManager'] = \TYPO3\CMS\Core\ServiceProvider::getFailsafePackageManager($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\PageTitle\PageTitleProviderManager' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\PageTitle\PageTitleProviderManager
     */
    protected static function getPageTitleProviderManagerService($container)
    {
        $container->services['TYPO3\\CMS\\Core\\PageTitle\\PageTitleProviderManager'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\PageTitle\PageTitleProviderManager::class);

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Core\\PageTitle\\PageTitleProviderManager'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\PageTitle\RecordPageTitleProvider' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\PageTitle\RecordPageTitleProvider
     */
    protected static function getRecordPageTitleProviderService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\PageTitle\\RecordPageTitleProvider'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\PageTitle\RecordPageTitleProvider::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Page\AssetCollector' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Page\AssetCollector
     */
    protected static function getAssetCollectorService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Page\\AssetCollector'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\AssetCollector::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Page\AssetRenderer' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Page\AssetRenderer
     */
    protected static function getAssetRendererService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Page\\AssetRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\AssetRenderer::class, ($container->services['TYPO3\\CMS\\Core\\Page\\AssetCollector'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\AssetCollector::class)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Page\ImportMapCacheWarmer' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Page\ImportMapCacheWarmer
     */
    protected static function getImportMapCacheWarmerService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Page\\ImportMapCacheWarmer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\ImportMapCacheWarmer::class, ($container->services['TYPO3\\CMS\\Core\\Page\\ImportMapFactory'] ?? self::getImportMapFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Page\ImportMapFactory' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Page\ImportMapFactory
     */
    protected static function getImportMapFactoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Page\\ImportMapFactory'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\ImportMapFactory::class, ($container->services['_early.TYPO3\\CMS\\Core\\Package\\PackageManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Package\\PackageManager', 1)), ($container->services['_early.cache.assets'] ?? $container->get('_early.cache.assets', 1)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->services['TYPO3\\CMS\\Core\\Package\\Cache\\PackageDependentCacheIdentifier'] ?? self::getPackageDependentCacheIdentifierService($container))->withPrefix("ImportMap")->toString());
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Page\PageRenderer' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Page\PageRenderer
     */
    protected static function getPageRendererService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class, ($container->services['_early.cache.assets'] ?? $container->get('_early.cache.assets', 1)), ($container->services['TYPO3\\CMS\\Core\\Service\\MarkerBasedTemplateService'] ?? self::getMarkerBasedTemplateServiceService($container)), ($container->services['TYPO3\\CMS\\Core\\MetaTag\\MetaTagManagerRegistry'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\MetaTag\MetaTagManagerRegistry::class)), ($container->services['_early.TYPO3\\CMS\\Core\\Package\\PackageManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Package\\PackageManager', 1)), ($container->services['TYPO3\\CMS\\Core\\Page\\AssetRenderer'] ?? self::getAssetRendererService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\ResourceCompressor::class), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\RelativeCssPathFixer::class), ($container->services['TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory'] ?? self::getLanguageServiceFactoryService($container)), ($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)), ($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\RateLimiter\RateLimiterFactory' autowired service.
     *
     * @return \TYPO3\CMS\Core\RateLimiter\RateLimiterFactory
     */
    protected static function getRateLimiterFactoryService($container)
    {
        $container->factories['TYPO3\\CMS\\Core\\RateLimiter\\RateLimiterFactory'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\RateLimiter\RateLimiterFactory::class);
        };

        return $container->factories['TYPO3\\CMS\\Core\\RateLimiter\\RateLimiterFactory']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\RateLimiter\Storage\CachingFrameworkStorage' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\RateLimiter\Storage\CachingFrameworkStorage
     */
    protected static function getCachingFrameworkStorageService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\RateLimiter\\Storage\\CachingFrameworkStorage'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\RateLimiter\Storage\CachingFrameworkStorage::class, ($container->services['TYPO3\\CMS\\Core\\Cache\\CacheManager'] ?? self::getCacheManagerService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Registry' shared service.
     *
     * @return \TYPO3\CMS\Core\Registry
     */
    protected static function getRegistry2Service($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Registry'] = \TYPO3\CMS\Core\ServiceProvider::getRegistry($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Collection\FileCollectionRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Collection\FileCollectionRegistry
     */
    protected static function getFileCollectionRegistryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Resource\\Collection\\FileCollectionRegistry'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Collection\FileCollectionRegistry::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\DefaultUploadFolderResolver' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\DefaultUploadFolderResolver
     */
    protected static function getDefaultUploadFolderResolverService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Resource\\DefaultUploadFolderResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\DefaultUploadFolderResolver::class, ($container->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? self::getResourceFactoryService($container)), ($container->services['TYPO3\\CMS\\Core\\EventDispatcher\\EventDispatcher'] ?? self::getEventDispatcher2Service($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Driver\DriverRegistry' shared service.
     *
     * @return \TYPO3\CMS\Core\Resource\Driver\DriverRegistry
     */
    protected static function getDriverRegistryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Resource\\Driver\\DriverRegistry'] = \TYPO3\CMS\Core\ServiceProvider::getDriverRegistry($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\FileRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\FileRepository
     */
    protected static function getFileRepository2Service($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Resource\\FileRepository'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\FileRepository::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Index\ExtractorRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Index\ExtractorRegistry
     */
    protected static function getExtractorRegistryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Resource\\Index\\ExtractorRegistry'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Index\ExtractorRegistry::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Index\FileIndexRepository' shared service.
     *
     * @return \TYPO3\CMS\Core\Resource\Index\FileIndexRepository
     */
    protected static function getFileIndexRepositoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Resource\\Index\\FileIndexRepository'] = \TYPO3\CMS\Core\ServiceProvider::getFileIndexRepository($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Index\MetaDataRepository' shared service.
     *
     * @return \TYPO3\CMS\Core\Resource\Index\MetaDataRepository
     */
    protected static function getMetaDataRepositoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Resource\\Index\\MetaDataRepository'] = \TYPO3\CMS\Core\ServiceProvider::getMetaDataRepository($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\MetaDataEventListener' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\MetaDataEventListener
     */
    protected static function getMetaDataEventListenerService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Resource\\MetaDataEventListener'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\MetaDataEventListener::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\OnlineMedia\Helpers\OnlineMediaHelperRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\OnlineMedia\Helpers\OnlineMediaHelperRegistry
     */
    protected static function getOnlineMediaHelperRegistryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Resource\\OnlineMedia\\Helpers\\OnlineMediaHelperRegistry'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\OnlineMedia\Helpers\OnlineMediaHelperRegistry::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\OnlineMedia\Processing\PreviewProcessing' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\OnlineMedia\Processing\PreviewProcessing
     */
    protected static function getPreviewProcessingService($container)
    {
        $a = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Processing\LocalImageProcessor::class);
        $a->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Core\\Resource\\Processing\\LocalImageProcessor'));

        return $container->services['TYPO3\\CMS\\Core\\Resource\\OnlineMedia\\Processing\\PreviewProcessing'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\OnlineMedia\Processing\PreviewProcessing::class, ($container->services['TYPO3\\CMS\\Core\\Resource\\OnlineMedia\\Helpers\\OnlineMediaHelperRegistry'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\OnlineMedia\Helpers\OnlineMediaHelperRegistry::class)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), $a);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\ProcessedFileRepository' shared service.
     *
     * @return \TYPO3\CMS\Core\Resource\ProcessedFileRepository
     */
    protected static function getProcessedFileRepositoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Resource\\ProcessedFileRepository'] = \TYPO3\CMS\Core\ServiceProvider::getProcessedFileRepository($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Processing\FileDeletionAspect' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Processing\FileDeletionAspect
     */
    protected static function getFileDeletionAspectService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Resource\\Processing\\FileDeletionAspect'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Processing\FileDeletionAspect::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Processing\ProcessorRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Processing\ProcessorRegistry
     */
    protected static function getProcessorRegistryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Resource\\Processing\\ProcessorRegistry'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Processing\ProcessorRegistry::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Processing\TaskTypeRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Processing\TaskTypeRegistry
     */
    protected static function getTaskTypeRegistryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Resource\\Processing\\TaskTypeRegistry'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Processing\TaskTypeRegistry::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Rendering\AudioTagRenderer' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Rendering\AudioTagRenderer
     */
    protected static function getAudioTagRendererService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Resource\\Rendering\\AudioTagRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Rendering\AudioTagRenderer::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Rendering\RendererRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Rendering\RendererRegistry
     */
    protected static function getRendererRegistryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Resource\\Rendering\\RendererRegistry'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Rendering\RendererRegistry::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Rendering\VideoTagRenderer' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Rendering\VideoTagRenderer
     */
    protected static function getVideoTagRendererService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Resource\\Rendering\\VideoTagRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Rendering\VideoTagRenderer::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Rendering\VimeoRenderer' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Rendering\VimeoRenderer
     */
    protected static function getVimeoRendererService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Resource\\Rendering\\VimeoRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Rendering\VimeoRenderer::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Rendering\YouTubeRenderer' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Rendering\YouTubeRenderer
     */
    protected static function getYouTubeRendererService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Resource\\Rendering\\YouTubeRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Rendering\YouTubeRenderer::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\ResourceFactory' shared service.
     *
     * @return \TYPO3\CMS\Core\Resource\ResourceFactory
     */
    protected static function getResourceFactoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] = \TYPO3\CMS\Core\ServiceProvider::getResourceFactory($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Security\FileMetadataPermissionsAspect' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Security\FileMetadataPermissionsAspect
     */
    protected static function getFileMetadataPermissionsAspectService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Resource\\Security\\FileMetadataPermissionsAspect'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Security\FileMetadataPermissionsAspect::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Security\StoragePermissionsAspect' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Security\StoragePermissionsAspect
     */
    protected static function getStoragePermissionsAspectService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Resource\\Security\\StoragePermissionsAspect'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Security\StoragePermissionsAspect::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Security\SvgEventListener' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Security\SvgEventListener
     */
    protected static function getSvgEventListenerService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Resource\\Security\\SvgEventListener'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Security\SvgEventListener::class, ($container->privates['TYPO3\\CMS\\Core\\Resource\\Security\\SvgSanitizer'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Security\SvgSanitizer::class)), ($container->services['TYPO3\\CMS\\Core\\Resource\\Security\\SvgTypeCheck'] ?? self::getSvgTypeCheckService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Security\SvgHookHandler' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Security\SvgHookHandler
     */
    protected static function getSvgHookHandlerService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Resource\\Security\\SvgHookHandler'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Security\SvgHookHandler::class, ($container->privates['TYPO3\\CMS\\Core\\Resource\\Security\\SvgSanitizer'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Security\SvgSanitizer::class)), ($container->services['TYPO3\\CMS\\Core\\Resource\\Security\\SvgTypeCheck'] ?? self::getSvgTypeCheckService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Security\SvgTypeCheck' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Security\SvgTypeCheck
     */
    protected static function getSvgTypeCheckService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Resource\\Security\\SvgTypeCheck'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Security\SvgTypeCheck::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\MimeTypeDetector::class));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\StorageRepository' shared service.
     *
     * @return \TYPO3\CMS\Core\Resource\StorageRepository
     */
    protected static function getStorageRepositoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Resource\\StorageRepository'] = \TYPO3\CMS\Core\ServiceProvider::getStorageRepository($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\SynchronizeFolderRelations' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\SynchronizeFolderRelations
     */
    protected static function getSynchronizeFolderRelationsService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Resource\\SynchronizeFolderRelations'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\SynchronizeFolderRelations::class, ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\TextExtraction\TextExtractorRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\TextExtraction\TextExtractorRegistry
     */
    protected static function getTextExtractorRegistryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Resource\\TextExtraction\\TextExtractorRegistry'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\TextExtraction\TextExtractorRegistry::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Routing\BackendEntryPointResolver' shared service.
     *
     * @return \TYPO3\CMS\Core\Routing\BackendEntryPointResolver
     */
    protected static function getBackendEntryPointResolverService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Routing\\BackendEntryPointResolver'] = \TYPO3\CMS\Core\ServiceProvider::getBackendEntryPointResolver($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Routing\Enhancer\VariableProcessor' autowired service.
     *
     * @return \TYPO3\CMS\Core\Routing\Enhancer\VariableProcessor
     */
    protected static function getVariableProcessorService($container)
    {
        $container->factories['TYPO3\\CMS\\Core\\Routing\\Enhancer\\VariableProcessor'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Routing\Enhancer\VariableProcessor::class, ($container->privates['TYPO3\\CMS\\Core\\Routing\\Enhancer\\VariableProcessorCache'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Routing\Enhancer\VariableProcessorCache::class)));
        };

        return $container->factories['TYPO3\\CMS\\Core\\Routing\\Enhancer\\VariableProcessor']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Routing\RequestContextFactory' shared service.
     *
     * @return \TYPO3\CMS\Core\Routing\RequestContextFactory
     */
    protected static function getRequestContextFactoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Routing\\RequestContextFactory'] = \TYPO3\CMS\Core\ServiceProvider::getRequestContextFactory($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Routing\SiteMatcher' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Routing\SiteMatcher
     */
    protected static function getSiteMatcherService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Routing\\SiteMatcher'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Routing\SiteMatcher::class, ($container->privates['TYPO3\\CMS\\Core\\Configuration\\Features'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\Features::class)), ($container->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? self::getSiteFinderService($container)), ($container->services['TYPO3\\CMS\\Core\\Routing\\RequestContextFactory'] ?? self::getRequestContextFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Security\ContentSecurityPolicy\PolicyProvider' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Security\ContentSecurityPolicy\PolicyProvider
     */
    protected static function getPolicyProviderService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\PolicyProvider'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Security\ContentSecurityPolicy\PolicyProvider::class, ($container->services['_early.TYPO3\\CMS\\Core\\Core\\RequestId'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Core\\RequestId', 1)), ($container->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? self::getSiteFinderService($container)), ($container->services['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\PolicyRegistry'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Security\ContentSecurityPolicy\PolicyRegistry::class)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->privates['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\MutationRepository'] ?? self::getMutationRepositoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Security\ContentSecurityPolicy\PolicyRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Security\ContentSecurityPolicy\PolicyRegistry
     */
    protected static function getPolicyRegistryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\PolicyRegistry'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Security\ContentSecurityPolicy\PolicyRegistry::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Security\ContentSecurityPolicy\Processing\AssetHandler' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Security\ContentSecurityPolicy\Processing\AssetHandler
     */
    protected static function getAssetHandlerService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Processing\\AssetHandler'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Security\ContentSecurityPolicy\Processing\AssetHandler::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Security\ContentSecurityPolicy\Processing\GoogleMapsHandler' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Security\ContentSecurityPolicy\Processing\GoogleMapsHandler
     */
    protected static function getGoogleMapsHandlerService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Processing\\GoogleMapsHandler'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Security\ContentSecurityPolicy\Processing\GoogleMapsHandler::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Service\DependencyOrderingService' shared service.
     *
     * @return \TYPO3\CMS\Core\Service\DependencyOrderingService
     */
    protected static function getDependencyOrderingServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Service\\DependencyOrderingService'] = \TYPO3\CMS\Core\ServiceProvider::getDependencyOrderingService($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Service\FlexFormService' shared service.
     *
     * @return \TYPO3\CMS\Core\Service\FlexFormService
     */
    protected static function getFlexFormService2Service($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Service\\FlexFormService'] = \TYPO3\CMS\Core\ServiceProvider::getFlexFormService($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Service\MarkerBasedTemplateService' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Service\MarkerBasedTemplateService
     */
    protected static function getMarkerBasedTemplateServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Service\\MarkerBasedTemplateService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Service\MarkerBasedTemplateService::class, ($container->services['_early.cache.assets'] ?? $container->get('_early.cache.assets', 1)), ($container->privates['cache.runtime'] ?? self::getCache_RuntimeService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Service\OpcodeCacheService' shared service.
     *
     * @return \TYPO3\CMS\Core\Service\OpcodeCacheService
     */
    protected static function getOpcodeCacheServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Service\\OpcodeCacheService'] = \TYPO3\CMS\Core\ServiceProvider::getOpcodeCacheService($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Session\SessionManager' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Session\SessionManager
     */
    protected static function getSessionManagerService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\Session\\SessionManager'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Session\SessionManager::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\TimeTracker\TimeTracker' shared service.
     *
     * @return \TYPO3\CMS\Core\TimeTracker\TimeTracker
     */
    protected static function getTimeTrackerService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\TimeTracker\\TimeTracker'] = \TYPO3\CMS\Core\ServiceProvider::getTimeTracker($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Tree\TableConfiguration\DatabaseTreeDataProvider' autowired service.
     *
     * @return \TYPO3\CMS\Core\Tree\TableConfiguration\DatabaseTreeDataProvider
     */
    protected static function getDatabaseTreeDataProviderService($container)
    {
        $container->factories['TYPO3\\CMS\\Core\\Tree\\TableConfiguration\\DatabaseTreeDataProvider'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Tree\TableConfiguration\DatabaseTreeDataProvider::class, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
        };

        return $container->factories['TYPO3\\CMS\\Core\\Tree\\TableConfiguration\\DatabaseTreeDataProvider']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\TypoScript\AST\AstBuilder' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\TypoScript\AST\AstBuilder
     */
    protected static function getAstBuilderService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\TypoScript\\AST\\AstBuilder'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\TypoScript\AST\AstBuilder::class, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\TypoScript\AST\CommentAwareAstBuilder' shared service.
     *
     * @return \TYPO3\CMS\Core\TypoScript\AST\CommentAwareAstBuilder
     */
    protected static function getCommentAwareAstBuilderService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\TypoScript\\AST\\CommentAwareAstBuilder'] = \TYPO3\CMS\Core\ServiceProvider::getCommentAwareAstBuilder($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\TypoScript\AST\Traverser\AstTraverser' shared service.
     *
     * @return \TYPO3\CMS\Core\TypoScript\AST\Traverser\AstTraverser
     */
    protected static function getAstTraverserService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\TypoScript\\AST\\Traverser\\AstTraverser'] = \TYPO3\CMS\Core\ServiceProvider::getAstTraverser($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\TypoScript\IncludeTree\StringTreeBuilder' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\TypoScript\IncludeTree\StringTreeBuilder
     */
    protected static function getStringTreeBuilderService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\StringTreeBuilder'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\TypoScript\IncludeTree\StringTreeBuilder::class, ($container->privates['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\TreeFromLineStreamBuilder'] ?? self::getTreeFromLineStreamBuilderService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\TypoScript\IncludeTree\SysTemplateRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\TypoScript\IncludeTree\SysTemplateRepository
     */
    protected static function getSysTemplateRepositoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\SysTemplateRepository'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\TypoScript\IncludeTree\SysTemplateRepository::class, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)), ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\TypoScript\IncludeTree\SysTemplateTreeBuilder' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\TypoScript\IncludeTree\SysTemplateTreeBuilder
     */
    protected static function getSysTemplateTreeBuilderService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\SysTemplateTreeBuilder'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\TypoScript\IncludeTree\SysTemplateTreeBuilder::class, ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)), ($container->services['_early.TYPO3\\CMS\\Core\\Package\\PackageManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Package\\PackageManager', 1)), ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)), ($container->privates['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\TreeFromLineStreamBuilder'] ?? self::getTreeFromLineStreamBuilderService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\TypoScript\IncludeTree\TsConfigTreeBuilder' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\TypoScript\IncludeTree\TsConfigTreeBuilder
     */
    protected static function getTsConfigTreeBuilderService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\TsConfigTreeBuilder'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\TypoScript\IncludeTree\TsConfigTreeBuilder::class, ($container->privates['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\TreeFromLineStreamBuilder'] ?? self::getTreeFromLineStreamBuilderService($container)), ($container->services['_early.TYPO3\\CMS\\Core\\Package\\PackageManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Package\\PackageManager', 1)), ($container->services['TYPO3\\CMS\\Core\\EventDispatcher\\EventDispatcher'] ?? self::getEventDispatcher2Service($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\TypoScript\IncludeTree\Visitor\IncludeTreeAstBuilderVisitor' autowired service.
     *
     * @return \TYPO3\CMS\Core\TypoScript\IncludeTree\Visitor\IncludeTreeAstBuilderVisitor
     */
    protected static function getIncludeTreeAstBuilderVisitorService($container)
    {
        $container->factories['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Visitor\\IncludeTreeAstBuilderVisitor'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\TypoScript\IncludeTree\Visitor\IncludeTreeAstBuilderVisitor::class, ($container->services['TYPO3\\CMS\\Core\\TypoScript\\AST\\AstBuilder'] ?? self::getAstBuilderService($container)));
        };

        return $container->factories['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Visitor\\IncludeTreeAstBuilderVisitor']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\TypoScript\IncludeTree\Visitor\IncludeTreeCommentAwareAstBuilderVisitor' autowired service.
     *
     * @return \TYPO3\CMS\Core\TypoScript\IncludeTree\Visitor\IncludeTreeCommentAwareAstBuilderVisitor
     */
    protected static function getIncludeTreeCommentAwareAstBuilderVisitorService($container)
    {
        $container->factories['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Visitor\\IncludeTreeCommentAwareAstBuilderVisitor'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\TypoScript\IncludeTree\Visitor\IncludeTreeCommentAwareAstBuilderVisitor::class, ($container->services['TYPO3\\CMS\\Core\\TypoScript\\AST\\CommentAwareAstBuilder'] ?? self::getCommentAwareAstBuilderService($container)));
        };

        return $container->factories['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Visitor\\IncludeTreeCommentAwareAstBuilderVisitor']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\TypoScript\IncludeTree\Visitor\IncludeTreeConditionMatcherVisitor' autowired service.
     *
     * @return \TYPO3\CMS\Core\TypoScript\IncludeTree\Visitor\IncludeTreeConditionMatcherVisitor
     */
    protected static function getIncludeTreeConditionMatcherVisitorService($container)
    {
        $container->factories['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Visitor\\IncludeTreeConditionMatcherVisitor'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\TypoScript\IncludeTree\Visitor\IncludeTreeConditionMatcherVisitor::class, ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)), ($container->privates['TYPO3\\CMS\\Frontend\\Page\\PageLayoutResolver'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Page\PageLayoutResolver::class)));

            $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Visitor\\IncludeTreeConditionMatcherVisitor'));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Visitor\\IncludeTreeConditionMatcherVisitor']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\TypoScript\PageTsConfigFactory' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\TypoScript\PageTsConfigFactory
     */
    protected static function getPageTsConfigFactoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\TypoScript\\PageTsConfigFactory'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\TypoScript\PageTsConfigFactory::class, $container, ($container->privates['TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\LossyTokenizer'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\TypoScript\Tokenizer\LossyTokenizer::class)), ($container->services['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\TsConfigTreeBuilder'] ?? self::getTsConfigTreeBuilderService($container)), ($container->privates['cache.typoscript'] ?? self::getCache_TyposcriptService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\TypoScript\Tokenizer\LosslessTokenizer' shared service.
     *
     * @return \TYPO3\CMS\Core\TypoScript\Tokenizer\LosslessTokenizer
     */
    protected static function getLosslessTokenizerService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\LosslessTokenizer'] = \TYPO3\CMS\Core\ServiceProvider::getLosslessTokenizer($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\TypoScript\TypoScriptService' shared service.
     *
     * @return \TYPO3\CMS\Core\TypoScript\TypoScriptService
     */
    protected static function getTypoScriptServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\TypoScript\\TypoScriptService'] = \TYPO3\CMS\Core\ServiceProvider::getTypoScriptService($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\TypoScript\TypoScriptStringFactory' shared service.
     *
     * @return \TYPO3\CMS\Core\TypoScript\TypoScriptStringFactory
     */
    protected static function getTypoScriptStringFactoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\TypoScript\\TypoScriptStringFactory'] = \TYPO3\CMS\Core\ServiceProvider::getTypoScriptStringFactory($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\TypoScript\UserTsConfigFactory' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\TypoScript\UserTsConfigFactory
     */
    protected static function getUserTsConfigFactoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Core\\TypoScript\\UserTsConfigFactory'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\TypoScript\UserTsConfigFactory::class, $container, ($container->privates['TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\LossyTokenizer'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\TypoScript\Tokenizer\LossyTokenizer::class)), ($container->services['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\TsConfigTreeBuilder'] ?? self::getTsConfigTreeBuilderService($container)), ($container->privates['cache.typoscript'] ?? self::getCache_TyposcriptService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\ViewHelpers\IconForRecordViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Core\ViewHelpers\IconForRecordViewHelper
     */
    protected static function getIconForRecordViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Core\\ViewHelpers\\IconForRecordViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\ViewHelpers\IconForRecordViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Core\\ViewHelpers\\IconForRecordViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\ViewHelpers\IconForResourceViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Core\ViewHelpers\IconForResourceViewHelper
     */
    protected static function getIconForResourceViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Core\\ViewHelpers\\IconForResourceViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\ViewHelpers\IconForResourceViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Core\\ViewHelpers\\IconForResourceViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\ViewHelpers\IconViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Core\ViewHelpers\IconViewHelper
     */
    protected static function getIconViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Core\\ViewHelpers\\IconViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\ViewHelpers\IconViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Core\\ViewHelpers\\IconViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\ViewHelpers\NormalizedUrlViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Core\ViewHelpers\NormalizedUrlViewHelper
     */
    protected static function getNormalizedUrlViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Core\\ViewHelpers\\NormalizedUrlViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\ViewHelpers\NormalizedUrlViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Core\\ViewHelpers\\NormalizedUrlViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Dashboard\Controller\DashboardController' shared autowired service.
     *
     * @return \TYPO3\CMS\Dashboard\Controller\DashboardController
     */
    protected static function getDashboardControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container));
        $b = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));
        $c = ($container->services['TYPO3\\CMS\\Dashboard\\DashboardPresetRegistry_decorated_1'] ?? self::getDashboardPresetRegistryDecorated1Service($container));
        $d = ($container->privates['TYPO3\\CMS\\Dashboard\\DashboardRepository'] ?? self::getDashboardRepositoryService($container));

        return $container->services['TYPO3\\CMS\\Dashboard\\Controller\\DashboardController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Controller\DashboardController::class, $a, $b, $c, $d, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\DashboardInitializationService::class, $d, $c), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\WidgetGroupInitializationService::class, ($container->services['TYPO3\\CMS\\Dashboard\\WidgetGroupRegistry_decorated_1'] ?? self::getWidgetGroupRegistryDecorated1Service($container)), ($container->services['TYPO3\\CMS\\Dashboard\\WidgetRegistry'] ?? self::getWidgetRegistryService($container))), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $a, ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), $b, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Dashboard\Controller\WidgetAjaxController' shared autowired service.
     *
     * @return \TYPO3\CMS\Dashboard\Controller\WidgetAjaxController
     */
    protected static function getWidgetAjaxControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Dashboard\\Controller\\WidgetAjaxController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Controller\WidgetAjaxController::class, ($container->privates['TYPO3\\CMS\\Dashboard\\DashboardRepository'] ?? self::getDashboardRepositoryService($container)), ($container->services['TYPO3\\CMS\\Dashboard\\WidgetRegistry'] ?? self::getWidgetRegistryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Dashboard\DashboardPresetRegistry_decorated_1' shared service.
     *
     * @return \TYPO3\CMS\Dashboard\DashboardPresetRegistry
     */
    protected static function getDashboardPresetRegistryDecorated1Service($container)
    {
        return $container->services['TYPO3\\CMS\\Dashboard\\DashboardPresetRegistry_decorated_1'] = \TYPO3\CMS\Dashboard\ServiceProvider::configureDashboardPresetRegistry($container, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\DashboardPresetRegistry::class));
    }

    /**
     * Gets the public 'TYPO3\CMS\Dashboard\EventListener\AfterBackendPageRenderEventListener' shared autowired service.
     *
     * @return \TYPO3\CMS\Dashboard\EventListener\AfterBackendPageRenderEventListener
     */
    protected static function getAfterBackendPageRenderEventListener2Service($container)
    {
        return $container->services['TYPO3\\CMS\\Dashboard\\EventListener\\AfterBackendPageRenderEventListener'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\EventListener\AfterBackendPageRenderEventListener::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Dashboard\ViewHelpers\Widget\ButtonViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Dashboard\ViewHelpers\Widget\ButtonViewHelper
     */
    protected static function getButtonViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Dashboard\\ViewHelpers\\Widget\\ButtonViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\ViewHelpers\Widget\ButtonViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Dashboard\\ViewHelpers\\Widget\\ButtonViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Dashboard\WidgetGroupRegistry_decorated_1' shared service.
     *
     * @return \TYPO3\CMS\Dashboard\WidgetGroupRegistry
     */
    protected static function getWidgetGroupRegistryDecorated1Service($container)
    {
        return $container->services['TYPO3\\CMS\\Dashboard\\WidgetGroupRegistry_decorated_1'] = \TYPO3\CMS\Dashboard\ServiceProvider::configureWidgetGroupRegistry($container, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\WidgetGroupRegistry::class));
    }

    /**
     * Gets the public 'TYPO3\CMS\Dashboard\WidgetRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Dashboard\WidgetRegistry
     */
    protected static function getWidgetRegistryService($container)
    {
        $container->services['TYPO3\\CMS\\Dashboard\\WidgetRegistry'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\WidgetRegistry::class, $container);

        $instance->registerWidget('t3newsWidgetConfiguration');
        $instance->registerWidget('sysLogErrorsWidgetConfiguration');
        $instance->registerWidget('docGettingStartedWidgetConfiguration');
        $instance->registerWidget('docTypoScriptReferenceWidgetConfiguration');
        $instance->registerWidget('docTSconfigWidgetConfiguration');
        $instance->registerWidget('t3informationWidgetConfiguration');
        $instance->registerWidget('typeOfUsersWidgetConfiguration');
        $instance->registerWidget('t3securityAdvisoriesWidgetConfiguration');
        $instance->registerWidget('failedLoginsWidgetConfiguration');
        $instance->registerWidget('seo-pagesWithoutMetaDescriptionWidgetConfiguration');
        $instance->registerWidget('calendarizeNextEventsWidgetConfiguration');
        $instance->registerWidget('calendarizeIndexAmountWidgetConfiguration');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Configuration\BackendConfigurationManager' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Configuration\BackendConfigurationManager
     */
    protected static function getBackendConfigurationManagerService($container)
    {
        return $container->services['TYPO3\\CMS\\Extbase\\Configuration\\BackendConfigurationManager'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Configuration\BackendConfigurationManager::class, ($container->services['TYPO3\\CMS\\Core\\TypoScript\\TypoScriptService'] ?? self::getTypoScriptServiceService($container)), ($container->privates['cache.typoscript'] ?? self::getCache_TyposcriptService($container)), ($container->privates['cache.runtime'] ?? self::getCache_RuntimeService($container)), ($container->services['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\SysTemplateRepository'] ?? self::getSysTemplateRepositoryService($container)), ($container->services['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\SysTemplateTreeBuilder'] ?? self::getSysTemplateTreeBuilderService($container)), ($container->privates['TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\LossyTokenizer'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\TypoScript\Tokenizer\LossyTokenizer::class)), ($container->privates['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Traverser\\ConditionVerdictAwareIncludeTreeTraverser'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\TypoScript\IncludeTree\Traverser\ConditionVerdictAwareIncludeTreeTraverser::class)), ($container->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? self::getSiteFinderService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Configuration\ConfigurationManager' shared service.
     *
     * @return \TYPO3\CMS\Extbase\Configuration\ConfigurationManager
     */
    protected static function getConfigurationManagerService($container)
    {
        return $container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] = \TYPO3\CMS\Extbase\ServiceProvider::getConfigurationManager($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Configuration\FrontendConfigurationManager' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Configuration\FrontendConfigurationManager
     */
    protected static function getFrontendConfigurationManagerService($container)
    {
        return $container->services['TYPO3\\CMS\\Extbase\\Configuration\\FrontendConfigurationManager'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Configuration\FrontendConfigurationManager::class, ($container->services['TYPO3\\CMS\\Core\\TypoScript\\TypoScriptService'] ?? self::getTypoScriptServiceService($container)), ($container->services['TYPO3\\CMS\\Core\\Service\\FlexFormService'] ?? self::getFlexFormService2Service($container)), ($container->privates['TYPO3\\CMS\\Core\\Domain\\Repository\\PageRepository'] ?? self::getPageRepositoryService($container)), ($container->services['TYPO3\\CMS\\Core\\EventDispatcher\\EventDispatcher'] ?? self::getEventDispatcher2Service($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Core\Bootstrap' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Core\Bootstrap
     */
    protected static function getBootstrapService($container)
    {
        $container->factories['TYPO3\\CMS\\Extbase\\Core\\Bootstrap'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Core\Bootstrap::class, $container, ($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)), ($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)), ($container->services['TYPO3\\CMS\\Extbase\\Service\\CacheService'] ?? self::getCacheServiceService($container)), ($container->privates['TYPO3\\CMS\\Extbase\\Mvc\\Dispatcher'] ?? self::getDispatcherService($container)), ($container->services['TYPO3\\CMS\\Extbase\\Mvc\\Web\\RequestBuilder'] ?? self::getRequestBuilderService($container)));
        };

        return $container->factories['TYPO3\\CMS\\Extbase\\Core\\Bootstrap']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\EventListener\AddDefaultModuleIcon' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\EventListener\AddDefaultModuleIcon
     */
    protected static function getAddDefaultModuleIconService($container)
    {
        return $container->services['TYPO3\\CMS\\Extbase\\EventListener\\AddDefaultModuleIcon'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\EventListener\AddDefaultModuleIcon::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Mvc\Controller\MvcPropertyMappingConfigurationService' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Mvc\Controller\MvcPropertyMappingConfigurationService
     */
    protected static function getMvcPropertyMappingConfigurationServiceService($container)
    {
        $container->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\Controller\MvcPropertyMappingConfigurationService::class);

        $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Mvc\View\JsonView' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Mvc\View\JsonView
     */
    protected static function getJsonViewService($container)
    {
        $container->factories['TYPO3\\CMS\\Extbase\\Mvc\\View\\JsonView'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\JsonView::class);

            $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Extbase\\Mvc\\View\\JsonView']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Mvc\Web\RequestBuilder' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Mvc\Web\RequestBuilder
     */
    protected static function getRequestBuilderService($container)
    {
        return $container->services['TYPO3\\CMS\\Extbase\\Mvc\\Web\\RequestBuilder'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\Web\RequestBuilder::class, ($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)), ($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Mvc\Web\Routing\UriBuilder' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Mvc\Web\Routing\UriBuilder
     */
    protected static function getUriBuilder2Service($container)
    {
        $container->factories['TYPO3\\CMS\\Extbase\\Mvc\\Web\\Routing\\UriBuilder'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\Web\Routing\UriBuilder::class);

            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Extbase\\Mvc\\Web\\Routing\\UriBuilder']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Persistence\Generic\Backend' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Persistence\Generic\Backend
     */
    protected static function getBackendService($container)
    {
        return $container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Backend'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Backend::class, ($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)), ($container->privates['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Session'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Session::class)), ($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)), ($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Storage\\Typo3DbBackend'] ?? self::getTypo3DbBackendService($container)), ($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\DataMapFactory'] ?? self::getDataMapFactoryService($container)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapFactory' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapFactory
     */
    protected static function getDataMapFactoryService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container));
        $b = ($container->services['TYPO3\\CMS\\Core\\Cache\\CacheManager'] ?? self::getCacheManagerService($container));

        return $container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\DataMapFactory'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapFactory::class, $a, ($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)), $b, (\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\ClassesConfigurationFactory::class, $b->getCache('extbase'), ($container->services['_early.TYPO3\\CMS\\Core\\Package\\PackageManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Package\\PackageManager', 1)), ($container->services['TYPO3\\CMS\\Core\\Package\\Cache\\PackageDependentCacheIdentifier'] ?? self::getPackageDependentCacheIdentifierService($container))->withPrefix("PersistenceClasses")->toString()))->createClassesConfiguration(), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Mapper\ColumnMapFactory::class, $a), ($container->services['TYPO3\\CMS\\Core\\Package\\Cache\\PackageDependentCacheIdentifier'] ?? self::getPackageDependentCacheIdentifierService($container))->toString());
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper
     */
    protected static function getDataMapperService($container)
    {
        $container->factories['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\DataMapper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper::class, ($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)), ($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\QueryObjectModelFactory'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Qom\QueryObjectModelFactory::class)), ($container->privates['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Session'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Session::class)), ($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\DataMapFactory'] ?? self::getDataMapFactoryService($container)), ($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryFactory'] ?? self::getQueryFactoryService($container)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->privates['Doctrine\\Instantiator\\InstantiatorInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\Doctrine\Instantiator\Instantiator::class)));
        };

        return $container->factories['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\DataMapper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Persistence\Generic\PersistenceManager' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Persistence\Generic\PersistenceManager
     */
    protected static function getPersistenceManagerService($container)
    {
        $container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\PersistenceManager::class, ($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryFactory'] ?? self::getQueryFactoryService($container)), ($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Backend'] ?? self::getBackendService($container)), ($container->privates['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Session'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Session::class)));

        $instance->initializeObject();

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Persistence\Generic\Qom\QueryObjectModelFactory' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Persistence\Generic\Qom\QueryObjectModelFactory
     */
    protected static function getQueryObjectModelFactoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\QueryObjectModelFactory'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Qom\QueryObjectModelFactory::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Persistence\Generic\Query' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Persistence\Generic\Query
     */
    protected static function getQueryService($container)
    {
        $container->factories['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Query'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Query::class, ($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\DataMapFactory'] ?? self::getDataMapFactoryService($container)), ($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)), ($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\QueryObjectModelFactory'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Qom\QueryObjectModelFactory::class)), $container);
        };

        return $container->factories['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Query']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Persistence\Generic\QueryFactory' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Persistence\Generic\QueryFactory
     */
    protected static function getQueryFactoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryFactory'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\QueryFactory::class, ($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)), ($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\DataMapFactory'] ?? self::getDataMapFactoryService($container)), $container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Persistence\Generic\QueryResult' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Persistence\Generic\QueryResult
     */
    protected static function getQueryResultService($container)
    {
        $container->factories['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryResult'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\QueryResult::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper::class, ($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)), ($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\QueryObjectModelFactory'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Qom\QueryObjectModelFactory::class)), ($container->privates['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Session'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Session::class)), ($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\DataMapFactory'] ?? self::getDataMapFactoryService($container)), ($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryFactory'] ?? self::getQueryFactoryService($container)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->privates['Doctrine\\Instantiator\\InstantiatorInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\Doctrine\Instantiator\Instantiator::class))), ($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));
        };

        return $container->factories['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryResult']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Persistence\Generic\Storage\Typo3DbBackend' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Persistence\Generic\Storage\Typo3DbBackend
     */
    protected static function getTypo3DbBackendService($container)
    {
        return $container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Storage\\Typo3DbBackend'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Storage\Typo3DbBackend::class, ($container->services['TYPO3\\CMS\\Extbase\\Service\\CacheService'] ?? self::getCacheServiceService($container)), ($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Persistence\Generic\Storage\Typo3DbQueryParser' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Persistence\Generic\Storage\Typo3DbQueryParser
     */
    protected static function getTypo3DbQueryParserService($container)
    {
        $container->factories['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Storage\\Typo3DbQueryParser'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Storage\Typo3DbQueryParser::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper::class, ($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)), ($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\QueryObjectModelFactory'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Qom\QueryObjectModelFactory::class)), ($container->privates['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Session'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Session::class)), ($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\DataMapFactory'] ?? self::getDataMapFactoryService($container)), ($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryFactory'] ?? self::getQueryFactoryService($container)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->privates['Doctrine\\Instantiator\\InstantiatorInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\Doctrine\Instantiator\Instantiator::class))));
        };

        return $container->factories['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Storage\\Typo3DbQueryParser']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Persistence\Generic\Typo3QuerySettings' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Persistence\Generic\Typo3QuerySettings
     */
    protected static function getTypo3QuerySettingsService($container)
    {
        $container->factories['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Typo3QuerySettings'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Typo3QuerySettings::class, ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)), ($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
        };

        return $container->factories['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Typo3QuerySettings']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Persistence\Repository' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Persistence\Repository
     */
    protected static function getRepositoryService($container)
    {
        $container->services['TYPO3\\CMS\\Extbase\\Persistence\\Repository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Repository::class);

        $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\PropertyMapper' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\PropertyMapper
     */
    protected static function getPropertyMapperService($container)
    {
        $a = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverterRegistry::class);

        $b = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\FileConverter::class);

        $c = ($container->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? self::getResourceFactoryService($container));

        $b->injectFileFactory($c);
        $d = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\FileReferenceConverter::class);
        $d->injectFileFactory($c);
        $e = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\FolderConverter::class);
        $e->injectFileFactory($c);
        $f = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\ObjectConverter::class);

        $g = ($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container));

        $f->injectReflectionService($g);
        $f->injectContainer($container);
        $h = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\PersistentObjectConverter::class);
        $h->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));
        $h->injectReflectionService($g);
        $h->injectContainer($container);

        $a->add(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\ArrayConverter::class), 10, ['array', 'string'], 'array');
        $a->add(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\BooleanConverter::class), 10, ['boolean', 'string'], 'boolean');
        $a->add(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\CoreTypeConverter::class), 10, ['string', 'integer', 'float', 'boolean', 'array'], 'TYPO3\\CMS\\Core\\Type\\TypeInterface');
        $a->add(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\DateTimeConverter::class), 10, ['string', 'integer', 'array'], 'DateTime');
        $a->add(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\EnumConverter::class), 20, ['string', 'integer', 'float'], 'object');
        $a->add($b, 10, ['integer', 'string'], 'TYPO3\\CMS\\Extbase\\Domain\\Model\\File');
        $a->add($d, 10, ['integer'], 'TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference');
        $a->add(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\FloatConverter::class), 10, ['float', 'integer', 'string'], 'float');
        $a->add($e, 10, ['string'], 'TYPO3\\CMS\\Extbase\\Domain\\Model\\Folder');
        $a->add(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\IntegerConverter::class), 10, ['integer', 'string'], 'integer');
        $a->add($f, 10, ['array'], 'object');
        $a->add(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\ObjectStorageConverter::class), 10, ['string', 'array'], 'TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage');
        $a->add($h, 20, ['integer', 'string', 'array'], 'TYPO3\\CMS\\Extbase\\DomainObject\\AbstractDomainObject');
        $a->add(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\StringConverter::class), 10, ['string', 'integer'], 'string');
        $a->add(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Mvc\Property\TypeConverter\FormDefinitionArrayConverter::class), 10, ['string'], 'TYPO3\\CMS\\Form\\Type\\FormDefinitionArray');
        $a->add(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Property\TypeConverter\AbstractBookingRequest::class), 1, ['array'], 'HDNET\\Calendarize\\Domain\\Model\\Request\\AbstractBookingRequest');

        return $container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\PropertyMapper::class, $a, ($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMappingConfigurationBuilder'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationBuilder::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationBuilder' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationBuilder
     */
    protected static function getPropertyMappingConfigurationBuilderService($container)
    {
        return $container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMappingConfigurationBuilder'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationBuilder::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\TypeConverter\ArrayConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\TypeConverter\ArrayConverter
     */
    protected static function getArrayConverterService($container)
    {
        return $container->services['TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\ArrayConverter'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\ArrayConverter::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\TypeConverter\BooleanConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\TypeConverter\BooleanConverter
     */
    protected static function getBooleanConverterService($container)
    {
        return $container->services['TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\BooleanConverter'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\BooleanConverter::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\TypeConverter\CoreTypeConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\TypeConverter\CoreTypeConverter
     */
    protected static function getCoreTypeConverterService($container)
    {
        return $container->services['TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\CoreTypeConverter'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\CoreTypeConverter::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\TypeConverter\DateTimeConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\TypeConverter\DateTimeConverter
     */
    protected static function getDateTimeConverterService($container)
    {
        return $container->services['TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\DateTimeConverter'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\DateTimeConverter::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\TypeConverter\EnumConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\TypeConverter\EnumConverter
     */
    protected static function getEnumConverterService($container)
    {
        return $container->services['TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\EnumConverter'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\EnumConverter::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\TypeConverter\FileConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\TypeConverter\FileConverter
     */
    protected static function getFileConverterService($container)
    {
        $container->services['TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\FileConverter'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\FileConverter::class);

        $instance->injectFileFactory(($container->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? self::getResourceFactoryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\TypeConverter\FileReferenceConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\TypeConverter\FileReferenceConverter
     */
    protected static function getFileReferenceConverterService($container)
    {
        $container->services['TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\FileReferenceConverter'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\FileReferenceConverter::class);

        $instance->injectFileFactory(($container->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? self::getResourceFactoryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\TypeConverter\FloatConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\TypeConverter\FloatConverter
     */
    protected static function getFloatConverterService($container)
    {
        return $container->services['TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\FloatConverter'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\FloatConverter::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\TypeConverter\FolderConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\TypeConverter\FolderConverter
     */
    protected static function getFolderConverterService($container)
    {
        $container->services['TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\FolderConverter'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\FolderConverter::class);

        $instance->injectFileFactory(($container->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? self::getResourceFactoryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\TypeConverter\IntegerConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\TypeConverter\IntegerConverter
     */
    protected static function getIntegerConverterService($container)
    {
        return $container->services['TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\IntegerConverter'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\IntegerConverter::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\TypeConverter\ObjectConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\TypeConverter\ObjectConverter
     */
    protected static function getObjectConverterService($container)
    {
        $container->services['TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\ObjectConverter'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\ObjectConverter::class);

        $instance->injectReflectionService(($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)));
        $instance->injectContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\TypeConverter\ObjectStorageConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\TypeConverter\ObjectStorageConverter
     */
    protected static function getObjectStorageConverterService($container)
    {
        return $container->services['TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\ObjectStorageConverter'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\ObjectStorageConverter::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\TypeConverter\PersistentObjectConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\TypeConverter\PersistentObjectConverter
     */
    protected static function getPersistentObjectConverterService($container)
    {
        $container->services['TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\PersistentObjectConverter'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\PersistentObjectConverter::class);

        $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));
        $instance->injectReflectionService(($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)));
        $instance->injectContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\TypeConverter\StringConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\TypeConverter\StringConverter
     */
    protected static function getStringConverterService($container)
    {
        return $container->services['TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\StringConverter'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\StringConverter::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Reflection\ReflectionService' shared service.
     *
     * @return \TYPO3\CMS\Extbase\Reflection\ReflectionService
     */
    protected static function getReflectionServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] = \TYPO3\CMS\Extbase\ServiceProvider::getReflectionService($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Security\Cryptography\HashService' shared service.
     *
     * @return \TYPO3\CMS\Extbase\Security\Cryptography\HashService
     */
    protected static function getHashServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] = \TYPO3\CMS\Extbase\ServiceProvider::getHashService($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Service\CacheService' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Service\CacheService
     */
    protected static function getCacheServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Extbase\\Service\\CacheService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Service\CacheService::class, ($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)), ($container->services['TYPO3\\CMS\\Core\\Cache\\CacheManager'] ?? self::getCacheManagerService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Service\ExtensionService' shared service.
     *
     * @return \TYPO3\CMS\Extbase\Service\ExtensionService
     */
    protected static function getExtensionServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] = \TYPO3\CMS\Extbase\ServiceProvider::getExtensionService($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Service\ImageService' shared service.
     *
     * @return \TYPO3\CMS\Extbase\Service\ImageService
     */
    protected static function getImageServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Extbase\\Service\\ImageService'] = \TYPO3\CMS\Extbase\ServiceProvider::getImageService($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Validation\ValidatorResolver' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Validation\ValidatorResolver
     */
    protected static function getValidatorResolverService($container)
    {
        return $container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Validation\ValidatorResolver::class, ($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Validation\Validator\AlphanumericValidator' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Validation\Validator\AlphanumericValidator
     */
    protected static function getAlphanumericValidatorService($container)
    {
        $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\AlphanumericValidator'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Validation\Validator\AlphanumericValidator::class);
        };

        return $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\AlphanumericValidator']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Validation\Validator\BooleanValidator' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Validation\Validator\BooleanValidator
     */
    protected static function getBooleanValidatorService($container)
    {
        $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\BooleanValidator'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Validation\Validator\BooleanValidator::class);
        };

        return $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\BooleanValidator']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Validation\Validator\CollectionValidator' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Validation\Validator\CollectionValidator
     */
    protected static function getCollectionValidatorService($container)
    {
        $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\CollectionValidator'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Validation\Validator\CollectionValidator::class, ($container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? self::getValidatorResolverService($container)));
        };

        return $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\CollectionValidator']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Validation\Validator\ConjunctionValidator' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Validation\Validator\ConjunctionValidator
     */
    protected static function getConjunctionValidatorService($container)
    {
        $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\ConjunctionValidator'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Validation\Validator\ConjunctionValidator::class);
        };

        return $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\ConjunctionValidator']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Validation\Validator\DateTimeValidator' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Validation\Validator\DateTimeValidator
     */
    protected static function getDateTimeValidatorService($container)
    {
        $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\DateTimeValidator'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Validation\Validator\DateTimeValidator::class);
        };

        return $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\DateTimeValidator']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Validation\Validator\DisjunctionValidator' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Validation\Validator\DisjunctionValidator
     */
    protected static function getDisjunctionValidatorService($container)
    {
        $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\DisjunctionValidator'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Validation\Validator\DisjunctionValidator::class);
        };

        return $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\DisjunctionValidator']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Validation\Validator\EmailAddressValidator' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Validation\Validator\EmailAddressValidator
     */
    protected static function getEmailAddressValidatorService($container)
    {
        $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\EmailAddressValidator'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Validation\Validator\EmailAddressValidator::class);
        };

        return $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\EmailAddressValidator']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Validation\Validator\FloatValidator' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Validation\Validator\FloatValidator
     */
    protected static function getFloatValidatorService($container)
    {
        $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\FloatValidator'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Validation\Validator\FloatValidator::class);
        };

        return $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\FloatValidator']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Validation\Validator\GenericObjectValidator' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Validation\Validator\GenericObjectValidator
     */
    protected static function getGenericObjectValidatorService($container)
    {
        $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\GenericObjectValidator'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Validation\Validator\GenericObjectValidator::class);
        };

        return $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\GenericObjectValidator']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Validation\Validator\IntegerValidator' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Validation\Validator\IntegerValidator
     */
    protected static function getIntegerValidatorService($container)
    {
        $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\IntegerValidator'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Validation\Validator\IntegerValidator::class);
        };

        return $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\IntegerValidator']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Validation\Validator\NotEmptyValidator' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Validation\Validator\NotEmptyValidator
     */
    protected static function getNotEmptyValidatorService($container)
    {
        $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\NotEmptyValidator'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Validation\Validator\NotEmptyValidator::class);
        };

        return $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\NotEmptyValidator']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Validation\Validator\NumberRangeValidator' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Validation\Validator\NumberRangeValidator
     */
    protected static function getNumberRangeValidatorService($container)
    {
        $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\NumberRangeValidator'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Validation\Validator\NumberRangeValidator::class);
        };

        return $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\NumberRangeValidator']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Validation\Validator\NumberValidator' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Validation\Validator\NumberValidator
     */
    protected static function getNumberValidatorService($container)
    {
        $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\NumberValidator'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Validation\Validator\NumberValidator::class);
        };

        return $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\NumberValidator']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Validation\Validator\RegularExpressionValidator' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Validation\Validator\RegularExpressionValidator
     */
    protected static function getRegularExpressionValidatorService($container)
    {
        $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\RegularExpressionValidator'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Validation\Validator\RegularExpressionValidator::class);
        };

        return $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\RegularExpressionValidator']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Validation\Validator\StringLengthValidator' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Validation\Validator\StringLengthValidator
     */
    protected static function getStringLengthValidatorService($container)
    {
        $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\StringLengthValidator'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Validation\Validator\StringLengthValidator::class);
        };

        return $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\StringLengthValidator']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Validation\Validator\StringValidator' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Validation\Validator\StringValidator
     */
    protected static function getStringValidatorService($container)
    {
        $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\StringValidator'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Validation\Validator\StringValidator::class);
        };

        return $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\StringValidator']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Validation\Validator\TextValidator' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Validation\Validator\TextValidator
     */
    protected static function getTextValidatorService($container)
    {
        $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\TextValidator'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Validation\Validator\TextValidator::class);
        };

        return $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\TextValidator']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Validation\Validator\UrlValidator' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Validation\Validator\UrlValidator
     */
    protected static function getUrlValidatorService($container)
    {
        $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\UrlValidator'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Validation\Validator\UrlValidator::class);
        };

        return $container->factories['TYPO3\\CMS\\Extbase\\Validation\\Validator\\UrlValidator']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Command\ActivateExtensionCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Command\ActivateExtensionCommand
     */
    protected static function getActivateExtensionCommandService($container)
    {
        $container->services['TYPO3\\CMS\\Extensionmanager\\Command\\ActivateExtensionCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Command\ActivateExtensionCommand::class, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->services['TYPO3\\CMS\\Extensionmanager\\Utility\\InstallUtility'] ?? self::getInstallUtilityService($container)));

        $instance->setName('extension:activate');
        $instance->setDescription('Activates an extension by key');
        $instance->setHidden(true);
        $instance->setAliases(['extensionmanager:extension:install', 'extension:install']);

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Command\DeactivateExtensionCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Command\DeactivateExtensionCommand
     */
    protected static function getDeactivateExtensionCommandService($container)
    {
        $container->services['TYPO3\\CMS\\Extensionmanager\\Command\\DeactivateExtensionCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Command\DeactivateExtensionCommand::class, ($container->services['TYPO3\\CMS\\Extensionmanager\\Utility\\InstallUtility'] ?? self::getInstallUtilityService($container)));

        $instance->setName('extension:deactivate');
        $instance->setDescription('Deactivates an extension by key');
        $instance->setHidden(true);
        $instance->setAliases(['extensionmanager:extension:uninstall', 'extension:uninstall']);

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Command\SetupExtensionsCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Command\SetupExtensionsCommand
     */
    protected static function getSetupExtensionsCommandService($container)
    {
        $container->services['TYPO3\\CMS\\Extensionmanager\\Command\\SetupExtensionsCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Command\SetupExtensionsCommand::class, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->services['TYPO3\\CMS\\Extensionmanager\\Utility\\InstallUtility'] ?? self::getInstallUtilityService($container)), ($container->services['_early.TYPO3\\CMS\\Core\\Package\\PackageManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Package\\PackageManager', 1)));

        $instance->setName('extension:setup');
        $instance->setDescription('Set up extensions');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Controller\AbstractController' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Controller\AbstractController
     */
    protected static function getAbstractControllerService($container)
    {
        $container->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\AbstractController'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Controller\AbstractController::class);

            $a = ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container));

            $instance->injectModuleTemplateFactory(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), $a, ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))));
            $instance->injectResponseFactory(($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)));
            $instance->injectStreamFactory(($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectValidatorResolver(($container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? self::getValidatorResolverService($container)));
            $instance->injectViewResolver(($container->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $container)));
            $instance->injectReflectionService(($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)));
            $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
            $instance->injectMvcPropertyMappingConfigurationService(($container->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? self::getMvcPropertyMappingConfigurationServiceService($container)));
            $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
            $instance->injectPropertyMapper(($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? self::getPropertyMapperService($container)));
            $instance->injectInternalFlashMessageService($a);
            $instance->injectInternalExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\AbstractController']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Controller\ActionController' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Controller\ActionController
     */
    protected static function getActionControllerService($container)
    {
        $container->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\ActionController'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Controller\ActionController::class, ($container->services['TYPO3\\CMS\\Extensionmanager\\Utility\\InstallUtility'] ?? self::getInstallUtilityService($container)), ($container->services['TYPO3\\CMS\\Extensionmanager\\Service\\ExtensionManagementService'] ?? self::getExtensionManagementServiceService($container)), ($container->services['TYPO3\\CMS\\Core\\Registry'] ?? self::getRegistry2Service($container)));

            $a = ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container));

            $instance->injectModuleTemplateFactory(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), $a, ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))));
            $instance->injectResponseFactory(($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)));
            $instance->injectStreamFactory(($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectValidatorResolver(($container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? self::getValidatorResolverService($container)));
            $instance->injectViewResolver(($container->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $container)));
            $instance->injectReflectionService(($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)));
            $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
            $instance->injectMvcPropertyMappingConfigurationService(($container->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? self::getMvcPropertyMappingConfigurationServiceService($container)));
            $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
            $instance->injectPropertyMapper(($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? self::getPropertyMapperService($container)));
            $instance->injectInternalFlashMessageService($a);
            $instance->injectInternalExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\ActionController']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Controller\DistributionController' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Controller\DistributionController
     */
    protected static function getDistributionControllerService($container)
    {
        $container->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\DistributionController'] = function ($container) {
            $a = ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container));
            $b = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));

            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Controller\DistributionController::class, ($container->services['_early.TYPO3\\CMS\\Core\\Package\\PackageManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Package\\PackageManager', 1)), $a, $b);

            $c = ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container));

            $instance->injectModuleTemplateFactory(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $a, $b, ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), $c, ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))));
            $instance->injectResponseFactory(($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)));
            $instance->injectStreamFactory(($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectValidatorResolver(($container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? self::getValidatorResolverService($container)));
            $instance->injectViewResolver(($container->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $container)));
            $instance->injectReflectionService(($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)));
            $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
            $instance->injectMvcPropertyMappingConfigurationService(($container->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? self::getMvcPropertyMappingConfigurationServiceService($container)));
            $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
            $instance->injectPropertyMapper(($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? self::getPropertyMapperService($container)));
            $instance->injectInternalFlashMessageService($c);
            $instance->injectInternalExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\DistributionController']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Controller\DownloadController' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Controller\DownloadController
     */
    protected static function getDownloadControllerService($container)
    {
        $container->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\DownloadController'] = function ($container) {
            $a = ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class));

            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Controller\DownloadController::class, ($container->services['TYPO3\\CMS\\Extensionmanager\\Domain\\Repository\\ExtensionRepository'] ?? self::getExtensionRepositoryService($container)), ($container->services['TYPO3\\CMS\\Extensionmanager\\Service\\ExtensionManagementService'] ?? self::getExtensionManagementServiceService($container)), $a);

            $b = ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container));

            $instance->injectModuleTemplateFactory(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), $b, $a, ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))));
            $instance->injectResponseFactory(($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)));
            $instance->injectStreamFactory(($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectValidatorResolver(($container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? self::getValidatorResolverService($container)));
            $instance->injectViewResolver(($container->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $container)));
            $instance->injectReflectionService(($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)));
            $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
            $instance->injectMvcPropertyMappingConfigurationService(($container->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? self::getMvcPropertyMappingConfigurationServiceService($container)));
            $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
            $instance->injectPropertyMapper(($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? self::getPropertyMapperService($container)));
            $instance->injectInternalFlashMessageService($b);
            $instance->injectInternalExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\DownloadController']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Controller\ExtensionComposerStatusController' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Controller\ExtensionComposerStatusController
     */
    protected static function getExtensionComposerStatusControllerService($container)
    {
        $container->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\ExtensionComposerStatusController'] = function ($container) {
            $a = ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container));
            $b = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));

            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Controller\ExtensionComposerStatusController::class, ($container->privates['TYPO3\\CMS\\Extensionmanager\\Package\\ComposerDeficitDetector'] ?? self::getComposerDeficitDetectorService($container)), ($container->privates['TYPO3\\CMS\\Extensionmanager\\Service\\ComposerManifestProposalGenerator'] ?? self::getComposerManifestProposalGeneratorService($container)), $a, $b);

            $c = ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container));

            $instance->injectModuleTemplateFactory(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $a, $b, ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), $c, ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))));
            $instance->injectResponseFactory(($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)));
            $instance->injectStreamFactory(($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectValidatorResolver(($container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? self::getValidatorResolverService($container)));
            $instance->injectViewResolver(($container->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $container)));
            $instance->injectReflectionService(($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)));
            $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
            $instance->injectMvcPropertyMappingConfigurationService(($container->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? self::getMvcPropertyMappingConfigurationServiceService($container)));
            $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
            $instance->injectPropertyMapper(($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? self::getPropertyMapperService($container)));
            $instance->injectInternalFlashMessageService($c);
            $instance->injectInternalExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\ExtensionComposerStatusController']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Controller\ListController' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Controller\ListController
     */
    protected static function getListControllerService($container)
    {
        $container->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\ListController'] = function ($container) {
            $a = ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container));
            $b = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
            $c = ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class));

            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Controller\ListController::class, $a, ($container->services['TYPO3\\CMS\\Extensionmanager\\Domain\\Repository\\ExtensionRepository'] ?? self::getExtensionRepositoryService($container)), ($container->services['TYPO3\\CMS\\Extensionmanager\\Utility\\ListUtility'] ?? self::getListUtilityService($container)), ($container->services['TYPO3\\CMS\\Extensionmanager\\Utility\\DependencyUtility'] ?? self::getDependencyUtilityService($container)), $b, ($container->services['TYPO3\\CMS\\Extensionmanager\\Remote\\RemoteRegistry'] ?? self::getRemoteRegistryService($container)), $c);

            $d = ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container));

            $instance->injectModuleTemplateFactory(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $a, $b, ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), $d, $c, ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))));
            $instance->injectResponseFactory(($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)));
            $instance->injectStreamFactory(($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectValidatorResolver(($container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? self::getValidatorResolverService($container)));
            $instance->injectViewResolver(($container->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $container)));
            $instance->injectReflectionService(($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)));
            $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
            $instance->injectMvcPropertyMappingConfigurationService(($container->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? self::getMvcPropertyMappingConfigurationServiceService($container)));
            $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
            $instance->injectPropertyMapper(($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? self::getPropertyMapperService($container)));
            $instance->injectInternalFlashMessageService($d);
            $instance->injectInternalExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\ListController']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Controller\UpdateFromTerController' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Controller\UpdateFromTerController
     */
    protected static function getUpdateFromTerControllerService($container)
    {
        $container->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\UpdateFromTerController'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Controller\UpdateFromTerController::class, ($container->services['TYPO3\\CMS\\Extensionmanager\\Remote\\RemoteRegistry'] ?? self::getRemoteRegistryService($container)), ($container->services['TYPO3\\CMS\\Extensionmanager\\Utility\\ListUtility'] ?? self::getListUtilityService($container)), ($container->services['TYPO3\\CMS\\Extensionmanager\\Domain\\Repository\\ExtensionRepository'] ?? self::getExtensionRepositoryService($container)));

            $a = ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container));

            $instance->injectModuleTemplateFactory(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), $a, ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))));
            $instance->injectResponseFactory(($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)));
            $instance->injectStreamFactory(($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectValidatorResolver(($container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? self::getValidatorResolverService($container)));
            $instance->injectViewResolver(($container->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $container)));
            $instance->injectReflectionService(($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)));
            $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
            $instance->injectMvcPropertyMappingConfigurationService(($container->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? self::getMvcPropertyMappingConfigurationServiceService($container)));
            $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
            $instance->injectPropertyMapper(($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? self::getPropertyMapperService($container)));
            $instance->injectInternalFlashMessageService($a);
            $instance->injectInternalExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\UpdateFromTerController']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Controller\UploadExtensionFileController' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Controller\UploadExtensionFileController
     */
    protected static function getUploadExtensionFileControllerService($container)
    {
        $container->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\UploadExtensionFileController'] = function ($container) {
            $a = ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class));

            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Controller\UploadExtensionFileController::class, ($container->services['TYPO3\\CMS\\Extensionmanager\\Utility\\FileHandlingUtility'] ?? self::getFileHandlingUtilityService($container)), ($container->services['TYPO3\\CMS\\Extensionmanager\\Service\\ExtensionManagementService'] ?? self::getExtensionManagementServiceService($container)), $a);

            $b = ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container));

            $instance->injectModuleTemplateFactory(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), $b, $a, ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))));
            $instance->injectResponseFactory(($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)));
            $instance->injectStreamFactory(($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectValidatorResolver(($container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? self::getValidatorResolverService($container)));
            $instance->injectViewResolver(($container->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $container)));
            $instance->injectReflectionService(($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)));
            $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
            $instance->injectMvcPropertyMappingConfigurationService(($container->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? self::getMvcPropertyMappingConfigurationServiceService($container)));
            $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
            $instance->injectPropertyMapper(($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? self::getPropertyMapperService($container)));
            $instance->injectInternalFlashMessageService($b);
            $instance->injectInternalExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\UploadExtensionFileController']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Domain\Model\DownloadQueue' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Domain\Model\DownloadQueue
     */
    protected static function getDownloadQueueService($container)
    {
        return $container->services['TYPO3\\CMS\\Extensionmanager\\Domain\\Model\\DownloadQueue'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Domain\Model\DownloadQueue::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Domain\Repository\BulkExtensionRepositoryWriter' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Domain\Repository\BulkExtensionRepositoryWriter
     */
    protected static function getBulkExtensionRepositoryWriterService($container)
    {
        return $container->services['TYPO3\\CMS\\Extensionmanager\\Domain\\Repository\\BulkExtensionRepositoryWriter'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Domain\Repository\BulkExtensionRepositoryWriter::class, ($container->services['TYPO3\\CMS\\Extensionmanager\\Domain\\Repository\\ExtensionRepository'] ?? self::getExtensionRepositoryService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Domain\Model\Extension::class), ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Parser\ExtensionXmlParser::class));
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Domain\Repository\ExtensionRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Domain\Repository\ExtensionRepository
     */
    protected static function getExtensionRepositoryService($container)
    {
        $container->services['TYPO3\\CMS\\Extensionmanager\\Domain\\Repository\\ExtensionRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Domain\Repository\ExtensionRepository::class);

        $instance->injectQuerySettings(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Typo3QuerySettings::class, ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)), ($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container))));
        $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));
        $instance->initializeObject();

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Remote\RemoteRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Remote\RemoteRegistry
     */
    protected static function getRemoteRegistryService($container)
    {
        $container->services['TYPO3\\CMS\\Extensionmanager\\Remote\\RemoteRegistry'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Remote\RemoteRegistry::class);

        $instance->registerRemote(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Remote\TerExtensionRemote::class, 'ter'), ['default' => true, 'enabled' => true]);

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Report\ExtensionComposerStatus' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Report\ExtensionComposerStatus
     */
    protected static function getExtensionComposerStatusService($container)
    {
        return $container->services['TYPO3\\CMS\\Extensionmanager\\Report\\ExtensionComposerStatus'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Report\ExtensionComposerStatus::class, ($container->privates['TYPO3\\CMS\\Extensionmanager\\Package\\ComposerDeficitDetector'] ?? self::getComposerDeficitDetectorService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Service\ExtensionManagementService' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Service\ExtensionManagementService
     */
    protected static function getExtensionManagementServiceService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Extensionmanager\\Utility\\FileHandlingUtility'] ?? self::getFileHandlingUtilityService($container));

        if (isset($container->services['TYPO3\\CMS\\Extensionmanager\\Service\\ExtensionManagementService'])) {
            return $container->services['TYPO3\\CMS\\Extensionmanager\\Service\\ExtensionManagementService'];
        }

        $container->services['TYPO3\\CMS\\Extensionmanager\\Service\\ExtensionManagementService'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Service\ExtensionManagementService::class, ($container->services['TYPO3\\CMS\\Extensionmanager\\Remote\\RemoteRegistry'] ?? self::getRemoteRegistryService($container)), $a);

        $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
        $instance->injectDownloadQueue(($container->services['TYPO3\\CMS\\Extensionmanager\\Domain\\Model\\DownloadQueue'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Domain\Model\DownloadQueue::class)));
        $instance->injectDependencyUtility(($container->services['TYPO3\\CMS\\Extensionmanager\\Utility\\DependencyUtility'] ?? self::getDependencyUtilityService($container)));
        $instance->injectInstallUtility(($container->services['TYPO3\\CMS\\Extensionmanager\\Utility\\InstallUtility'] ?? self::getInstallUtilityService($container)));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Utility\DependencyUtility' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Utility\DependencyUtility
     */
    protected static function getDependencyUtilityService($container)
    {
        $container->services['TYPO3\\CMS\\Extensionmanager\\Utility\\DependencyUtility'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Utility\DependencyUtility::class);

        $instance->injectExtensionRepository(($container->services['TYPO3\\CMS\\Extensionmanager\\Domain\\Repository\\ExtensionRepository'] ?? self::getExtensionRepositoryService($container)));
        $instance->injectListUtility(($container->services['TYPO3\\CMS\\Extensionmanager\\Utility\\ListUtility'] ?? self::getListUtilityService($container)));
        $instance->injectEmConfUtility(($container->services['TYPO3\\CMS\\Extensionmanager\\Utility\\EmConfUtility'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Utility\EmConfUtility::class)));
        $instance->injectManagementService(($container->services['TYPO3\\CMS\\Extensionmanager\\Service\\ExtensionManagementService'] ?? self::getExtensionManagementServiceService($container)));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Utility\EmConfUtility' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Utility\EmConfUtility
     */
    protected static function getEmConfUtilityService($container)
    {
        return $container->services['TYPO3\\CMS\\Extensionmanager\\Utility\\EmConfUtility'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Utility\EmConfUtility::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Utility\FileHandlingUtility' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Utility\FileHandlingUtility
     */
    protected static function getFileHandlingUtilityService($container)
    {
        $container->services['TYPO3\\CMS\\Extensionmanager\\Utility\\FileHandlingUtility'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Utility\FileHandlingUtility::class);

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Extensionmanager\\Utility\\FileHandlingUtility'));
        $instance->injectEmConfUtility(($container->services['TYPO3\\CMS\\Extensionmanager\\Utility\\EmConfUtility'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Utility\EmConfUtility::class)));
        $instance->injectInstallUtility(($container->services['TYPO3\\CMS\\Extensionmanager\\Utility\\InstallUtility'] ?? self::getInstallUtilityService($container)));
        $instance->injectLanguageServiceFactory(($container->services['TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory'] ?? self::getLanguageServiceFactoryService($container)));
        $instance->initializeObject();

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Utility\InstallUtility' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Utility\InstallUtility
     */
    protected static function getInstallUtilityService($container)
    {
        $container->services['TYPO3\\CMS\\Extensionmanager\\Utility\\InstallUtility'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Utility\InstallUtility::class);

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Extensionmanager\\Utility\\InstallUtility'));
        $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
        $instance->injectFileHandlingUtility(($container->services['TYPO3\\CMS\\Extensionmanager\\Utility\\FileHandlingUtility'] ?? self::getFileHandlingUtilityService($container)));
        $instance->injectListUtility(($container->services['TYPO3\\CMS\\Extensionmanager\\Utility\\ListUtility'] ?? self::getListUtilityService($container)));
        $instance->injectPackageManager(($container->services['_early.TYPO3\\CMS\\Core\\Package\\PackageManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Package\\PackageManager', 1)));
        $instance->injectCacheManager(($container->services['TYPO3\\CMS\\Core\\Cache\\CacheManager'] ?? self::getCacheManagerService($container)));
        $instance->injectRegistry(($container->services['TYPO3\\CMS\\Core\\Registry'] ?? self::getRegistry2Service($container)));
        $instance->injectBootService(($container->services['TYPO3\\CMS\\Core\\Core\\BootService'] ?? self::getBootServiceService($container)));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Utility\ListUtility' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Utility\ListUtility
     */
    protected static function getListUtilityService($container)
    {
        $container->services['TYPO3\\CMS\\Extensionmanager\\Utility\\ListUtility'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Utility\ListUtility::class);

        $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
        $instance->injectEmConfUtility(($container->services['TYPO3\\CMS\\Extensionmanager\\Utility\\EmConfUtility'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Utility\EmConfUtility::class)));
        $instance->injectExtensionRepository(($container->services['TYPO3\\CMS\\Extensionmanager\\Domain\\Repository\\ExtensionRepository'] ?? self::getExtensionRepositoryService($container)));
        $instance->injectPackageManager(($container->services['_early.TYPO3\\CMS\\Core\\Package\\PackageManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Package\\PackageManager', 1)));
        $instance->injectDependencyUtility(($container->services['TYPO3\\CMS\\Extensionmanager\\Utility\\DependencyUtility'] ?? self::getDependencyUtilityService($container)));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\ViewHelpers\Be\TriggerViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\ViewHelpers\Be\TriggerViewHelper
     */
    protected static function getTriggerViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\Be\\TriggerViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\ViewHelpers\Be\TriggerViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\Be\\TriggerViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\ViewHelpers\ConstraintsViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\ViewHelpers\ConstraintsViewHelper
     */
    protected static function getConstraintsViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ConstraintsViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\ViewHelpers\ConstraintsViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ConstraintsViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\ViewHelpers\DownloadExtensionViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\ViewHelpers\DownloadExtensionViewHelper
     */
    protected static function getDownloadExtensionViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\DownloadExtensionViewHelper'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\ViewHelpers\DownloadExtensionViewHelper::class);

            $instance->injectExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));
            $instance->injectIconFactory(($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)));
            $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\DownloadExtensionViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\ViewHelpers\InstallationStateCssClassViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\ViewHelpers\InstallationStateCssClassViewHelper
     */
    protected static function getInstallationStateCssClassViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\InstallationStateCssClassViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\ViewHelpers\InstallationStateCssClassViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\InstallationStateCssClassViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\ViewHelpers\ProcessAvailableActionsViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\ViewHelpers\ProcessAvailableActionsViewHelper
     */
    protected static function getProcessAvailableActionsViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ProcessAvailableActionsViewHelper'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\ViewHelpers\ProcessAvailableActionsViewHelper::class);

            $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ProcessAvailableActionsViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\ViewHelpers\ReloadSqlDataViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\ViewHelpers\ReloadSqlDataViewHelper
     */
    protected static function getReloadSqlDataViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ReloadSqlDataViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\ViewHelpers\ReloadSqlDataViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ReloadSqlDataViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\ViewHelpers\RemoveExtensionViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\ViewHelpers\RemoveExtensionViewHelper
     */
    protected static function getRemoveExtensionViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\RemoveExtensionViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\ViewHelpers\RemoveExtensionViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\RemoveExtensionViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\ViewHelpers\ToggleExtensionInstallationStateViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\ViewHelpers\ToggleExtensionInstallationStateViewHelper
     */
    protected static function getToggleExtensionInstallationStateViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ToggleExtensionInstallationStateViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\ViewHelpers\ToggleExtensionInstallationStateViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ToggleExtensionInstallationStateViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\ViewHelpers\Typo3DependencyViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\ViewHelpers\Typo3DependencyViewHelper
     */
    protected static function getTypo3DependencyViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\Typo3DependencyViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\ViewHelpers\Typo3DependencyViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\Typo3DependencyViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Filelist\Controller\FileDownloadController' shared autowired service.
     *
     * @return \TYPO3\CMS\Filelist\Controller\FileDownloadController
     */
    protected static function getFileDownloadControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Filelist\\Controller\\FileDownloadController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Filelist\Controller\FileDownloadController::class, ($container->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? self::getResourceFactoryService($container)), ($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)), ($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)), ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Filelist\Controller\FileListController' shared autowired service.
     *
     * @return \TYPO3\CMS\Filelist\Controller\FileListController
     */
    protected static function getFileListControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));
        $b = ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container));
        $c = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $d = ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container));

        $container->services['TYPO3\\CMS\\Filelist\\Controller\\FileListController'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Filelist\Controller\FileListController::class, $a, $b, $c, ($container->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? self::getResourceFactoryService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $c, $a, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), $d), $d, ($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)));

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Filelist\\Controller\\FileListController'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Filelist\Controller\File\CreateFileController' shared autowired service.
     *
     * @return \TYPO3\CMS\Filelist\Controller\File\CreateFileController
     */
    protected static function getCreateFileControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $b = ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container));

        return $container->services['TYPO3\\CMS\\Filelist\\Controller\\File\\CreateFileController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Filelist\Controller\File\CreateFileController::class, $a, $b, ($container->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? self::getResourceFactoryService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), ($container->services['TYPO3\\CMS\\Core\\Resource\\OnlineMedia\\Helpers\\OnlineMediaHelperRegistry'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\OnlineMedia\Helpers\OnlineMediaHelperRegistry::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Filelist\Controller\File\CreateFolderController' shared autowired service.
     *
     * @return \TYPO3\CMS\Filelist\Controller\File\CreateFolderController
     */
    protected static function getCreateFolderControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Filelist\\Controller\\File\\CreateFolderController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Filelist\Controller\File\CreateFolderController::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Filelist\Controller\File\EditFileController' shared autowired service.
     *
     * @return \TYPO3\CMS\Filelist\Controller\File\EditFileController
     */
    protected static function getEditFileControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $b = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));

        return $container->services['TYPO3\\CMS\\Filelist\\Controller\\File\\EditFileController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Filelist\Controller\File\EditFileController::class, $a, $b, ($container->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? self::getResourceFactoryService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), $a, $b, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), ($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)), ($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Filelist\Controller\File\FileUploadController' shared autowired service.
     *
     * @return \TYPO3\CMS\Filelist\Controller\File\FileUploadController
     */
    protected static function getFileUploadControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $b = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));

        return $container->services['TYPO3\\CMS\\Filelist\\Controller\\File\\FileUploadController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Filelist\Controller\File\FileUploadController::class, $a, $b, ($container->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? self::getResourceFactoryService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), $a, $b, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Filelist\Controller\File\RenameFileController' shared autowired service.
     *
     * @return \TYPO3\CMS\Filelist\Controller\File\RenameFileController
     */
    protected static function getRenameFileControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Filelist\\Controller\\File\\RenameFileController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Filelist\Controller\File\RenameFileController::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Filelist\Controller\File\ReplaceFileController' shared autowired service.
     *
     * @return \TYPO3\CMS\Filelist\Controller\File\ReplaceFileController
     */
    protected static function getReplaceFileControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $b = ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container));
        $c = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));

        return $container->services['TYPO3\\CMS\\Filelist\\Controller\\File\\ReplaceFileController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Filelist\Controller\File\ReplaceFileController::class, $a, $b, $c, ($container->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? self::getResourceFactoryService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, $c, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Filelist\LinkHandler\FileLinkHandler' autowired service.
     *
     * @return \TYPO3\CMS\Filelist\LinkHandler\FileLinkHandler
     */
    protected static function getFileLinkHandlerService($container)
    {
        $container->factories['TYPO3\\CMS\\Filelist\\LinkHandler\\FileLinkHandler'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Filelist\LinkHandler\FileLinkHandler::class, ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? self::getResourceFactoryService($container)), ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory'] ?? self::getLanguageServiceFactoryService($container)));
        };

        return $container->factories['TYPO3\\CMS\\Filelist\\LinkHandler\\FileLinkHandler']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Filelist\LinkHandler\FolderLinkHandler' autowired service.
     *
     * @return \TYPO3\CMS\Filelist\LinkHandler\FolderLinkHandler
     */
    protected static function getFolderLinkHandlerService($container)
    {
        $container->factories['TYPO3\\CMS\\Filelist\\LinkHandler\\FolderLinkHandler'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Filelist\LinkHandler\FolderLinkHandler::class, ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? self::getResourceFactoryService($container)), ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory'] ?? self::getLanguageServiceFactoryService($container)));
        };

        return $container->factories['TYPO3\\CMS\\Filelist\\LinkHandler\\FolderLinkHandler']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\FluidStyledContent\ViewHelpers\Link\ClickEnlargeViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\FluidStyledContent\ViewHelpers\Link\ClickEnlargeViewHelper
     */
    protected static function getClickEnlargeViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\FluidStyledContent\\ViewHelpers\\Link\\ClickEnlargeViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FluidStyledContent\ViewHelpers\Link\ClickEnlargeViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\FluidStyledContent\\ViewHelpers\\Link\\ClickEnlargeViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\Core\Rendering\RenderingContextFactory' shared service.
     *
     * @return \TYPO3\CMS\Fluid\Core\Rendering\RenderingContextFactory
     */
    protected static function getRenderingContextFactoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Fluid\\Core\\Rendering\\RenderingContextFactory'] = \TYPO3\CMS\Fluid\ServiceProvider::getRenderingContextFactory($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\Core\ViewHelper\ViewHelperResolverFactory' shared service.
     *
     * @return \TYPO3\CMS\Fluid\Core\ViewHelper\ViewHelperResolverFactory
     */
    protected static function getViewHelperResolverFactoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Fluid\\Core\\ViewHelper\\ViewHelperResolverFactory'] = \TYPO3\CMS\Fluid\ServiceProvider::getViewHelperResolverFactory($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\Core\ViewHelper\ViewHelperResolverFactoryInterface' shared service.
     *
     * @return \TYPO3\CMS\Fluid\Core\ViewHelper\ViewHelperResolverFactoryInterface
     */
    protected static function getViewHelperResolverFactoryInterfaceService($container)
    {
        return $container->services['TYPO3\\CMS\\Fluid\\Core\\ViewHelper\\ViewHelperResolverFactoryInterface'] = \TYPO3\CMS\Fluid\ServiceProvider::getViewHelperResolverFactoryInterface($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Asset\CssViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Asset\CssViewHelper
     */
    protected static function getCssViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Asset\\CssViewHelper'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Asset\CssViewHelper::class);

            $instance->injectAssetCollector(($container->services['TYPO3\\CMS\\Core\\Page\\AssetCollector'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\AssetCollector::class)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Asset\\CssViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Asset\ScriptViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Asset\ScriptViewHelper
     */
    protected static function getScriptViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Asset\\ScriptViewHelper'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Asset\ScriptViewHelper::class);

            $instance->injectAssetCollector(($container->services['TYPO3\\CMS\\Core\\Page\\AssetCollector'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\AssetCollector::class)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Asset\\ScriptViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\Buttons\CshViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\Buttons\CshViewHelper
     */
    protected static function getCshViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Buttons\\CshViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\Buttons\CshViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Buttons\\CshViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\InfoboxViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\InfoboxViewHelper
     */
    protected static function getInfoboxViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\InfoboxViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\InfoboxViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\InfoboxViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\Labels\CshViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\Labels\CshViewHelper
     */
    protected static function getCshViewHelper2Service($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Labels\\CshViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\Labels\CshViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Labels\\CshViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\LinkViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\LinkViewHelper
     */
    protected static function getLinkViewHelper2Service($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\LinkViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\LinkViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\LinkViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\Menus\ActionMenuItemGroupViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\Menus\ActionMenuItemGroupViewHelper
     */
    protected static function getActionMenuItemGroupViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Menus\\ActionMenuItemGroupViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\Menus\ActionMenuItemGroupViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Menus\\ActionMenuItemGroupViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\Menus\ActionMenuItemViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\Menus\ActionMenuItemViewHelper
     */
    protected static function getActionMenuItemViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Menus\\ActionMenuItemViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\Menus\ActionMenuItemViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Menus\\ActionMenuItemViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\Menus\ActionMenuViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\Menus\ActionMenuViewHelper
     */
    protected static function getActionMenuViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Menus\\ActionMenuViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\Menus\ActionMenuViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Menus\\ActionMenuViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\PageInfoViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\PageInfoViewHelper
     */
    protected static function getPageInfoViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\PageInfoViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\PageInfoViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\PageInfoViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\PagePathViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\PagePathViewHelper
     */
    protected static function getPagePathViewHelper2Service($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\PagePathViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\PagePathViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\PagePathViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\PageRendererViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\PageRendererViewHelper
     */
    protected static function getPageRendererViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\PageRendererViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\PageRendererViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\PageRendererViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\Security\IfAuthenticatedViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\Security\IfAuthenticatedViewHelper
     */
    protected static function getIfAuthenticatedViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Security\\IfAuthenticatedViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\Security\IfAuthenticatedViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Security\\IfAuthenticatedViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\Security\IfHasRoleViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\Security\IfHasRoleViewHelper
     */
    protected static function getIfHasRoleViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Security\\IfHasRoleViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\Security\IfHasRoleViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Security\\IfHasRoleViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\TableListViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\TableListViewHelper
     */
    protected static function getTableListViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\TableListViewHelper'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\TableListViewHelper::class);

            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\TableListViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\UriViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\UriViewHelper
     */
    protected static function getUriViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\UriViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\UriViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\UriViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\CObjectViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\CObjectViewHelper
     */
    protected static function getCObjectViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\CObjectViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\CObjectViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\CObjectViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\DebugViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\DebugViewHelper
     */
    protected static function getDebugViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\DebugViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\DebugViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\DebugViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Debug\RenderViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Debug\RenderViewHelper
     */
    protected static function getRenderViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Debug\\RenderViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Debug\RenderViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Debug\\RenderViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\FlashMessagesViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\FlashMessagesViewHelper
     */
    protected static function getFlashMessagesViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\FlashMessagesViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\FlashMessagesViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\FlashMessagesViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\FormViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\FormViewHelper
     */
    protected static function getFormViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\FormViewHelper'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\FormViewHelper::class);

            $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
            $instance->injectMvcPropertyMappingConfigurationService(($container->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? self::getMvcPropertyMappingConfigurationServiceService($container)));
            $instance->injectExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\FormViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Form\ButtonViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Form\ButtonViewHelper
     */
    protected static function getButtonViewHelper2Service($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\ButtonViewHelper'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Form\ButtonViewHelper::class);

            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\ButtonViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Form\CheckboxViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Form\CheckboxViewHelper
     */
    protected static function getCheckboxViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\CheckboxViewHelper'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Form\CheckboxViewHelper::class);

            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\CheckboxViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Form\CountrySelectViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Form\CountrySelectViewHelper
     */
    protected static function getCountrySelectViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\CountrySelectViewHelper'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Form\CountrySelectViewHelper::class);

            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\CountrySelectViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Form\HiddenViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Form\HiddenViewHelper
     */
    protected static function getHiddenViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\HiddenViewHelper'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Form\HiddenViewHelper::class);

            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\HiddenViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Form\PasswordViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Form\PasswordViewHelper
     */
    protected static function getPasswordViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\PasswordViewHelper'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Form\PasswordViewHelper::class);

            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\PasswordViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Form\RadioViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Form\RadioViewHelper
     */
    protected static function getRadioViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\RadioViewHelper'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Form\RadioViewHelper::class);

            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\RadioViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Form\SelectViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Form\SelectViewHelper
     */
    protected static function getSelectViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\SelectViewHelper'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Form\SelectViewHelper::class);

            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\SelectViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Form\Select\OptgroupViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Form\Select\OptgroupViewHelper
     */
    protected static function getOptgroupViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\Select\\OptgroupViewHelper'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Form\Select\OptgroupViewHelper::class);

            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\Select\\OptgroupViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Form\Select\OptionViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Form\Select\OptionViewHelper
     */
    protected static function getOptionViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\Select\\OptionViewHelper'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Form\Select\OptionViewHelper::class);

            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\Select\\OptionViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Form\SubmitViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Form\SubmitViewHelper
     */
    protected static function getSubmitViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\SubmitViewHelper'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Form\SubmitViewHelper::class);

            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\SubmitViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Form\TextareaViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Form\TextareaViewHelper
     */
    protected static function getTextareaViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\TextareaViewHelper'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Form\TextareaViewHelper::class);

            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\TextareaViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Form\TextfieldViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Form\TextfieldViewHelper
     */
    protected static function getTextfieldViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\TextfieldViewHelper'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Form\TextfieldViewHelper::class);

            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\TextfieldViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Form\UploadViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Form\UploadViewHelper
     */
    protected static function getUploadViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\UploadViewHelper'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Form\UploadViewHelper::class);

            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\UploadViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Form\ValidationResultsViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Form\ValidationResultsViewHelper
     */
    protected static function getValidationResultsViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\ValidationResultsViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Form\ValidationResultsViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\ValidationResultsViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Format\BytesViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Format\BytesViewHelper
     */
    protected static function getBytesViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\BytesViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Format\BytesViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\BytesViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Format\CaseViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Format\CaseViewHelper
     */
    protected static function getCaseViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\CaseViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Format\CaseViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\CaseViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Format\CropViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Format\CropViewHelper
     */
    protected static function getCropViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\CropViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Format\CropViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\CropViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Format\CurrencyViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Format\CurrencyViewHelper
     */
    protected static function getCurrencyViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\CurrencyViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Format\CurrencyViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\CurrencyViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Format\DateViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Format\DateViewHelper
     */
    protected static function getDateViewHelper2Service($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\DateViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Format\DateViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\DateViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Format\HtmlViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Format\HtmlViewHelper
     */
    protected static function getHtmlViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\HtmlViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Format\HtmlViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\HtmlViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Format\HtmlentitiesDecodeViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Format\HtmlentitiesDecodeViewHelper
     */
    protected static function getHtmlentitiesDecodeViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\HtmlentitiesDecodeViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Format\HtmlentitiesDecodeViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\HtmlentitiesDecodeViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Format\HtmlentitiesViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Format\HtmlentitiesViewHelper
     */
    protected static function getHtmlentitiesViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\HtmlentitiesViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Format\HtmlentitiesViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\HtmlentitiesViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Format\JsonViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Format\JsonViewHelper
     */
    protected static function getJsonViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\JsonViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Format\JsonViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\JsonViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Format\Nl2brViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Format\Nl2brViewHelper
     */
    protected static function getNl2brViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\Nl2brViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Format\Nl2brViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\Nl2brViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Format\NumberViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Format\NumberViewHelper
     */
    protected static function getNumberViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\NumberViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Format\NumberViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\NumberViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Format\PaddingViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Format\PaddingViewHelper
     */
    protected static function getPaddingViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\PaddingViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Format\PaddingViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\PaddingViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Format\StripTagsViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Format\StripTagsViewHelper
     */
    protected static function getStripTagsViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\StripTagsViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Format\StripTagsViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\StripTagsViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Format\TrimViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Format\TrimViewHelper
     */
    protected static function getTrimViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\TrimViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Format\TrimViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\TrimViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Format\UrlencodeViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Format\UrlencodeViewHelper
     */
    protected static function getUrlencodeViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\UrlencodeViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Format\UrlencodeViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\UrlencodeViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\ImageViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\ImageViewHelper
     */
    protected static function getImageViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\ImageViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\ImageViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\ImageViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Link\ActionViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Link\ActionViewHelper
     */
    protected static function getActionViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\ActionViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Link\ActionViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\ActionViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Link\EmailViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Link\EmailViewHelper
     */
    protected static function getEmailViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\EmailViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Link\EmailViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\EmailViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Link\ExternalViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Link\ExternalViewHelper
     */
    protected static function getExternalViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\ExternalViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Link\ExternalViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\ExternalViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Link\FileViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Link\FileViewHelper
     */
    protected static function getFileViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\FileViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Link\FileViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\FileViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Link\PageViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Link\PageViewHelper
     */
    protected static function getPageViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\PageViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Link\PageViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\PageViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Link\TypolinkViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Link\TypolinkViewHelper
     */
    protected static function getTypolinkViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\TypolinkViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Link\TypolinkViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\TypolinkViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\MediaViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\MediaViewHelper
     */
    protected static function getMediaViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\MediaViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\MediaViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\MediaViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\RenderViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\RenderViewHelper
     */
    protected static function getRenderViewHelper2Service($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\RenderViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\RenderViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\RenderViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Sanitize\HtmlViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Sanitize\HtmlViewHelper
     */
    protected static function getHtmlViewHelper2Service($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Sanitize\\HtmlViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Sanitize\HtmlViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Sanitize\\HtmlViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Security\IfAuthenticatedViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Security\IfAuthenticatedViewHelper
     */
    protected static function getIfAuthenticatedViewHelper2Service($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Security\\IfAuthenticatedViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Security\IfAuthenticatedViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Security\\IfAuthenticatedViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Security\IfHasRoleViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Security\IfHasRoleViewHelper
     */
    protected static function getIfHasRoleViewHelper2Service($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Security\\IfHasRoleViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Security\IfHasRoleViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Security\\IfHasRoleViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Security\NonceViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Security\NonceViewHelper
     */
    protected static function getNonceViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Security\\NonceViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Security\NonceViewHelper::class, ($container->services['_early.TYPO3\\CMS\\Core\\Core\\RequestId'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Core\\RequestId', 1)));
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Security\\NonceViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Transform\HtmlViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Transform\HtmlViewHelper
     */
    protected static function getHtmlViewHelper3Service($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Transform\\HtmlViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Transform\HtmlViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Transform\\HtmlViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\TranslateViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\TranslateViewHelper
     */
    protected static function getTranslateViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\TranslateViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\TranslateViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\TranslateViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Uri\ActionViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Uri\ActionViewHelper
     */
    protected static function getActionViewHelper2Service($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ActionViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Uri\ActionViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ActionViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Uri\ExternalViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Uri\ExternalViewHelper
     */
    protected static function getExternalViewHelper2Service($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ExternalViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Uri\ExternalViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ExternalViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Uri\ImageViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Uri\ImageViewHelper
     */
    protected static function getImageViewHelper2Service($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ImageViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Uri\ImageViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ImageViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Uri\PageViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Uri\PageViewHelper
     */
    protected static function getPageViewHelper2Service($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\PageViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Uri\PageViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\PageViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Uri\ResourceViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Uri\ResourceViewHelper
     */
    protected static function getResourceViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ResourceViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Uri\ResourceViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ResourceViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Uri\TypolinkViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Uri\TypolinkViewHelper
     */
    protected static function getTypolinkViewHelper2Service($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\TypolinkViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Uri\TypolinkViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\TypolinkViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\View\StandaloneView' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\View\StandaloneView
     */
    protected static function getStandaloneViewService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\View\\StandaloneView'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\View\StandaloneView::class, NULL);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\View\\StandaloneView']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\View\TemplateView' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\View\TemplateView
     */
    protected static function getTemplateViewService($container)
    {
        $container->factories['TYPO3\\CMS\\Fluid\\View\\TemplateView'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\View\TemplateView::class, NULL);
        };

        return $container->factories['TYPO3\\CMS\\Fluid\\View\\TemplateView']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Controller\FormEditorController' autowired service.
     *
     * @return \TYPO3\CMS\Form\Controller\FormEditorController
     */
    protected static function getFormEditorControllerService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\Controller\\FormEditorController'] = function ($container) {
            $a = ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container));
            $b = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
            $c = ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container));

            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Controller\FormEditorController::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $a, $b, ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), $c, ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), $a, $b, ($container->services['TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinitionConversionService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Domain\Configuration\FormDefinitionConversionService::class)));

            $instance->injectFormPersistenceManager(($container->services['TYPO3\\CMS\\Form\\Mvc\\Persistence\\FormPersistenceManagerInterface'] ?? self::getFormPersistenceManagerInterfaceService($container)));
            $instance->injectResponseFactory(($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)));
            $instance->injectStreamFactory(($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectValidatorResolver(($container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? self::getValidatorResolverService($container)));
            $instance->injectViewResolver(($container->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $container)));
            $instance->injectReflectionService(($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)));
            $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
            $instance->injectMvcPropertyMappingConfigurationService(($container->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? self::getMvcPropertyMappingConfigurationServiceService($container)));
            $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
            $instance->injectPropertyMapper(($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? self::getPropertyMapperService($container)));
            $instance->injectInternalFlashMessageService($c);
            $instance->injectInternalExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));
            $instance->initializeObject();

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Form\\Controller\\FormEditorController']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Controller\FormFrontendController' autowired service.
     *
     * @return \TYPO3\CMS\Form\Controller\FormFrontendController
     */
    protected static function getFormFrontendControllerService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\Controller\\FormFrontendController'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Controller\FormFrontendController::class);

            $instance->injectFormPersistenceManager(($container->services['TYPO3\\CMS\\Form\\Mvc\\Persistence\\FormPersistenceManagerInterface'] ?? self::getFormPersistenceManagerInterfaceService($container)));
            $instance->injectResponseFactory(($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)));
            $instance->injectStreamFactory(($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectValidatorResolver(($container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? self::getValidatorResolverService($container)));
            $instance->injectViewResolver(($container->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $container)));
            $instance->injectReflectionService(($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)));
            $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
            $instance->injectMvcPropertyMappingConfigurationService(($container->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? self::getMvcPropertyMappingConfigurationServiceService($container)));
            $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
            $instance->injectPropertyMapper(($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? self::getPropertyMapperService($container)));
            $instance->injectInternalFlashMessageService(($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)));
            $instance->injectInternalExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Form\\Controller\\FormFrontendController']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Controller\FormManagerController' autowired service.
     *
     * @return \TYPO3\CMS\Form\Controller\FormManagerController
     */
    protected static function getFormManagerControllerService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\Controller\\FormManagerController'] = function ($container) {
            $a = ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container));
            $b = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
            $c = ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container));

            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Controller\FormManagerController::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $a, $b, ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), $c, ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), $a, $b, ($container->privates['TYPO3\\CMS\\Form\\Service\\DatabaseService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Service\DatabaseService::class)));

            $instance->injectFormPersistenceManager(($container->services['TYPO3\\CMS\\Form\\Mvc\\Persistence\\FormPersistenceManagerInterface'] ?? self::getFormPersistenceManagerInterfaceService($container)));
            $instance->injectResponseFactory(($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)));
            $instance->injectStreamFactory(($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectValidatorResolver(($container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? self::getValidatorResolverService($container)));
            $instance->injectViewResolver(($container->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $container)));
            $instance->injectReflectionService(($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)));
            $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
            $instance->injectMvcPropertyMappingConfigurationService(($container->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? self::getMvcPropertyMappingConfigurationServiceService($container)));
            $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
            $instance->injectPropertyMapper(($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? self::getPropertyMapperService($container)));
            $instance->injectInternalFlashMessageService($c);
            $instance->injectInternalExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));
            $instance->initializeObject();

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Form\\Controller\\FormManagerController']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Domain\Configuration\ConfigurationService' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\Domain\Configuration\ConfigurationService
     */
    protected static function getConfigurationService2Service($container)
    {
        return $container->services['TYPO3\\CMS\\Form\\Domain\\Configuration\\ConfigurationService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Domain\Configuration\ConfigurationService::class, ($container->services['TYPO3\\CMS\\Form\\Mvc\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManager2Service($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Domain\Configuration\FormDefinitionConversionService' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\Domain\Configuration\FormDefinitionConversionService
     */
    protected static function getFormDefinitionConversionServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinitionConversionService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Domain\Configuration\FormDefinitionConversionService::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Domain\Configuration\FormDefinitionValidationService' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\Domain\Configuration\FormDefinitionValidationService
     */
    protected static function getFormDefinitionValidationServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinitionValidationService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Domain\Configuration\FormDefinitionValidationService::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Domain\Factory\ArrayFormFactory' autowired service.
     *
     * @return \TYPO3\CMS\Form\Domain\Factory\ArrayFormFactory
     */
    protected static function getArrayFormFactoryService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\Domain\\Factory\\ArrayFormFactory'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Domain\Factory\ArrayFormFactory::class);
        };

        return $container->factories['TYPO3\\CMS\\Form\\Domain\\Factory\\ArrayFormFactory']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Domain\Finishers\ClosureFinisher' autowired service.
     *
     * @return \TYPO3\CMS\Form\Domain\Finishers\ClosureFinisher
     */
    protected static function getClosureFinisherService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\Domain\\Finishers\\ClosureFinisher'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Domain\Finishers\ClosureFinisher::class);
        };

        return $container->factories['TYPO3\\CMS\\Form\\Domain\\Finishers\\ClosureFinisher']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Domain\Finishers\ConfirmationFinisher' autowired service.
     *
     * @return \TYPO3\CMS\Form\Domain\Finishers\ConfirmationFinisher
     */
    protected static function getConfirmationFinisherService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\Domain\\Finishers\\ConfirmationFinisher'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Domain\Finishers\ConfirmationFinisher::class);

            $a = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer::class, NULL, $container);
            $a->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer'));

            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectContentObjectRenderer($a);

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Form\\Domain\\Finishers\\ConfirmationFinisher']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Domain\Finishers\DeleteUploadsFinisher' autowired service.
     *
     * @return \TYPO3\CMS\Form\Domain\Finishers\DeleteUploadsFinisher
     */
    protected static function getDeleteUploadsFinisherService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\Domain\\Finishers\\DeleteUploadsFinisher'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Domain\Finishers\DeleteUploadsFinisher::class);
        };

        return $container->factories['TYPO3\\CMS\\Form\\Domain\\Finishers\\DeleteUploadsFinisher']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Domain\Finishers\EmailFinisher' autowired service.
     *
     * @return \TYPO3\CMS\Form\Domain\Finishers\EmailFinisher
     */
    protected static function getEmailFinisherService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\Domain\\Finishers\\EmailFinisher'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Domain\Finishers\EmailFinisher::class);
        };

        return $container->factories['TYPO3\\CMS\\Form\\Domain\\Finishers\\EmailFinisher']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Domain\Finishers\FlashMessageFinisher' autowired service.
     *
     * @return \TYPO3\CMS\Form\Domain\Finishers\FlashMessageFinisher
     */
    protected static function getFlashMessageFinisherService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\Domain\\Finishers\\FlashMessageFinisher'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Domain\Finishers\FlashMessageFinisher::class);

            $instance->injectFlashMessageService(($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)));
            $instance->injectExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Form\\Domain\\Finishers\\FlashMessageFinisher']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Domain\Finishers\RedirectFinisher' autowired service.
     *
     * @return \TYPO3\CMS\Form\Domain\Finishers\RedirectFinisher
     */
    protected static function getRedirectFinisherService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\Domain\\Finishers\\RedirectFinisher'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Domain\Finishers\RedirectFinisher::class);
        };

        return $container->factories['TYPO3\\CMS\\Form\\Domain\\Finishers\\RedirectFinisher']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Domain\Finishers\SaveToDatabaseFinisher' autowired service.
     *
     * @return \TYPO3\CMS\Form\Domain\Finishers\SaveToDatabaseFinisher
     */
    protected static function getSaveToDatabaseFinisherService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\Domain\\Finishers\\SaveToDatabaseFinisher'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Domain\Finishers\SaveToDatabaseFinisher::class);
        };

        return $container->factories['TYPO3\\CMS\\Form\\Domain\\Finishers\\SaveToDatabaseFinisher']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Domain\Renderer\FluidFormRenderer' autowired service.
     *
     * @return \TYPO3\CMS\Form\Domain\Renderer\FluidFormRenderer
     */
    protected static function getFluidFormRendererService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\Domain\\Renderer\\FluidFormRenderer'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Domain\Renderer\FluidFormRenderer::class);
        };

        return $container->factories['TYPO3\\CMS\\Form\\Domain\\Renderer\\FluidFormRenderer']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Domain\Runtime\FormRuntime' autowired service.
     *
     * @return \TYPO3\CMS\Form\Domain\Runtime\FormRuntime
     */
    protected static function getFormRuntimeService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\Domain\\Runtime\\FormRuntime'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Domain\Runtime\FormRuntime::class, $container, ($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)), ($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)), ($container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? self::getValidatorResolverService($container)));
        };

        return $container->factories['TYPO3\\CMS\\Form\\Domain\\Runtime\\FormRuntime']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\EventListener\DataStructureIdentifierListener' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\EventListener\DataStructureIdentifierListener
     */
    protected static function getDataStructureIdentifierListenerService($container)
    {
        return $container->services['TYPO3\\CMS\\Form\\EventListener\\DataStructureIdentifierListener'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\EventListener\DataStructureIdentifierListener::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\EventListener\ProcessFileListActionsEventListener' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\EventListener\ProcessFileListActionsEventListener
     */
    protected static function getProcessFileListActionsEventListenerService($container)
    {
        return $container->services['TYPO3\\CMS\\Form\\EventListener\\ProcessFileListActionsEventListener'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\EventListener\ProcessFileListActionsEventListener::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Mvc\Configuration\ConfigurationManager' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\Mvc\Configuration\ConfigurationManager
     */
    protected static function getConfigurationManager2Service($container)
    {
        $container->services['TYPO3\\CMS\\Form\\Mvc\\Configuration\\ConfigurationManager'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Mvc\Configuration\ConfigurationManager::class, $container);

        $instance->injectYamlSource(($container->privates['TYPO3\\CMS\\Form\\Mvc\\Configuration\\YamlSource'] ?? self::getYamlSourceService($container)));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Mvc\Configuration\TypoScriptService' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\Mvc\Configuration\TypoScriptService
     */
    protected static function getTypoScriptService2Service($container)
    {
        return $container->services['TYPO3\\CMS\\Form\\Mvc\\Configuration\\TypoScriptService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Mvc\Configuration\TypoScriptService::class, ($container->services['TYPO3\\CMS\\Core\\TypoScript\\TypoScriptService'] ?? self::getTypoScriptServiceService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Mvc\Persistence\FormPersistenceManagerInterface' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\Mvc\Persistence\FormPersistenceManager
     */
    protected static function getFormPersistenceManagerInterfaceService($container)
    {
        return $container->services['TYPO3\\CMS\\Form\\Mvc\\Persistence\\FormPersistenceManagerInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Mvc\Persistence\FormPersistenceManager::class, ($container->privates['TYPO3\\CMS\\Form\\Mvc\\Configuration\\YamlSource'] ?? self::getYamlSourceService($container)), ($container->services['TYPO3\\CMS\\Core\\Resource\\StorageRepository'] ?? self::getStorageRepositoryService($container)), ($container->services['TYPO3\\CMS\\Form\\Slot\\FilePersistenceSlot'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Slot\FilePersistenceSlot::class)), ($container->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? self::getResourceFactoryService($container)), ($container->services['TYPO3\\CMS\\Form\\Mvc\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManager2Service($container)), ($container->services['TYPO3\\CMS\\Core\\Cache\\CacheManager'] ?? self::getCacheManagerService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Mvc\ProcessingRule' autowired service.
     *
     * @return \TYPO3\CMS\Form\Mvc\ProcessingRule
     */
    protected static function getProcessingRuleService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\Mvc\\ProcessingRule'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Mvc\ProcessingRule::class, ($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? self::getPropertyMapperService($container)), ($container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? self::getValidatorResolverService($container)));
        };

        return $container->factories['TYPO3\\CMS\\Form\\Mvc\\ProcessingRule']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Mvc\Property\PropertyMappingConfiguration' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\Mvc\Property\PropertyMappingConfiguration
     */
    protected static function getPropertyMappingConfigurationService($container)
    {
        return $container->services['TYPO3\\CMS\\Form\\Mvc\\Property\\PropertyMappingConfiguration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Mvc\Property\PropertyMappingConfiguration::class, ($container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? self::getValidatorResolverService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Mvc\Property\TypeConverter\FormDefinitionArrayConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\Mvc\Property\TypeConverter\FormDefinitionArrayConverter
     */
    protected static function getFormDefinitionArrayConverterService($container)
    {
        return $container->services['TYPO3\\CMS\\Form\\Mvc\\Property\\TypeConverter\\FormDefinitionArrayConverter'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Mvc\Property\TypeConverter\FormDefinitionArrayConverter::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Mvc\Property\TypeConverter\UploadedFileReferenceConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\Mvc\Property\TypeConverter\UploadedFileReferenceConverter
     */
    protected static function getUploadedFileReferenceConverterService($container)
    {
        $container->services['TYPO3\\CMS\\Form\\Mvc\\Property\\TypeConverter\\UploadedFileReferenceConverter'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Mvc\Property\TypeConverter\UploadedFileReferenceConverter::class);

        $instance->injectResourceFactory(($container->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? self::getResourceFactoryService($container)));
        $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
        $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Mvc\Validation\CountValidator' autowired service.
     *
     * @return \TYPO3\CMS\Form\Mvc\Validation\CountValidator
     */
    protected static function getCountValidatorService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\Mvc\\Validation\\CountValidator'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Mvc\Validation\CountValidator::class);
        };

        return $container->factories['TYPO3\\CMS\\Form\\Mvc\\Validation\\CountValidator']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Mvc\Validation\DateRangeValidator' autowired service.
     *
     * @return \TYPO3\CMS\Form\Mvc\Validation\DateRangeValidator
     */
    protected static function getDateRangeValidatorService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\Mvc\\Validation\\DateRangeValidator'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Mvc\Validation\DateRangeValidator::class);
        };

        return $container->factories['TYPO3\\CMS\\Form\\Mvc\\Validation\\DateRangeValidator']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Mvc\Validation\EmptyValidator' autowired service.
     *
     * @return \TYPO3\CMS\Form\Mvc\Validation\EmptyValidator
     */
    protected static function getEmptyValidatorService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\Mvc\\Validation\\EmptyValidator'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Mvc\Validation\EmptyValidator::class);
        };

        return $container->factories['TYPO3\\CMS\\Form\\Mvc\\Validation\\EmptyValidator']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Mvc\Validation\FileSizeValidator' autowired service.
     *
     * @return \TYPO3\CMS\Form\Mvc\Validation\FileSizeValidator
     */
    protected static function getFileSizeValidatorService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\Mvc\\Validation\\FileSizeValidator'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Mvc\Validation\FileSizeValidator::class);
        };

        return $container->factories['TYPO3\\CMS\\Form\\Mvc\\Validation\\FileSizeValidator']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Mvc\Validation\MimeTypeValidator' autowired service.
     *
     * @return \TYPO3\CMS\Form\Mvc\Validation\MimeTypeValidator
     */
    protected static function getMimeTypeValidatorService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\Mvc\\Validation\\MimeTypeValidator'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Mvc\Validation\MimeTypeValidator::class);
        };

        return $container->factories['TYPO3\\CMS\\Form\\Mvc\\Validation\\MimeTypeValidator']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Service\TranslationService' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\Service\TranslationService
     */
    protected static function getTranslationServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Form\\Service\\TranslationService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Service\TranslationService::class, ($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)), ($container->services['TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory'] ?? self::getLanguageServiceFactoryService($container)), ($container->privates['cache.runtime'] ?? self::getCache_RuntimeService($container)), ($container->services['TYPO3\\CMS\\Core\\Localization\\Locales'] ?? self::getLocalesService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Slot\FilePersistenceSlot' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\Slot\FilePersistenceSlot
     */
    protected static function getFilePersistenceSlotService($container)
    {
        return $container->services['TYPO3\\CMS\\Form\\Slot\\FilePersistenceSlot'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Slot\FilePersistenceSlot::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Slot\ResourcePublicationSlot' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\Slot\ResourcePublicationSlot
     */
    protected static function getResourcePublicationSlotService($container)
    {
        return $container->services['TYPO3\\CMS\\Form\\Slot\\ResourcePublicationSlot'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Slot\ResourcePublicationSlot::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\SoftReference\FormPersistenceIdentifierSoftReferenceParser' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\SoftReference\FormPersistenceIdentifierSoftReferenceParser
     */
    protected static function getFormPersistenceIdentifierSoftReferenceParserService($container)
    {
        return $container->services['TYPO3\\CMS\\Form\\SoftReference\\FormPersistenceIdentifierSoftReferenceParser'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\SoftReference\FormPersistenceIdentifierSoftReferenceParser::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\ViewHelpers\Be\MaximumFileSizeViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Form\ViewHelpers\Be\MaximumFileSizeViewHelper
     */
    protected static function getMaximumFileSizeViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\ViewHelpers\\Be\\MaximumFileSizeViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\ViewHelpers\Be\MaximumFileSizeViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Form\\ViewHelpers\\Be\\MaximumFileSizeViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\ViewHelpers\Be\RenderContentElementPreviewViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Form\ViewHelpers\Be\RenderContentElementPreviewViewHelper
     */
    protected static function getRenderContentElementPreviewViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\ViewHelpers\\Be\\RenderContentElementPreviewViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\ViewHelpers\Be\RenderContentElementPreviewViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Form\\ViewHelpers\\Be\\RenderContentElementPreviewViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\ViewHelpers\FormViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Form\ViewHelpers\FormViewHelper
     */
    protected static function getFormViewHelper2Service($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\ViewHelpers\\FormViewHelper'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\ViewHelpers\FormViewHelper::class);

            $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
            $instance->injectMvcPropertyMappingConfigurationService(($container->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? self::getMvcPropertyMappingConfigurationServiceService($container)));
            $instance->injectExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Form\\ViewHelpers\\FormViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\ViewHelpers\Form\DatePickerViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Form\ViewHelpers\Form\DatePickerViewHelper
     */
    protected static function getDatePickerViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\ViewHelpers\\Form\\DatePickerViewHelper'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\ViewHelpers\Form\DatePickerViewHelper::class);

            $instance->injectPropertyMapper(($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? self::getPropertyMapperService($container)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Form\\ViewHelpers\\Form\\DatePickerViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\ViewHelpers\Form\TimePickerViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Form\ViewHelpers\Form\TimePickerViewHelper
     */
    protected static function getTimePickerViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\ViewHelpers\\Form\\TimePickerViewHelper'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\ViewHelpers\Form\TimePickerViewHelper::class);

            $instance->injectPropertyMapper(($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? self::getPropertyMapperService($container)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Form\\ViewHelpers\\Form\\TimePickerViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\ViewHelpers\Form\UploadedResourceViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Form\ViewHelpers\Form\UploadedResourceViewHelper
     */
    protected static function getUploadedResourceViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\ViewHelpers\\Form\\UploadedResourceViewHelper'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\ViewHelpers\Form\UploadedResourceViewHelper::class);

            $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
            $instance->injectPropertyMapper(($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? self::getPropertyMapperService($container)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectPersistenceManager(($container->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? self::getPersistenceManagerService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Form\\ViewHelpers\\Form\\UploadedResourceViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\ViewHelpers\GridColumnClassAutoConfigurationViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Form\ViewHelpers\GridColumnClassAutoConfigurationViewHelper
     */
    protected static function getGridColumnClassAutoConfigurationViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\ViewHelpers\\GridColumnClassAutoConfigurationViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\ViewHelpers\GridColumnClassAutoConfigurationViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Form\\ViewHelpers\\GridColumnClassAutoConfigurationViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\ViewHelpers\RenderAllFormValuesViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Form\ViewHelpers\RenderAllFormValuesViewHelper
     */
    protected static function getRenderAllFormValuesViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\ViewHelpers\\RenderAllFormValuesViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\ViewHelpers\RenderAllFormValuesViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Form\\ViewHelpers\\RenderAllFormValuesViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\ViewHelpers\RenderFormValueViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Form\ViewHelpers\RenderFormValueViewHelper
     */
    protected static function getRenderFormValueViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\ViewHelpers\\RenderFormValueViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\ViewHelpers\RenderFormValueViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Form\\ViewHelpers\\RenderFormValueViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\ViewHelpers\RenderRenderableViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Form\ViewHelpers\RenderRenderableViewHelper
     */
    protected static function getRenderRenderableViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\ViewHelpers\\RenderRenderableViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\ViewHelpers\RenderRenderableViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Form\\ViewHelpers\\RenderRenderableViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\ViewHelpers\RenderViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Form\ViewHelpers\RenderViewHelper
     */
    protected static function getRenderViewHelper3Service($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\ViewHelpers\\RenderViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\ViewHelpers\RenderViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Form\\ViewHelpers\\RenderViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\ViewHelpers\TranslateElementErrorViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Form\ViewHelpers\TranslateElementErrorViewHelper
     */
    protected static function getTranslateElementErrorViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\ViewHelpers\\TranslateElementErrorViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\ViewHelpers\TranslateElementErrorViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Form\\ViewHelpers\\TranslateElementErrorViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\ViewHelpers\TranslateElementPropertyViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Form\ViewHelpers\TranslateElementPropertyViewHelper
     */
    protected static function getTranslateElementPropertyViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Form\\ViewHelpers\\TranslateElementPropertyViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\ViewHelpers\TranslateElementPropertyViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Form\\ViewHelpers\\TranslateElementPropertyViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\FrontendLogin\Controller\LoginController' autowired service.
     *
     * @return \TYPO3\CMS\FrontendLogin\Controller\LoginController
     */
    protected static function getLoginController2Service($container)
    {
        $container->factories['TYPO3\\CMS\\FrontendLogin\\Controller\\LoginController'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FrontendLogin\Controller\LoginController::class, ($container->privates['TYPO3\\CMS\\FrontendLogin\\Redirect\\RedirectHandler'] ?? self::getRedirectHandler2Service($container)), ($container->privates['TYPO3\\CMS\\FrontendLogin\\Service\\UserService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FrontendLogin\Service\UserService::class)), ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)), ($container->privates['TYPO3\\CMS\\Core\\Domain\\Repository\\PageRepository'] ?? self::getPageRepositoryService($container)));

            $instance->injectResponseFactory(($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)));
            $instance->injectStreamFactory(($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectValidatorResolver(($container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? self::getValidatorResolverService($container)));
            $instance->injectViewResolver(($container->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $container)));
            $instance->injectReflectionService(($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)));
            $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
            $instance->injectMvcPropertyMappingConfigurationService(($container->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? self::getMvcPropertyMappingConfigurationServiceService($container)));
            $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
            $instance->injectPropertyMapper(($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? self::getPropertyMapperService($container)));
            $instance->injectInternalFlashMessageService(($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)));
            $instance->injectInternalExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\FrontendLogin\\Controller\\LoginController']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\FrontendLogin\Controller\PasswordRecoveryController' autowired service.
     *
     * @return \TYPO3\CMS\FrontendLogin\Controller\PasswordRecoveryController
     */
    protected static function getPasswordRecoveryControllerService($container)
    {
        $container->factories['TYPO3\\CMS\\FrontendLogin\\Controller\\PasswordRecoveryController'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FrontendLogin\Controller\PasswordRecoveryController::class, ($container->privates['TYPO3\\CMS\\FrontendLogin\\Service\\RecoveryService'] ?? self::getRecoveryServiceService($container)), ($container->privates['TYPO3\\CMS\\FrontendLogin\\Domain\\Repository\\FrontendUserRepository'] ?? self::getFrontendUserRepositoryService($container)), ($container->privates['TYPO3\\CMS\\FrontendLogin\\Configuration\\RecoveryConfiguration'] ?? self::getRecoveryConfigurationService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\Features'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\Features::class)), ($container->privates['TYPO3\\CMS\\Core\\Domain\\Repository\\PageRepository'] ?? self::getPageRepositoryService($container)));

            $instance->injectResponseFactory(($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)));
            $instance->injectStreamFactory(($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectValidatorResolver(($container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? self::getValidatorResolverService($container)));
            $instance->injectViewResolver(($container->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $container)));
            $instance->injectReflectionService(($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)));
            $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
            $instance->injectMvcPropertyMappingConfigurationService(($container->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? self::getMvcPropertyMappingConfigurationServiceService($container)));
            $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
            $instance->injectPropertyMapper(($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? self::getPropertyMapperService($container)));
            $instance->injectInternalFlashMessageService(($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)));
            $instance->injectInternalExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\FrontendLogin\\Controller\\PasswordRecoveryController']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\FrontendLogin\Event\ProcessRequestTokenListener' shared autowired service.
     *
     * @return \TYPO3\CMS\FrontendLogin\Event\ProcessRequestTokenListener
     */
    protected static function getProcessRequestTokenListenerService($container)
    {
        return $container->services['TYPO3\\CMS\\FrontendLogin\\Event\\ProcessRequestTokenListener'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FrontendLogin\Event\ProcessRequestTokenListener::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\FrontendLogin\Service\ValidatorResolverService' shared autowired service.
     *
     * @return \TYPO3\CMS\FrontendLogin\Service\ValidatorResolverService
     */
    protected static function getValidatorResolverServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\FrontendLogin\\Service\\ValidatorResolverService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FrontendLogin\Service\ValidatorResolverService::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Aspect\FileMetadataOverlayAspect' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Aspect\FileMetadataOverlayAspect
     */
    protected static function getFileMetadataOverlayAspectService($container)
    {
        return $container->services['TYPO3\\CMS\\Frontend\\Aspect\\FileMetadataOverlayAspect'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Aspect\FileMetadataOverlayAspect::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Cache\CacheLifetimeCalculator' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Cache\CacheLifetimeCalculator
     */
    protected static function getCacheLifetimeCalculatorService($container)
    {
        return $container->services['TYPO3\\CMS\\Frontend\\Cache\\CacheLifetimeCalculator'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Cache\CacheLifetimeCalculator::class, ($container->privates['cache.runtime'] ?? self::getCache_RuntimeService($container)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\ContentObject\ContentDataProcessor' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\ContentObject\ContentDataProcessor
     */
    protected static function getContentDataProcessorService($container)
    {
        return $container->services['TYPO3\\CMS\\Frontend\\ContentObject\\ContentDataProcessor'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\ContentDataProcessor::class, $container, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\DataProcessing\DataProcessorRegistry::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\Symfony\Component\DependencyInjection\Argument\ServiceLocator::class, $container->getService ??= $container->getService(...), [
            'comma-separated-value' => ['privates', 'TYPO3\\CMS\\Frontend\\DataProcessing\\CommaSeparatedValueProcessor', 'getCommaSeparatedValueProcessorService', false],
            'database-query' => ['services', 'TYPO3\\CMS\\Frontend\\DataProcessing\\DatabaseQueryProcessor', 'getDatabaseQueryProcessorService', false],
            'files' => ['privates', 'TYPO3\\CMS\\Frontend\\DataProcessing\\FilesProcessor', 'getFilesProcessorService', false],
            'flex-form' => ['privates', 'TYPO3\\CMS\\Frontend\\DataProcessing\\FlexFormProcessor', 'getFlexFormProcessorService', false],
            'gallery' => [false, 'TYPO3\\CMS\\Frontend\\DataProcessing\\GalleryProcessor', 'getGalleryProcessorService', false],
            'language-menu' => [false, 'TYPO3\\CMS\\Frontend\\DataProcessing\\LanguageMenuProcessor', 'getLanguageMenuProcessorService', false],
            'menu' => [false, 'TYPO3\\CMS\\Frontend\\DataProcessing\\MenuProcessor', 'getMenuProcessorService', false],
            'site-language' => ['privates', 'TYPO3\\CMS\\Frontend\\DataProcessing\\SiteLanguageProcessor', 'getSiteLanguageProcessorService', false],
            'site' => ['privates', 'TYPO3\\CMS\\Frontend\\DataProcessing\\SiteProcessor', 'getSiteProcessorService', false],
            'split' => ['privates', 'TYPO3\\CMS\\Frontend\\DataProcessing\\SplitProcessor', 'getSplitProcessorService', false],
        ], [
            'comma-separated-value' => 'TYPO3\\CMS\\Frontend\\DataProcessing\\CommaSeparatedValueProcessor',
            'database-query' => 'TYPO3\\CMS\\Frontend\\DataProcessing\\DatabaseQueryProcessor',
            'files' => 'TYPO3\\CMS\\Frontend\\DataProcessing\\FilesProcessor',
            'flex-form' => 'TYPO3\\CMS\\Frontend\\DataProcessing\\FlexFormProcessor',
            'gallery' => 'TYPO3\\CMS\\Frontend\\DataProcessing\\GalleryProcessor',
            'language-menu' => 'TYPO3\\CMS\\Frontend\\DataProcessing\\LanguageMenuProcessor',
            'menu' => 'TYPO3\\CMS\\Frontend\\DataProcessing\\MenuProcessor',
            'site-language' => 'TYPO3\\CMS\\Frontend\\DataProcessing\\SiteLanguageProcessor',
            'site' => 'TYPO3\\CMS\\Frontend\\DataProcessing\\SiteProcessor',
            'split' => 'TYPO3\\CMS\\Frontend\\DataProcessing\\SplitProcessor',
        ])));
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\ContentObject\ContentObjectFactory' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\ContentObject\ContentObjectFactory
     */
    protected static function getContentObjectFactoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectFactory'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\ContentObjectFactory::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\Symfony\Component\DependencyInjection\Argument\ServiceLocator::class, $container->getService ??= $container->getService(...), [
            'EXTBASEPLUGIN' => [false, 'TYPO3\\CMS\\Extbase\\ContentObject\\ExtbasePluginContentObject', 'getExtbasePluginContentObjectService', false],
            'CASE' => [false, 'TYPO3\\CMS\\Frontend\\ContentObject\\CaseContentObject', 'getCaseContentObjectService', false],
            'CONTENT' => [false, 'TYPO3\\CMS\\Frontend\\ContentObject\\ContentContentObject', 'getContentContentObjectService', false],
            'COA' => [false, 'TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectArrayContentObject', 'getContentObjectArrayContentObjectService', false],
            'COA_INT' => [false, 'TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectArrayInternalContentObject', 'getContentObjectArrayInternalContentObjectService', false],
            'FILES' => [false, 'TYPO3\\CMS\\Frontend\\ContentObject\\FilesContentObject', 'getFilesContentObjectService', false],
            'FLUIDTEMPLATE' => [false, 'TYPO3\\CMS\\Frontend\\ContentObject\\FluidTemplateContentObject', 'getFluidTemplateContentObjectService', false],
            'HMENU' => [false, 'TYPO3\\CMS\\Frontend\\ContentObject\\HierarchicalMenuContentObject', 'getHierarchicalMenuContentObjectService', false],
            'IMAGE' => [false, 'TYPO3\\CMS\\Frontend\\ContentObject\\ImageContentObject', 'getImageContentObjectService', false],
            'IMG_RESOURCE' => [false, 'TYPO3\\CMS\\Frontend\\ContentObject\\ImageResourceContentObject', 'getImageResourceContentObjectService', false],
            'LOAD_REGISTER' => [false, 'TYPO3\\CMS\\Frontend\\ContentObject\\LoadRegisterContentObject', 'getLoadRegisterContentObjectService', false],
            'RECORDS' => [false, 'TYPO3\\CMS\\Frontend\\ContentObject\\RecordsContentObject', 'getRecordsContentObjectService', false],
            'RESTORE_REGISTER' => [false, 'TYPO3\\CMS\\Frontend\\ContentObject\\RestoreRegisterContentObject', 'getRestoreRegisterContentObjectService', false],
            'SVG' => [false, 'TYPO3\\CMS\\Frontend\\ContentObject\\ScalableVectorGraphicsContentObject', 'getScalableVectorGraphicsContentObjectService', false],
            'TEXT' => [false, 'TYPO3\\CMS\\Frontend\\ContentObject\\TextContentObject', 'getTextContentObjectService', false],
            'USER' => [false, 'TYPO3\\CMS\\Frontend\\ContentObject\\UserContentObject', 'getUserContentObjectService', false],
            'USER_INT' => [false, 'TYPO3\\CMS\\Frontend\\ContentObject\\UserInternalContentObject', 'getUserInternalContentObjectService', false],
        ], [
            'EXTBASEPLUGIN' => 'TYPO3\\CMS\\Extbase\\ContentObject\\ExtbasePluginContentObject',
            'CASE' => 'TYPO3\\CMS\\Frontend\\ContentObject\\CaseContentObject',
            'CONTENT' => 'TYPO3\\CMS\\Frontend\\ContentObject\\ContentContentObject',
            'COA' => 'TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectArrayContentObject',
            'COA_INT' => 'TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectArrayInternalContentObject',
            'FILES' => 'TYPO3\\CMS\\Frontend\\ContentObject\\FilesContentObject',
            'FLUIDTEMPLATE' => 'TYPO3\\CMS\\Frontend\\ContentObject\\FluidTemplateContentObject',
            'HMENU' => 'TYPO3\\CMS\\Frontend\\ContentObject\\HierarchicalMenuContentObject',
            'IMAGE' => 'TYPO3\\CMS\\Frontend\\ContentObject\\ImageContentObject',
            'IMG_RESOURCE' => 'TYPO3\\CMS\\Frontend\\ContentObject\\ImageResourceContentObject',
            'LOAD_REGISTER' => 'TYPO3\\CMS\\Frontend\\ContentObject\\LoadRegisterContentObject',
            'RECORDS' => 'TYPO3\\CMS\\Frontend\\ContentObject\\RecordsContentObject',
            'RESTORE_REGISTER' => 'TYPO3\\CMS\\Frontend\\ContentObject\\RestoreRegisterContentObject',
            'SVG' => 'TYPO3\\CMS\\Frontend\\ContentObject\\ScalableVectorGraphicsContentObject',
            'TEXT' => 'TYPO3\\CMS\\Frontend\\ContentObject\\TextContentObject',
            'USER' => 'TYPO3\\CMS\\Frontend\\ContentObject\\UserContentObject',
            'USER_INT' => 'TYPO3\\CMS\\Frontend\\ContentObject\\UserInternalContentObject',
        ]));
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer' autowired service.
     *
     * @return \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer
     */
    protected static function getContentObjectRendererService($container)
    {
        $container->factories['TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer::class, NULL, $container);

            $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer'));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\ContentObject\Exception\ProductionExceptionHandler' autowired service.
     *
     * @return \TYPO3\CMS\Frontend\ContentObject\Exception\ProductionExceptionHandler
     */
    protected static function getProductionExceptionHandler2Service($container)
    {
        $container->factories['TYPO3\\CMS\\Frontend\\ContentObject\\Exception\\ProductionExceptionHandler'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\Exception\ProductionExceptionHandler::class, ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)), ($container->privates['TYPO3\\CMS\\Core\\Crypto\\Random'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Crypto\Random::class)), ($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Frontend\\ContentObject\\Exception\\ProductionExceptionHandler'));
        };

        return $container->factories['TYPO3\\CMS\\Frontend\\ContentObject\\Exception\\ProductionExceptionHandler']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\ContentObject\Menu\MenuContentObjectFactory' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\ContentObject\Menu\MenuContentObjectFactory
     */
    protected static function getMenuContentObjectFactoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Frontend\\ContentObject\\Menu\\MenuContentObjectFactory'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\Menu\MenuContentObjectFactory::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Controller\ShowImageController' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Controller\ShowImageController
     */
    protected static function getShowImageControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Frontend\\Controller\\ShowImageController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Controller\ShowImageController::class, ($container->privates['TYPO3\\CMS\\Core\\Configuration\\Features'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\Features::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\DataProcessing\DatabaseQueryProcessor' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\DataProcessing\DatabaseQueryProcessor
     */
    protected static function getDatabaseQueryProcessorService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Frontend\\ContentObject\\ContentDataProcessor'] ?? self::getContentDataProcessorService($container));

        if (isset($container->services['TYPO3\\CMS\\Frontend\\DataProcessing\\DatabaseQueryProcessor'])) {
            return $container->services['TYPO3\\CMS\\Frontend\\DataProcessing\\DatabaseQueryProcessor'];
        }

        return $container->services['TYPO3\\CMS\\Frontend\\DataProcessing\\DatabaseQueryProcessor'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\DataProcessing\DatabaseQueryProcessor::class, $a);
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\DataProcessing\MenuProcessor' autowired service.
     *
     * @return \TYPO3\CMS\Frontend\DataProcessing\MenuProcessor
     */
    protected static function getMenuProcessorService($container)
    {
        $container->factories['TYPO3\\CMS\\Frontend\\DataProcessing\\MenuProcessor'] = function ($container) {
            $a = ($container->services['TYPO3\\CMS\\Frontend\\ContentObject\\ContentDataProcessor'] ?? self::getContentDataProcessorService($container));

            if (isset($container->services['TYPO3\\CMS\\Frontend\\DataProcessing\\MenuProcessor'])) {
                return $container->services['TYPO3\\CMS\\Frontend\\DataProcessing\\MenuProcessor'];
            }
            $b = ($container->services['TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectFactory'] ?? self::getContentObjectFactoryService($container));

            if (isset($container->services['TYPO3\\CMS\\Frontend\\DataProcessing\\MenuProcessor'])) {
                return $container->services['TYPO3\\CMS\\Frontend\\DataProcessing\\MenuProcessor'];
            }

            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\DataProcessing\MenuProcessor::class, $a, $b);
        };

        return $container->factories['TYPO3\\CMS\\Frontend\\DataProcessing\\MenuProcessor']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Html\HtmlWorker' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Html\HtmlWorker
     */
    protected static function getHtmlWorkerService($container)
    {
        return $container->services['TYPO3\\CMS\\Frontend\\Html\\HtmlWorker'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Html\HtmlWorker::class, ($container->services['TYPO3\\CMS\\Frontend\\Typolink\\LinkFactory'] ?? self::getLinkFactoryService($container)), ($container->services['Masterminds\\HTML5'] ?? self::getHTML5Service($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Http\Application' shared service.
     *
     * @return \TYPO3\CMS\Frontend\Http\Application
     */
    protected static function getApplication2Service($container)
    {
        return $container->services['TYPO3\\CMS\\Frontend\\Http\\Application'] = \TYPO3\CMS\Frontend\ServiceProvider::getApplication($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Http\RequestHandler' shared service.
     *
     * @return \TYPO3\CMS\Frontend\Http\RequestHandler
     */
    protected static function getRequestHandler2Service($container)
    {
        return $container->services['TYPO3\\CMS\\Frontend\\Http\\RequestHandler'] = \TYPO3\CMS\Frontend\ServiceProvider::getRequestHandler($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\BackendUserAuthenticator' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\BackendUserAuthenticator
     */
    protected static function getBackendUserAuthenticator2Service($container)
    {
        return $container->services['TYPO3\\CMS\\Frontend\\Middleware\\BackendUserAuthenticator'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\BackendUserAuthenticator::class, ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)), ($container->services['TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory'] ?? self::getLanguageServiceFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\ContentLengthResponseHeader' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\ContentLengthResponseHeader
     */
    protected static function getContentLengthResponseHeaderService($container)
    {
        return $container->services['TYPO3\\CMS\\Frontend\\Middleware\\ContentLengthResponseHeader'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\ContentLengthResponseHeader::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\ContentSecurityPolicyHeaders' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\ContentSecurityPolicyHeaders
     */
    protected static function getContentSecurityPolicyHeaders2Service($container)
    {
        return $container->services['TYPO3\\CMS\\Frontend\\Middleware\\ContentSecurityPolicyHeaders'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\ContentSecurityPolicyHeaders::class, ($container->services['_early.TYPO3\\CMS\\Core\\Core\\RequestId'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Core\\RequestId', 1)), ($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Frontend\\Middleware\\ContentSecurityPolicyHeaders'), ($container->services['_early.cache.assets'] ?? $container->get('_early.cache.assets', 1)), ($container->services['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\PolicyProvider'] ?? self::getPolicyProviderService($container)), ($container->privates['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Configuration\\DispositionMapFactory'] ?? self::getDispositionMapFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\ContentSecurityPolicyReporter' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\ContentSecurityPolicyReporter
     */
    protected static function getContentSecurityPolicyReporter2Service($container)
    {
        return $container->services['TYPO3\\CMS\\Frontend\\Middleware\\ContentSecurityPolicyReporter'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\ContentSecurityPolicyReporter::class, ($container->services['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\PolicyProvider'] ?? self::getPolicyProviderService($container)), ($container->privates['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Reporting\\ReportRepository'] ?? self::getReportRepositoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\EidHandler' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\EidHandler
     */
    protected static function getEidHandlerService($container)
    {
        return $container->services['TYPO3\\CMS\\Frontend\\Middleware\\EidHandler'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\EidHandler::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\Dispatcher::class, $container));
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\FrontendUserAuthenticator' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\FrontendUserAuthenticator
     */
    protected static function getFrontendUserAuthenticatorService($container)
    {
        $container->services['TYPO3\\CMS\\Frontend\\Middleware\\FrontendUserAuthenticator'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\FrontendUserAuthenticator::class, ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\RateLimiter\RateLimiterFactory::class));

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Frontend\\Middleware\\FrontendUserAuthenticator'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\MaintenanceMode' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\MaintenanceMode
     */
    protected static function getMaintenanceModeService($container)
    {
        return $container->services['TYPO3\\CMS\\Frontend\\Middleware\\MaintenanceMode'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\MaintenanceMode::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\OutputCompression' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\OutputCompression
     */
    protected static function getOutputCompression2Service($container)
    {
        return $container->services['TYPO3\\CMS\\Frontend\\Middleware\\OutputCompression'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\OutputCompression::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\PageArgumentValidator' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\PageArgumentValidator
     */
    protected static function getPageArgumentValidatorService($container)
    {
        $container->services['TYPO3\\CMS\\Frontend\\Middleware\\PageArgumentValidator'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\PageArgumentValidator::class, ($container->services['TYPO3\\CMS\\Frontend\\Page\\CacheHashCalculator'] ?? self::getCacheHashCalculatorService($container)), ($container->services['TYPO3\\CMS\\Core\\TimeTracker\\TimeTracker'] ?? self::getTimeTrackerService($container)));

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Frontend\\Middleware\\PageArgumentValidator'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\PageResolver' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\PageResolver
     */
    protected static function getPageResolverService($container)
    {
        return $container->services['TYPO3\\CMS\\Frontend\\Middleware\\PageResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\PageResolver::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\PrepareTypoScriptFrontendRendering' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\PrepareTypoScriptFrontendRendering
     */
    protected static function getPrepareTypoScriptFrontendRenderingService($container)
    {
        return $container->services['TYPO3\\CMS\\Frontend\\Middleware\\PrepareTypoScriptFrontendRendering'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\PrepareTypoScriptFrontendRendering::class, ($container->services['TYPO3\\CMS\\Core\\TimeTracker\\TimeTracker'] ?? self::getTimeTrackerService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\PreviewSimulator' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\PreviewSimulator
     */
    protected static function getPreviewSimulatorService($container)
    {
        return $container->services['TYPO3\\CMS\\Frontend\\Middleware\\PreviewSimulator'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\PreviewSimulator::class, ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\ShortcutAndMountPointRedirect' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\ShortcutAndMountPointRedirect
     */
    protected static function getShortcutAndMountPointRedirectService($container)
    {
        $container->services['TYPO3\\CMS\\Frontend\\Middleware\\ShortcutAndMountPointRedirect'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\ShortcutAndMountPointRedirect::class);

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Frontend\\Middleware\\ShortcutAndMountPointRedirect'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\SiteBaseRedirectResolver' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\SiteBaseRedirectResolver
     */
    protected static function getSiteBaseRedirectResolverService($container)
    {
        return $container->services['TYPO3\\CMS\\Frontend\\Middleware\\SiteBaseRedirectResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\SiteBaseRedirectResolver::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\SiteResolver' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\SiteResolver
     */
    protected static function getSiteResolver2Service($container)
    {
        return $container->services['TYPO3\\CMS\\Frontend\\Middleware\\SiteResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\SiteResolver::class, ($container->services['TYPO3\\CMS\\Core\\Routing\\SiteMatcher'] ?? self::getSiteMatcherService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\StaticRouteResolver' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\StaticRouteResolver
     */
    protected static function getStaticRouteResolverService($container)
    {
        return $container->services['TYPO3\\CMS\\Frontend\\Middleware\\StaticRouteResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\StaticRouteResolver::class, ($container->services['TYPO3\\CMS\\Core\\Http\\RequestFactory'] ?? self::getRequestFactoryService($container)), ($container->services['TYPO3\\CMS\\Core\\LinkHandling\\LinkService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\LinkHandling\LinkService::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\TimeTrackerInitialization' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\TimeTrackerInitialization
     */
    protected static function getTimeTrackerInitializationService($container)
    {
        return $container->services['TYPO3\\CMS\\Frontend\\Middleware\\TimeTrackerInitialization'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\TimeTrackerInitialization::class, ($container->services['TYPO3\\CMS\\Core\\TimeTracker\\TimeTracker'] ?? self::getTimeTrackerService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\TypoScriptFrontendInitialization' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\TypoScriptFrontendInitialization
     */
    protected static function getTypoScriptFrontendInitializationService($container)
    {
        return $container->services['TYPO3\\CMS\\Frontend\\Middleware\\TypoScriptFrontendInitialization'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\TypoScriptFrontendInitialization::class, ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Page\CacheHashCalculator' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Page\CacheHashCalculator
     */
    protected static function getCacheHashCalculatorService($container)
    {
        return $container->services['TYPO3\\CMS\\Frontend\\Page\\CacheHashCalculator'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Page\CacheHashCalculator::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Page\CacheHashConfiguration::class));
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Resource\PublicUrlPrefixer' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Resource\PublicUrlPrefixer
     */
    protected static function getPublicUrlPrefixer2Service($container)
    {
        return $container->services['TYPO3\\CMS\\Frontend\\Resource\\PublicUrlPrefixer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Resource\PublicUrlPrefixer::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Typolink\LinkFactory' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Typolink\LinkFactory
     */
    protected static function getLinkFactoryService($container)
    {
        $container->services['TYPO3\\CMS\\Frontend\\Typolink\\LinkFactory'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Typolink\LinkFactory::class, ($container->services['TYPO3\\CMS\\Core\\LinkHandling\\LinkService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\LinkHandling\LinkService::class)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->privates['TYPO3\\CMS\\Core\\LinkHandling\\TypoLinkCodecService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\LinkHandling\TypoLinkCodecService::class)), ($container->privates['cache.runtime'] ?? self::getCache_RuntimeService($container)), ($container->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? self::getSiteFinderService($container)));

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Frontend\\Typolink\\LinkFactory'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Utility\CompressionUtility' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Utility\CompressionUtility
     */
    protected static function getCompressionUtilityService($container)
    {
        return $container->services['TYPO3\\CMS\\Frontend\\Utility\\CompressionUtility'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Utility\CompressionUtility::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Impexp\Command\ExportCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Impexp\Command\ExportCommand
     */
    protected static function getExportCommandService($container)
    {
        $container->services['TYPO3\\CMS\\Impexp\\Command\\ExportCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Impexp\Command\ExportCommand::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Impexp\Export::class));

        $instance->setName('impexp:export');
        $instance->setDescription('Exports a T3D / XML file with content of a page tree');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Impexp\Command\ImportCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Impexp\Command\ImportCommand
     */
    protected static function getImportCommandService($container)
    {
        $container->services['TYPO3\\CMS\\Impexp\\Command\\ImportCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Impexp\Command\ImportCommand::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Impexp\Import::class));

        $instance->setName('impexp:import');
        $instance->setDescription('Imports a T3D / XML file with content into a page tree');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Impexp\Controller\ExportController' shared autowired service.
     *
     * @return \TYPO3\CMS\Impexp\Controller\ExportController
     */
    protected static function getExportControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));

        return $container->services['TYPO3\\CMS\\Impexp\\Controller\\ExportController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Impexp\Controller\ExportController::class, $a, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), $a, ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), ($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Impexp\Domain\Repository\PresetRepository::class, ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)), ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Impexp\Controller\ImportController' shared autowired service.
     *
     * @return \TYPO3\CMS\Impexp\Controller\ImportController
     */
    protected static function getImportControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));

        return $container->services['TYPO3\\CMS\\Impexp\\Controller\\ImportController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Impexp\Controller\ImportController::class, $a, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), $a, ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), ($container->privates['TYPO3\\CMS\\Core\\Utility\\File\\ExtendedFileUtility'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Utility\File\ExtendedFileUtility::class)), ($container->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? self::getResourceFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Impexp\Utility\ImportExportUtility' shared autowired service.
     *
     * @return \TYPO3\CMS\Impexp\Utility\ImportExportUtility
     */
    protected static function getImportExportUtilityService($container)
    {
        return $container->services['TYPO3\\CMS\\Impexp\\Utility\\ImportExportUtility'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Impexp\Utility\ImportExportUtility::class, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Impexp\ViewHelpers\InArrayViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Impexp\ViewHelpers\InArrayViewHelper
     */
    protected static function getInArrayViewHelper2Service($container)
    {
        $container->factories['TYPO3\\CMS\\Impexp\\ViewHelpers\\InArrayViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Impexp\ViewHelpers\InArrayViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Impexp\\ViewHelpers\\InArrayViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\IndexedSearch\Controller\AdministrationController' autowired service.
     *
     * @return \TYPO3\CMS\IndexedSearch\Controller\AdministrationController
     */
    protected static function getAdministrationController2Service($container)
    {
        $container->factories['TYPO3\\CMS\\IndexedSearch\\Controller\\AdministrationController'] = function ($container) {
            $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
            $b = ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container));
            $c = ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class));

            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\IndexedSearch\Controller\AdministrationController::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), $a, ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), $b, $c, ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), ($container->privates['TYPO3\\CMS\\IndexedSearch\\Domain\\Repository\\AdministrationRepository'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\IndexedSearch\Domain\Repository\AdministrationRepository::class)), ($container->privates['TYPO3\\CMS\\IndexedSearch\\Indexer'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\IndexedSearch\Indexer::class)), $a, $c, ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)));

            $instance->injectResponseFactory(($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)));
            $instance->injectStreamFactory(($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectValidatorResolver(($container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? self::getValidatorResolverService($container)));
            $instance->injectViewResolver(($container->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $container)));
            $instance->injectReflectionService(($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)));
            $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
            $instance->injectMvcPropertyMappingConfigurationService(($container->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? self::getMvcPropertyMappingConfigurationServiceService($container)));
            $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
            $instance->injectPropertyMapper(($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? self::getPropertyMapperService($container)));
            $instance->injectInternalFlashMessageService($b);
            $instance->injectInternalExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\IndexedSearch\\Controller\\AdministrationController']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\IndexedSearch\Controller\SearchController' autowired service.
     *
     * @return \TYPO3\CMS\IndexedSearch\Controller\SearchController
     */
    protected static function getSearchControllerService($container)
    {
        $container->factories['TYPO3\\CMS\\IndexedSearch\\Controller\\SearchController'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\IndexedSearch\Controller\SearchController::class);

            $instance->injectTypoScriptService(($container->services['TYPO3\\CMS\\Core\\TypoScript\\TypoScriptService'] ?? self::getTypoScriptServiceService($container)));
            $instance->injectResponseFactory(($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)));
            $instance->injectStreamFactory(($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
            $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
            $instance->injectValidatorResolver(($container->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? self::getValidatorResolverService($container)));
            $instance->injectViewResolver(($container->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $container)));
            $instance->injectReflectionService(($container->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? self::getReflectionServiceService($container)));
            $instance->injectHashService(($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));
            $instance->injectMvcPropertyMappingConfigurationService(($container->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? self::getMvcPropertyMappingConfigurationServiceService($container)));
            $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
            $instance->injectPropertyMapper(($container->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? self::getPropertyMapperService($container)));
            $instance->injectInternalFlashMessageService(($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)));
            $instance->injectInternalExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\IndexedSearch\\Controller\\SearchController']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\IndexedSearch\EventListener\FrontendGenerationPageIndexingTrigger' shared autowired service.
     *
     * @return \TYPO3\CMS\IndexedSearch\EventListener\FrontendGenerationPageIndexingTrigger
     */
    protected static function getFrontendGenerationPageIndexingTriggerService($container)
    {
        return $container->services['TYPO3\\CMS\\IndexedSearch\\EventListener\\FrontendGenerationPageIndexingTrigger'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\IndexedSearch\EventListener\FrontendGenerationPageIndexingTrigger::class, ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->services['TYPO3\\CMS\\Core\\TimeTracker\\TimeTracker'] ?? self::getTimeTrackerService($container)), ($container->services['TYPO3\\CMS\\Core\\PageTitle\\PageTitleProviderManager'] ?? self::getPageTitleProviderManagerService($container)), ($container->privates['TYPO3\\CMS\\IndexedSearch\\Indexer'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\IndexedSearch\Indexer::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\IndexedSearch\Service\DatabaseSchemaService' shared autowired service.
     *
     * @return \TYPO3\CMS\IndexedSearch\Service\DatabaseSchemaService
     */
    protected static function getDatabaseSchemaService2Service($container)
    {
        return $container->services['TYPO3\\CMS\\IndexedSearch\\Service\\DatabaseSchemaService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\IndexedSearch\Service\DatabaseSchemaService::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\IndexedSearch\ViewHelpers\Format\DateTimeViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\IndexedSearch\ViewHelpers\Format\DateTimeViewHelper
     */
    protected static function getDateTimeViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\Format\\DateTimeViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\IndexedSearch\ViewHelpers\Format\DateTimeViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\Format\\DateTimeViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\IndexedSearch\ViewHelpers\Format\FlagValueViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\IndexedSearch\ViewHelpers\Format\FlagValueViewHelper
     */
    protected static function getFlagValueViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\Format\\FlagValueViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\IndexedSearch\ViewHelpers\Format\FlagValueViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\Format\\FlagValueViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\IndexedSearch\ViewHelpers\Format\GroupListViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\IndexedSearch\ViewHelpers\Format\GroupListViewHelper
     */
    protected static function getGroupListViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\Format\\GroupListViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\IndexedSearch\ViewHelpers\Format\GroupListViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\Format\\GroupListViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\IndexedSearch\ViewHelpers\PageBrowsingResultsViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\IndexedSearch\ViewHelpers\PageBrowsingResultsViewHelper
     */
    protected static function getPageBrowsingResultsViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\PageBrowsingResultsViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\IndexedSearch\ViewHelpers\PageBrowsingResultsViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\PageBrowsingResultsViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\IndexedSearch\ViewHelpers\PageBrowsingViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\IndexedSearch\ViewHelpers\PageBrowsingViewHelper
     */
    protected static function getPageBrowsingViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\PageBrowsingViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\IndexedSearch\ViewHelpers\PageBrowsingViewHelper::class, ($container->services['TYPO3\\CMS\\Core\\Page\\AssetCollector'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\AssetCollector::class)));
        };

        return $container->factories['TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\PageBrowsingViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Info\Controller\InfoModuleController' shared autowired service.
     *
     * @return \TYPO3\CMS\Info\Controller\InfoModuleController
     */
    protected static function getInfoModuleControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $b = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));
        $c = ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container));
        $d = ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container));

        return $container->services['TYPO3\\CMS\\Info\\Controller\\InfoModuleController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Info\Controller\InfoModuleController::class, $a, $b, $c, $d, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $d, $a, $b, $c, ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Info\Controller\InfoPageTyposcriptConfigController' shared autowired service.
     *
     * @return \TYPO3\CMS\Info\Controller\InfoPageTyposcriptConfigController
     */
    protected static function getInfoPageTyposcriptConfigControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Info\\Controller\\InfoPageTyposcriptConfigController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Info\Controller\InfoPageTyposcriptConfigController::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Info\Controller\PageInformationController' shared autowired service.
     *
     * @return \TYPO3\CMS\Info\Controller\PageInformationController
     */
    protected static function getPageInformationControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $b = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));
        $c = ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container));
        $d = ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container));

        return $container->services['TYPO3\\CMS\\Info\\Controller\\PageInformationController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Info\Controller\PageInformationController::class, $a, $b, $c, $d, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $d, $a, $b, $c, ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Info\Controller\TranslationStatusController' shared autowired service.
     *
     * @return \TYPO3\CMS\Info\Controller\TranslationStatusController
     */
    protected static function getTranslationStatusControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $b = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));
        $c = ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container));
        $d = ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container));

        return $container->services['TYPO3\\CMS\\Info\\Controller\\TranslationStatusController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Info\Controller\TranslationStatusController::class, $a, $b, $c, $d, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $d, $a, $b, $c, ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Authentication\AuthenticationService' shared service.
     *
     * @return \TYPO3\CMS\Install\Authentication\AuthenticationService
     */
    protected static function getAuthenticationServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Authentication\\AuthenticationService'] = \TYPO3\CMS\Install\ServiceProvider::getAuthenticationService($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Command\LanguagePackCommand' shared service.
     *
     * @return \TYPO3\CMS\Install\Command\LanguagePackCommand
     */
    protected static function getLanguagePackCommandService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Command\\LanguagePackCommand'] = \TYPO3\CMS\Install\ServiceProvider::getLanguagePackCommand($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Command\SetupCommand' shared service.
     *
     * @return \TYPO3\CMS\Install\Command\SetupCommand
     */
    protected static function getSetupCommandService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Command\\SetupCommand'] = \TYPO3\CMS\Install\ServiceProvider::getSetupCommand($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Command\UpgradeWizardListCommand' shared service.
     *
     * @return \TYPO3\CMS\Install\Command\UpgradeWizardListCommand
     */
    protected static function getUpgradeWizardListCommandService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Command\\UpgradeWizardListCommand'] = \TYPO3\CMS\Install\ServiceProvider::getUpgradeWizardListCommand($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Command\UpgradeWizardRunCommand' shared service.
     *
     * @return \TYPO3\CMS\Install\Command\UpgradeWizardRunCommand
     */
    protected static function getUpgradeWizardRunCommandService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Command\\UpgradeWizardRunCommand'] = \TYPO3\CMS\Install\ServiceProvider::getUpgradeWizardRunCommand($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Controller\BackendModuleController' shared autowired service.
     *
     * @return \TYPO3\CMS\Install\Controller\BackendModuleController
     */
    protected static function getBackendModuleControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Controller\\BackendModuleController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Install\Controller\BackendModuleController::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Controller\EnvironmentController' shared service.
     *
     * @return \TYPO3\CMS\Install\Controller\EnvironmentController
     */
    protected static function getEnvironmentControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Controller\\EnvironmentController'] = \TYPO3\CMS\Install\ServiceProvider::getEnvironmentController($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Controller\IconController' shared service.
     *
     * @return \TYPO3\CMS\Install\Controller\IconController
     */
    protected static function getIconControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Controller\\IconController'] = \TYPO3\CMS\Install\ServiceProvider::getIconController($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Controller\InstallerController' shared service.
     *
     * @return \TYPO3\CMS\Install\Controller\InstallerController
     */
    protected static function getInstallerControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Controller\\InstallerController'] = \TYPO3\CMS\Install\ServiceProvider::getInstallerController($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Controller\LayoutController' shared service.
     *
     * @return \TYPO3\CMS\Install\Controller\LayoutController
     */
    protected static function getLayoutControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Controller\\LayoutController'] = \TYPO3\CMS\Install\ServiceProvider::getLayoutController($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Controller\LoginController' shared service.
     *
     * @return \TYPO3\CMS\Install\Controller\LoginController
     */
    protected static function getLoginController3Service($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Controller\\LoginController'] = \TYPO3\CMS\Install\ServiceProvider::getLoginController($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Controller\MaintenanceController' shared service.
     *
     * @return \TYPO3\CMS\Install\Controller\MaintenanceController
     */
    protected static function getMaintenanceControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Controller\\MaintenanceController'] = \TYPO3\CMS\Install\ServiceProvider::getMaintenanceController($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Controller\SettingsController' shared service.
     *
     * @return \TYPO3\CMS\Install\Controller\SettingsController
     */
    protected static function getSettingsControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Controller\\SettingsController'] = \TYPO3\CMS\Install\ServiceProvider::getSettingsController($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Controller\UpgradeController' shared service.
     *
     * @return \TYPO3\CMS\Install\Controller\UpgradeController
     */
    protected static function getUpgradeControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Controller\\UpgradeController'] = \TYPO3\CMS\Install\ServiceProvider::getUpgradeController($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Database\PermissionsCheck' shared service.
     *
     * @return \TYPO3\CMS\Install\Database\PermissionsCheck
     */
    protected static function getPermissionsCheckService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Database\\PermissionsCheck'] = \TYPO3\CMS\Install\ServiceProvider::getPermissionsCheck($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Http\Application' shared service.
     *
     * @return \TYPO3\CMS\Install\Http\Application
     */
    protected static function getApplication3Service($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Http\\Application'] = \TYPO3\CMS\Install\ServiceProvider::getApplication($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Http\NotFoundRequestHandler' shared service.
     *
     * @return \TYPO3\CMS\Install\Http\NotFoundRequestHandler
     */
    protected static function getNotFoundRequestHandlerService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Http\\NotFoundRequestHandler'] = \TYPO3\CMS\Install\ServiceProvider::getNotFoundRequestHandler($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Middleware\Installer' shared service.
     *
     * @return \TYPO3\CMS\Install\Middleware\Installer
     */
    protected static function getInstallerService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Middleware\\Installer'] = \TYPO3\CMS\Install\ServiceProvider::getInstallerMiddleware($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Middleware\Maintenance' shared service.
     *
     * @return \TYPO3\CMS\Install\Middleware\Maintenance
     */
    protected static function getMaintenanceService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Middleware\\Maintenance'] = \TYPO3\CMS\Install\ServiceProvider::getMaintenanceMiddleware($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Service\ClearCacheService' shared service.
     *
     * @return \TYPO3\CMS\Install\Service\ClearCacheService
     */
    protected static function getClearCacheServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Service\\ClearCacheService'] = \TYPO3\CMS\Install\ServiceProvider::getClearCacheService($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Service\CoreUpdateService' shared service.
     *
     * @return \TYPO3\CMS\Install\Service\CoreUpdateService
     */
    protected static function getCoreUpdateServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Service\\CoreUpdateService'] = \TYPO3\CMS\Install\ServiceProvider::getCoreUpdateService($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Service\CoreVersionService' shared service.
     *
     * @return \TYPO3\CMS\Install\Service\CoreVersionService
     */
    protected static function getCoreVersionServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Service\\CoreVersionService'] = \TYPO3\CMS\Install\ServiceProvider::getCoreVersionService($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Service\DatabaseUpgradeWizardsService' shared service.
     *
     * @return \TYPO3\CMS\Install\Service\DatabaseUpgradeWizardsService
     */
    protected static function getDatabaseUpgradeWizardsServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Service\\DatabaseUpgradeWizardsService'] = \TYPO3\CMS\Install\ServiceProvider::getDatabaseUpgradeWizardsService($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Service\LanguagePackService' shared service.
     *
     * @return \TYPO3\CMS\Install\Service\LanguagePackService
     */
    protected static function getLanguagePackServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Service\\LanguagePackService'] = \TYPO3\CMS\Install\ServiceProvider::getLanguagePackService($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Service\LateBootService' shared service.
     *
     * @return \TYPO3\CMS\Install\Service\LateBootService
     */
    protected static function getLateBootServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Service\\LateBootService'] = \TYPO3\CMS\Install\ServiceProvider::getLateBootService($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Service\LoadTcaService' shared service.
     *
     * @return \TYPO3\CMS\Install\Service\LoadTcaService
     */
    protected static function getLoadTcaServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Service\\LoadTcaService'] = \TYPO3\CMS\Install\ServiceProvider::getLoadTcaService($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Service\SetupDatabaseService' shared service.
     *
     * @return \TYPO3\CMS\Install\Service\SetupDatabaseService
     */
    protected static function getSetupDatabaseServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Service\\SetupDatabaseService'] = \TYPO3\CMS\Install\ServiceProvider::getSetupDatabaseService($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Service\SetupService' shared service.
     *
     * @return \TYPO3\CMS\Install\Service\SetupService
     */
    protected static function getSetupServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Service\\SetupService'] = \TYPO3\CMS\Install\ServiceProvider::getSetupService($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Service\SilentConfigurationUpgradeService' shared service.
     *
     * @return \TYPO3\CMS\Install\Service\SilentConfigurationUpgradeService
     */
    protected static function getSilentConfigurationUpgradeServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Service\\SilentConfigurationUpgradeService'] = \TYPO3\CMS\Install\ServiceProvider::getSilentConfigurationUpgradeService($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Service\SilentTemplateFileUpgradeService' shared service.
     *
     * @return \TYPO3\CMS\Install\Service\SilentTemplateFileUpgradeService
     */
    protected static function getSilentTemplateFileUpgradeServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Service\\SilentTemplateFileUpgradeService'] = \TYPO3\CMS\Install\ServiceProvider::getSilentTemplateFileUpgradeService($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Service\Typo3tempFileService' shared autowired service.
     *
     * @return \TYPO3\CMS\Install\Service\Typo3tempFileService
     */
    protected static function getTypo3tempFileServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Service\\Typo3tempFileService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Install\Service\Typo3tempFileService::class, ($container->services['TYPO3\\CMS\\Core\\Resource\\ProcessedFileRepository'] ?? self::getProcessedFileRepositoryService($container)), ($container->services['TYPO3\\CMS\\Core\\Resource\\StorageRepository'] ?? self::getStorageRepositoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Service\UpgradeWizardsService' shared autowired service.
     *
     * @return \TYPO3\CMS\Install\Service\UpgradeWizardsService
     */
    protected static function getUpgradeWizardsServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Service\\UpgradeWizardsService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Install\Service\UpgradeWizardsService::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Install\Updates\UpgradeWizardRegistry::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\Symfony\Component\DependencyInjection\Argument\ServiceLocator::class, $container->getService ??= $container->getService(...), [
            'backendGroupsExplicitAllowDenyMigration' => ['privates', 'TYPO3\\CMS\\Install\\Updates\\BackendGroupsExplicitAllowDenyMigration', 'getBackendGroupsExplicitAllowDenyMigrationService', false],
            'backendModulePermission' => ['privates', 'TYPO3\\CMS\\Install\\Updates\\BackendModulePermissionMigration', 'getBackendModulePermissionMigrationService', false],
            'backendUserLanguage' => ['privates', 'TYPO3\\CMS\\Install\\Updates\\BackendUserLanguageMigration', 'getBackendUserLanguageMigrationService', false],
            'legacyCollectionsExtension' => ['privates', 'TYPO3\\CMS\\Install\\Updates\\CollectionsExtractionUpdate', 'getCollectionsExtractionUpdateService', false],
            'databaseRowsUpdateWizard' => ['privates', 'TYPO3\\CMS\\Install\\Updates\\DatabaseRowsUpdateWizard', 'getDatabaseRowsUpdateWizardService', false],
            'feLoginModeExtension' => ['privates', 'TYPO3\\CMS\\Install\\Updates\\FeLoginModeExtractionUpdate', 'getFeLoginModeExtractionUpdateService', false],
            'migrateSiteSettings' => ['privates', 'TYPO3\\CMS\\Install\\Updates\\MigrateSiteSettingsConfigUpdate', 'getMigrateSiteSettingsConfigUpdateService', false],
            'passwordPolicyForFrontendUsersUpdate' => ['privates', 'TYPO3\\CMS\\Install\\Updates\\PasswordPolicyForFrontendUsersUpdate', 'getPasswordPolicyForFrontendUsersUpdateService', false],
            'shortcutRecordsMigration' => ['privates', 'TYPO3\\CMS\\Install\\Updates\\ShortcutRecordsMigration', 'getShortcutRecordsMigrationService', false],
            'svgFilesSanitization' => ['privates', 'TYPO3\\CMS\\Install\\Updates\\SvgFilesSanitization', 'getSvgFilesSanitizationService', false],
            'sysFileCollectionIdentifierMigration' => ['privates', 'TYPO3\\CMS\\Install\\Updates\\SysFileCollectionIdentifierMigration', 'getSysFileCollectionIdentifierMigrationService', false],
            'sysFileMountIdentifierMigration' => ['privates', 'TYPO3\\CMS\\Install\\Updates\\SysFileMountIdentifierMigration', 'getSysFileMountIdentifierMigrationService', false],
            'sysLogChannel' => ['privates', 'TYPO3\\CMS\\Install\\Updates\\SysLogChannel', 'getSysLogChannelService', false],
            'sysLogSerialization' => ['privates', 'TYPO3\\CMS\\Install\\Updates\\SysLogSerializationUpdate', 'getSysLogSerializationUpdateService', false],
            'sysTemplateNoWorkspaceMigration' => ['privates', 'TYPO3\\CMS\\Install\\Updates\\SysTemplateNoWorkspaceMigration', 'getSysTemplateNoWorkspaceMigrationService', false],
            'calendarize_dateFieldUpdate' => ['privates', 'HDNET\\Calendarize\\Updates\\DateFieldUpdate', 'getDateFieldUpdateService', false],
            'calendarize_newIncludeExcludeStructureUpdate' => ['privates', 'HDNET\\Calendarize\\Updates\\NewIncludeExcludeStructureUpdate', 'getNewIncludeExcludeStructureUpdateService', false],
            'calendarize_pluginUpdater' => ['privates', 'HDNET\\Calendarize\\Updates\\PluginUpdater', 'getPluginUpdaterService', false],
            'calendarize_populateEventSlugs' => ['privates', 'HDNET\\Calendarize\\Updates\\PopulateEventSlugs', 'getPopulateEventSlugsService', false],
            'calendarize_tillDateFieldUpdate' => ['privates', 'HDNET\\Calendarize\\Updates\\TillDateFieldUpdate', 'getTillDateFieldUpdateService', false],
        ], [
            'backendGroupsExplicitAllowDenyMigration' => 'TYPO3\\CMS\\Install\\Updates\\BackendGroupsExplicitAllowDenyMigration',
            'backendModulePermission' => 'TYPO3\\CMS\\Install\\Updates\\BackendModulePermissionMigration',
            'backendUserLanguage' => 'TYPO3\\CMS\\Install\\Updates\\BackendUserLanguageMigration',
            'legacyCollectionsExtension' => 'TYPO3\\CMS\\Install\\Updates\\CollectionsExtractionUpdate',
            'databaseRowsUpdateWizard' => 'TYPO3\\CMS\\Install\\Updates\\DatabaseRowsUpdateWizard',
            'feLoginModeExtension' => 'TYPO3\\CMS\\Install\\Updates\\FeLoginModeExtractionUpdate',
            'migrateSiteSettings' => 'TYPO3\\CMS\\Install\\Updates\\MigrateSiteSettingsConfigUpdate',
            'passwordPolicyForFrontendUsersUpdate' => 'TYPO3\\CMS\\Install\\Updates\\PasswordPolicyForFrontendUsersUpdate',
            'shortcutRecordsMigration' => 'TYPO3\\CMS\\Install\\Updates\\ShortcutRecordsMigration',
            'svgFilesSanitization' => 'TYPO3\\CMS\\Install\\Updates\\SvgFilesSanitization',
            'sysFileCollectionIdentifierMigration' => 'TYPO3\\CMS\\Install\\Updates\\SysFileCollectionIdentifierMigration',
            'sysFileMountIdentifierMigration' => 'TYPO3\\CMS\\Install\\Updates\\SysFileMountIdentifierMigration',
            'sysLogChannel' => 'TYPO3\\CMS\\Install\\Updates\\SysLogChannel',
            'sysLogSerialization' => 'TYPO3\\CMS\\Install\\Updates\\SysLogSerializationUpdate',
            'sysTemplateNoWorkspaceMigration' => 'TYPO3\\CMS\\Install\\Updates\\SysTemplateNoWorkspaceMigration',
            'calendarize_dateFieldUpdate' => 'HDNET\\Calendarize\\Updates\\DateFieldUpdate',
            'calendarize_newIncludeExcludeStructureUpdate' => 'HDNET\\Calendarize\\Updates\\NewIncludeExcludeStructureUpdate',
            'calendarize_pluginUpdater' => 'HDNET\\Calendarize\\Updates\\PluginUpdater',
            'calendarize_populateEventSlugs' => 'HDNET\\Calendarize\\Updates\\PopulateEventSlugs',
            'calendarize_tillDateFieldUpdate' => 'HDNET\\Calendarize\\Updates\\TillDateFieldUpdate',
        ])), ($container->services['TYPO3\\CMS\\Core\\Registry'] ?? self::getRegistry2Service($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Service\WebServerConfigurationFileService' shared service.
     *
     * @return \TYPO3\CMS\Install\Service\WebServerConfigurationFileService
     */
    protected static function getWebServerConfigurationFileServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Service\\WebServerConfigurationFileService'] = \TYPO3\CMS\Install\ServiceProvider::getWebServerConfigurationFileService($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Updates\RowUpdater\SysRedirectRootPageMoveMigration' shared autowired service.
     *
     * @return \TYPO3\CMS\Install\Updates\RowUpdater\SysRedirectRootPageMoveMigration
     */
    protected static function getSysRedirectRootPageMoveMigrationService($container)
    {
        return $container->services['TYPO3\\CMS\\Install\\Updates\\RowUpdater\\SysRedirectRootPageMoveMigration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Install\Updates\RowUpdater\SysRedirectRootPageMoveMigration::class, ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)), ($container->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? self::getSiteFinderService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Linkvalidator\Controller\LinkValidatorController' shared autowired service.
     *
     * @return \TYPO3\CMS\Linkvalidator\Controller\LinkValidatorController
     */
    protected static function getLinkValidatorControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));
        $b = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));

        return $container->services['TYPO3\\CMS\\Linkvalidator\\Controller\\LinkValidatorController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Linkvalidator\Controller\LinkValidatorController::class, ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)), $a, $b, ($container->privates['TYPO3\\CMS\\Linkvalidator\\Repository\\PagesRepository'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Linkvalidator\Repository\PagesRepository::class)), ($container->services['TYPO3\\CMS\\Linkvalidator\\Repository\\BrokenLinkRepository'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Linkvalidator\Repository\BrokenLinkRepository::class)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), $b, $a, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), ($container->services['TYPO3\\CMS\\Linkvalidator\\LinkAnalyzer'] ?? self::getLinkAnalyzerService($container)), ($container->services['TYPO3\\CMS\\Linkvalidator\\Linktype\\LinktypeRegistry'] ?? self::getLinktypeRegistryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Linkvalidator\EventListener\CheckBrokenRteLinkEventListener' shared autowired service.
     *
     * @return \TYPO3\CMS\Linkvalidator\EventListener\CheckBrokenRteLinkEventListener
     */
    protected static function getCheckBrokenRteLinkEventListenerService($container)
    {
        return $container->services['TYPO3\\CMS\\Linkvalidator\\EventListener\\CheckBrokenRteLinkEventListener'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Linkvalidator\EventListener\CheckBrokenRteLinkEventListener::class, ($container->services['TYPO3\\CMS\\Linkvalidator\\Repository\\BrokenLinkRepository'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Linkvalidator\Repository\BrokenLinkRepository::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Linkvalidator\LinkAnalyzer' shared autowired service.
     *
     * @return \TYPO3\CMS\Linkvalidator\LinkAnalyzer
     */
    protected static function getLinkAnalyzerService($container)
    {
        return $container->services['TYPO3\\CMS\\Linkvalidator\\LinkAnalyzer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Linkvalidator\LinkAnalyzer::class, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->services['TYPO3\\CMS\\Linkvalidator\\Repository\\BrokenLinkRepository'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Linkvalidator\Repository\BrokenLinkRepository::class)), ($container->services['TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\SoftReferenceParserFactory'] ?? self::getSoftReferenceParserFactoryService($container)), ($container->services['TYPO3\\CMS\\Linkvalidator\\Linktype\\LinktypeRegistry'] ?? self::getLinktypeRegistryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Linkvalidator\Linktype\ExternalLinktype' shared autowired service.
     *
     * @return \TYPO3\CMS\Linkvalidator\Linktype\ExternalLinktype
     */
    protected static function getExternalLinktypeService($container)
    {
        return $container->services['TYPO3\\CMS\\Linkvalidator\\Linktype\\ExternalLinktype'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Linkvalidator\Linktype\ExternalLinktype::class, ($container->services['TYPO3\\CMS\\Core\\Http\\RequestFactory'] ?? self::getRequestFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Linkvalidator\Linktype\LinktypeRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Linkvalidator\Linktype\LinktypeRegistry
     */
    protected static function getLinktypeRegistryService($container)
    {
        return $container->services['TYPO3\\CMS\\Linkvalidator\\Linktype\\LinktypeRegistry'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Linkvalidator\Linktype\LinktypeRegistry::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(RewindableGenerator::class, function () use ($container) {
            yield 0 => ($container->services['TYPO3\\CMS\\Linkvalidator\\Linktype\\ExternalLinktype'] ?? self::getExternalLinktypeService($container));
            yield 1 => ($container->privates['TYPO3\\CMS\\Linkvalidator\\Linktype\\FileLinktype'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Linkvalidator\Linktype\FileLinktype::class));
            yield 2 => ($container->privates['TYPO3\\CMS\\Linkvalidator\\Linktype\\InternalLinktype'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Linkvalidator\Linktype\InternalLinktype::class));
        }, 3));
    }

    /**
     * Gets the public 'TYPO3\CMS\Linkvalidator\Repository\BrokenLinkRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Linkvalidator\Repository\BrokenLinkRepository
     */
    protected static function getBrokenLinkRepositoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Linkvalidator\\Repository\\BrokenLinkRepository'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Linkvalidator\Repository\BrokenLinkRepository::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Linkvalidator\Result\LinkAnalyzerResult' shared autowired service.
     *
     * @return \TYPO3\CMS\Linkvalidator\Result\LinkAnalyzerResult
     */
    protected static function getLinkAnalyzerResultService($container)
    {
        return $container->services['TYPO3\\CMS\\Linkvalidator\\Result\\LinkAnalyzerResult'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Linkvalidator\Result\LinkAnalyzerResult::class, ($container->services['TYPO3\\CMS\\Linkvalidator\\LinkAnalyzer'] ?? self::getLinkAnalyzerService($container)), ($container->services['TYPO3\\CMS\\Linkvalidator\\Repository\\BrokenLinkRepository'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Linkvalidator\Repository\BrokenLinkRepository::class)), ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)), ($container->privates['TYPO3\\CMS\\Linkvalidator\\Repository\\PagesRepository'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Linkvalidator\Repository\PagesRepository::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Lowlevel\Command\CleanFlexFormsCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Lowlevel\Command\CleanFlexFormsCommand
     */
    protected static function getCleanFlexFormsCommandService($container)
    {
        $container->services['TYPO3\\CMS\\Lowlevel\\Command\\CleanFlexFormsCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\Command\CleanFlexFormsCommand::class, ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)));

        $instance->setName('cleanup:flexforms');
        $instance->setDescription('Updates all database records which have a FlexForm field and the XML data does not match the chosen datastructure.');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Lowlevel\Command\CleanUpLocalProcessedFilesCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Lowlevel\Command\CleanUpLocalProcessedFilesCommand
     */
    protected static function getCleanUpLocalProcessedFilesCommandService($container)
    {
        $container->services['TYPO3\\CMS\\Lowlevel\\Command\\CleanUpLocalProcessedFilesCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\Command\CleanUpLocalProcessedFilesCommand::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\Service\CleanUpLocalProcessedFilesService::class));

        $instance->setName('cleanup:localprocessedfiles');
        $instance->setDescription('Delete processed files and their database records.');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Lowlevel\Command\DeletedRecordsCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Lowlevel\Command\DeletedRecordsCommand
     */
    protected static function getDeletedRecordsCommandService($container)
    {
        $container->services['TYPO3\\CMS\\Lowlevel\\Command\\DeletedRecordsCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\Command\DeletedRecordsCommand::class, ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)));

        $instance->setName('cleanup:deletedrecords');
        $instance->setDescription('Permanently deletes all records marked as "deleted" in the database.');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Lowlevel\Command\ListSysLogCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Lowlevel\Command\ListSysLogCommand
     */
    protected static function getListSysLogCommandService($container)
    {
        $container->services['TYPO3\\CMS\\Lowlevel\\Command\\ListSysLogCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\Command\ListSysLogCommand::class);

        $instance->setName('syslog:list');
        $instance->setDescription('Show entries from the sys_log database table of the last 24 hours.');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Lowlevel\Command\MissingRelationsCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Lowlevel\Command\MissingRelationsCommand
     */
    protected static function getMissingRelationsCommandService($container)
    {
        $container->services['TYPO3\\CMS\\Lowlevel\\Command\\MissingRelationsCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\Command\MissingRelationsCommand::class, ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)));

        $instance->setName('cleanup:missingrelations');
        $instance->setDescription('Find all record references pointing to a non-existing record');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Lowlevel\Command\OrphanRecordsCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Lowlevel\Command\OrphanRecordsCommand
     */
    protected static function getOrphanRecordsCommandService($container)
    {
        $container->services['TYPO3\\CMS\\Lowlevel\\Command\\OrphanRecordsCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\Command\OrphanRecordsCommand::class, ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)));

        $instance->setName('cleanup:orphanrecords');
        $instance->setDescription('Find and delete records that have lost their connection with the page tree.');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\ProviderRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\ProviderRegistry
     */
    protected static function getProviderRegistryService($container)
    {
        $container->services['TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\ProviderRegistry'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\ProviderRegistry::class);

        $a = ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container));

        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\GlobalVariableProvider::class, $a), ['identifier' => 'confVars', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:typo3ConfVars', 'globalVariableKey' => 'TYPO3_CONF_VARS', 'before' => 'tca']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\GlobalVariableProvider::class, $a), ['identifier' => 'tca', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:tca', 'globalVariableKey' => 'TCA', 'before' => 'services', 'after' => 'confVars']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\GlobalVariableProvider::class, $a), ['identifier' => 'services', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:t3services', 'globalVariableKey' => 'T3_SERVICES', 'before' => 'tbeStyles', 'after' => 'tca']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\GlobalVariableProvider::class, $a), ['identifier' => 'tbeStyles', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:tbeStyles', 'globalVariableKey' => 'TBE_STYLES', 'before' => 'userSettings', 'after' => 'services']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\GlobalVariableProvider::class, $a), ['identifier' => 'userSettings', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:usersettings', 'globalVariableKey' => 'TYPO3_USER_SETTINGS', 'before' => 'pagesTypes', 'after' => 'tbeStyles']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\PageDoktypeProvider::class, ($container->services['TYPO3\\CMS\\Core\\DataHandling\\PageDoktypeRegistry'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\PageDoktypeRegistry::class))), ['identifier' => 'pagesTypes', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:pagesTypes', 'before' => 'beUserUc', 'after' => 'userSettings']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\BackendUserSettingsProvider::class), ['identifier' => 'beUserUc', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:beUser', 'before' => 'beUserTsConfig', 'after' => 'pagesTypes']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\BackendUserTsConfigProvider::class), ['identifier' => 'beUserTsConfig', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:beUserTsConfig', 'before' => 'beRoutes', 'after' => 'beUserUc']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\BackendRoutesProvider::class, ($container->services['TYPO3\\CMS\\Backend\\Routing\\Router_decorated_1'] ?? self::getRouterDecorated1Service($container))), ['identifier' => 'beRoutes', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:routes', 'before' => 'backendModules', 'after' => 'beUserTsConfig']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\BackendModuleProvider::class, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container))), ['identifier' => 'backendModules', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:backendModules', 'before' => 'httpMiddlewareStacks', 'after' => 'beRoutes']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\HttpMiddlewareStackProvider::class, $container), ['identifier' => 'httpMiddlewareStacks', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:httpMiddlewareStacks', 'before' => 'sitesTcaConfiguration', 'after' => 'backendModules']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\ContentSecurityPolicyMutationsProvider::class, ($container->privates['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\ModelService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Security\ContentSecurityPolicy\ModelService::class)), ($container->privates['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\MutationRepository'] ?? self::getMutationRepositoryService($container))), ['identifier' => 'contentSecurityPolicyMutations', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:contentSecurityPolicyMutations', 'before' => 'softReferenceParsers', 'after' => 'httpMiddlewareStacks']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\SitesTcaConfigurationProvider::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Configuration\SiteTcaConfiguration::class)), ['identifier' => 'sitesTcaConfiguration', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:sitesTcaConfiguration', 'before' => 'sitesYamlConfiguration', 'after' => 'contentSecurityPolicyMutations']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\SitesYamlConfigurationProvider::class, $a, ($container->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? self::getSiteFinderService($container))), ['identifier' => 'sitesYamlConfiguration', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:sitesYamlConfiguration', 'before' => 'eventListeners', 'after' => 'sitesTcaConfiguration']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\EventListenersProvider::class, ($container->services['TYPO3\\CMS\\Core\\EventDispatcher\\ListenerProvider_decorated_3'] ?? self::getListenerProviderDecorated3Service($container))), ['identifier' => 'eventListeners', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:eventListeners', 'before' => 'mfaProviders', 'after' => 'sitesYamlConfiguration']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\MfaProvidersProvider::class, ($container->services['TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaProviderRegistry'] ?? self::getMfaProviderRegistryService($container))), ['identifier' => 'mfaProviders', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:mfaProviders', 'before' => 'softReferenceParsers', 'after' => 'eventListeners']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\SoftReferenceParsersProvider::class, ($container->services['TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\SoftReferenceParserFactory'] ?? self::getSoftReferenceParserFactoryService($container))), ['identifier' => 'softReferenceParsers', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:softReferenceParsers', 'before' => 'toolbaritems', 'after' => 'mfaproviders']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\ConfigurationModuleProvider\FormYamlProvider::class, ($container->services['TYPO3\\CMS\\Form\\Mvc\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManager2Service($container))), ['identifier' => 'formYamlConfiguration', 'after' => 'eventListeners']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Reactions\ConfigurationModuleProvider\ReactionsProvider::class, ($container->privates['TYPO3\\CMS\\Reactions\\ReactionRegistry'] ?? self::getReactionRegistryService($container))), ['identifier' => 'reactions', 'label' => 'LLL:EXT:reactions/Resources/Private/Language/locallang_db.xlf:reactions', 'after' => 'mfaproviders']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\ToolbarItemsProvider::class, ($container->privates['TYPO3\\CMS\\Backend\\Toolbar\\ToolbarItemsRegistry'] ?? self::getToolbarItemsRegistryService($container))), ['identifier' => 'toolbaritems', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:toolbarItems', 'after' => 'softReferenceParsers']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\SymfonyExpressionLanguageProvidersProvider::class), ['identifier' => 'symfonyExpressionLanguage', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:symfonyExpressionLanguage', 'after' => 'toolbaritems']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Webhooks\ConfigurationModuleProvider\WebhookTypesProvider::class, ($container->services['TYPO3\\CMS\\Webhooks\\WebhookTypesRegistry'] ?? self::getWebhookTypesRegistryService($container)), ($container->privates['.service_locator.lUAd7EM'] ?? self::get_ServiceLocator_LUAd7EMService($container))), ['identifier' => 'webhooks', 'label' => 'LLL:EXT:webhooks/Resources/Private/Language/locallang_db.xlf:webhooks', 'after' => 'reactions']);

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Lowlevel\Controller\ConfigurationController' shared autowired service.
     *
     * @return \TYPO3\CMS\Lowlevel\Controller\ConfigurationController
     */
    protected static function getConfigurationControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));

        return $container->services['TYPO3\\CMS\\Lowlevel\\Controller\\ConfigurationController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\Controller\ConfigurationController::class, ($container->services['TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\ProviderRegistry'] ?? self::getProviderRegistryService($container)), $a, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), $a, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Lowlevel\Controller\DatabaseIntegrityController' shared autowired service.
     *
     * @return \TYPO3\CMS\Lowlevel\Controller\DatabaseIntegrityController
     */
    protected static function getDatabaseIntegrityControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $b = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));

        return $container->services['TYPO3\\CMS\\Lowlevel\\Controller\\DatabaseIntegrityController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\Controller\DatabaseIntegrityController::class, $a, $b, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), $a, $b, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Lowlevel\HookProvider\ModifyBlindedConfigurationOptionsHookProvider' shared autowired service.
     *
     * @return \TYPO3\CMS\Lowlevel\HookProvider\ModifyBlindedConfigurationOptionsHookProvider
     */
    protected static function getModifyBlindedConfigurationOptionsHookProviderService($container)
    {
        return $container->services['TYPO3\\CMS\\Lowlevel\\HookProvider\\ModifyBlindedConfigurationOptionsHookProvider'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\HookProvider\ModifyBlindedConfigurationOptionsHookProvider::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Opendocs\Backend\ToolbarItems\OpendocsToolbarItem' shared autowired service.
     *
     * @return \TYPO3\CMS\Opendocs\Backend\ToolbarItems\OpendocsToolbarItem
     */
    protected static function getOpendocsToolbarItemService($container)
    {
        return $container->services['TYPO3\\CMS\\Opendocs\\Backend\\ToolbarItems\\OpendocsToolbarItem'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Opendocs\Backend\ToolbarItems\OpendocsToolbarItem::class, ($container->privates['TYPO3\\CMS\\Opendocs\\Service\\OpenDocumentService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Opendocs\Service\OpenDocumentService::class)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Opendocs\Controller\OpenDocumentController' shared autowired service.
     *
     * @return \TYPO3\CMS\Opendocs\Controller\OpenDocumentController
     */
    protected static function getOpenDocumentControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Opendocs\\Controller\\OpenDocumentController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Opendocs\Controller\OpenDocumentController::class, ($container->privates['TYPO3\\CMS\\Opendocs\\Service\\OpenDocumentService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Opendocs\Service\OpenDocumentService::class)), ($container->services['TYPO3\\CMS\\Opendocs\\Backend\\ToolbarItems\\OpendocsToolbarItem'] ?? self::getOpendocsToolbarItemService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Reactions\Controller\ManagementController' shared autowired service.
     *
     * @return \TYPO3\CMS\Reactions\Controller\ManagementController
     */
    protected static function getManagementControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));
        $b = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));

        return $container->services['TYPO3\\CMS\\Reactions\\Controller\\ManagementController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Reactions\Controller\ManagementController::class, $a, $b, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), $b, $a, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), ($container->privates['TYPO3\\CMS\\Reactions\\ReactionRegistry'] ?? self::getReactionRegistryService($container)), ($container->privates['TYPO3\\CMS\\Reactions\\Repository\\ReactionRepository'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Reactions\Repository\ReactionRepository::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Reactions\Form\ReactionItemsProcFunc' shared autowired service.
     *
     * @return \TYPO3\CMS\Reactions\Form\ReactionItemsProcFunc
     */
    protected static function getReactionItemsProcFuncService($container)
    {
        return $container->services['TYPO3\\CMS\\Reactions\\Form\\ReactionItemsProcFunc'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Reactions\Form\ReactionItemsProcFunc::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Reactions\Http\Middleware\ReactionResolver' shared autowired service.
     *
     * @return \TYPO3\CMS\Reactions\Http\Middleware\ReactionResolver
     */
    protected static function getReactionResolverService($container)
    {
        $a = ($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1));

        return $container->services['TYPO3\\CMS\\Reactions\\Http\\Middleware\\ReactionResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Reactions\Http\Middleware\ReactionResolver::class, $a->getLogger('TYPO3\\CMS\\Reactions\\Http\\Middleware\\ReactionResolver'), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Reactions\Http\ReactionHandler::class, ($container->privates['TYPO3\\CMS\\Reactions\\ReactionRegistry'] ?? self::getReactionRegistryService($container)), $a->getLogger('TYPO3\\CMS\\Reactions\\Http\\ReactionHandler'), ($container->services['TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory'] ?? self::getLanguageServiceFactoryService($container))), ($container->privates['TYPO3\\CMS\\Reactions\\Repository\\ReactionRepository'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Reactions\Repository\ReactionRepository::class)), ($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)), ($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Reactions\Reaction\CreateRecordReaction' shared autowired service.
     *
     * @return \TYPO3\CMS\Reactions\Reaction\CreateRecordReaction
     */
    protected static function getCreateRecordReactionService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->services['TYPO3\\CMS\\Reactions\\Reaction\\CreateRecordReaction'] = $container->createProxy('CreateRecordReactionGhost3d5ed12', static fn () => \CreateRecordReactionGhost3d5ed12::createLazyGhost(static fn ($proxy) => self::getCreateRecordReactionService($container, $proxy)));
        }

        return ($lazyLoad->__construct(($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)), ($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class))) && false ?: $lazyLoad);
    }

    /**
     * Gets the public 'TYPO3\CMS\Recycler\Controller\RecyclerAjaxController' shared autowired service.
     *
     * @return \TYPO3\CMS\Recycler\Controller\RecyclerAjaxController
     */
    protected static function getRecyclerAjaxControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Recycler\\Controller\\RecyclerAjaxController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Recycler\Controller\RecyclerAjaxController::class, ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)), ($container->privates['cache.runtime'] ?? self::getCache_RuntimeService($container)), ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Recycler\Controller\RecyclerModuleController' shared autowired service.
     *
     * @return \TYPO3\CMS\Recycler\Controller\RecyclerModuleController
     */
    protected static function getRecyclerModuleControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $b = ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container));

        return $container->services['TYPO3\\CMS\\Recycler\\Controller\\RecyclerModuleController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Recycler\Controller\RecyclerModuleController::class, $a, $b, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Redirects\Command\CheckIntegrityCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Redirects\Command\CheckIntegrityCommand
     */
    protected static function getCheckIntegrityCommandService($container)
    {
        $container->services['TYPO3\\CMS\\Redirects\\Command\\CheckIntegrityCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\Command\CheckIntegrityCommand::class, ($container->services['TYPO3\\CMS\\Core\\Registry'] ?? self::getRegistry2Service($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\Service\IntegrityService::class, ($container->privates['TYPO3\\CMS\\Redirects\\Service\\RedirectService'] ?? self::getRedirectServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? self::getSiteFinderService($container))));

        $instance->setName('redirects:checkintegrity');
        $instance->setDescription('Check integrity of redirects');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Redirects\Command\CleanupRedirectsCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Redirects\Command\CleanupRedirectsCommand
     */
    protected static function getCleanupRedirectsCommandService($container)
    {
        $container->services['TYPO3\\CMS\\Redirects\\Command\\CleanupRedirectsCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\Command\CleanupRedirectsCommand::class, ($container->privates['TYPO3\\CMS\\Redirects\\Repository\\RedirectRepository'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\Repository\RedirectRepository::class)), ($container->services['TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory'] ?? self::getLanguageServiceFactoryService($container)));

        $instance->setName('redirects:cleanup');
        $instance->setDescription('Cleanup old redirects periodically for given constraints like days, hit count or domains.');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Redirects\Controller\ManagementController' shared autowired service.
     *
     * @return \TYPO3\CMS\Redirects\Controller\ManagementController
     */
    protected static function getManagementController2Service($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));
        $b = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));

        return $container->services['TYPO3\\CMS\\Redirects\\Controller\\ManagementController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\Controller\ManagementController::class, $a, $b, ($container->privates['TYPO3\\CMS\\Redirects\\Repository\\RedirectRepository'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\Repository\RedirectRepository::class)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), $b, $a, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Redirects\Controller\RecordHistoryRollbackController' shared autowired service.
     *
     * @return \TYPO3\CMS\Redirects\Controller\RecordHistoryRollbackController
     */
    protected static function getRecordHistoryRollbackControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Redirects\\Controller\\RecordHistoryRollbackController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\Controller\RecordHistoryRollbackController::class, ($container->services['TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory'] ?? self::getLanguageServiceFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Redirects\EventListener\AddPageTypeZeroSource' shared autowired service.
     *
     * @return \TYPO3\CMS\Redirects\EventListener\AddPageTypeZeroSource
     */
    protected static function getAddPageTypeZeroSourceService($container)
    {
        return $container->services['TYPO3\\CMS\\Redirects\\EventListener\\AddPageTypeZeroSource'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\EventListener\AddPageTypeZeroSource::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Redirects\EventListener\AddPlainSlugReplacementSource' shared autowired service.
     *
     * @return \TYPO3\CMS\Redirects\EventListener\AddPlainSlugReplacementSource
     */
    protected static function getAddPlainSlugReplacementSourceService($container)
    {
        return $container->services['TYPO3\\CMS\\Redirects\\EventListener\\AddPlainSlugReplacementSource'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\EventListener\AddPlainSlugReplacementSource::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Redirects\EventListener\AfterBackendPageRendererEventListener' shared autowired service.
     *
     * @return \TYPO3\CMS\Redirects\EventListener\AfterBackendPageRendererEventListener
     */
    protected static function getAfterBackendPageRendererEventListenerService($container)
    {
        return $container->services['TYPO3\\CMS\\Redirects\\EventListener\\AfterBackendPageRendererEventListener'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\EventListener\AfterBackendPageRendererEventListener::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Redirects\EventListener\IncrementHitCount' shared autowired service.
     *
     * @return \TYPO3\CMS\Redirects\EventListener\IncrementHitCount
     */
    protected static function getIncrementHitCountService($container)
    {
        return $container->services['TYPO3\\CMS\\Redirects\\EventListener\\IncrementHitCount'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\EventListener\IncrementHitCount::class, ($container->privates['TYPO3\\CMS\\Core\\Configuration\\Features'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\Features::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Redirects\EventListener\RecordHistoryRollbackEventsListener' shared autowired service.
     *
     * @return \TYPO3\CMS\Redirects\EventListener\RecordHistoryRollbackEventsListener
     */
    protected static function getRecordHistoryRollbackEventsListenerService($container)
    {
        return $container->services['TYPO3\\CMS\\Redirects\\EventListener\\RecordHistoryRollbackEventsListener'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\EventListener\RecordHistoryRollbackEventsListener::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Redirects\Hooks\DataHandlerSlugUpdateHook' shared autowired service.
     *
     * @return \TYPO3\CMS\Redirects\Hooks\DataHandlerSlugUpdateHook
     */
    protected static function getDataHandlerSlugUpdateHookService($container)
    {
        $a = ($container->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? self::getSiteFinderService($container));
        $b = ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container));

        $c = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\RedirectUpdate\SlugRedirectChangeItemFactory::class, $a, $b);

        $d = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\Service\SlugService::class, ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)), $a, ($container->privates['TYPO3\\CMS\\Core\\Domain\\Repository\\PageRepository'] ?? self::getPageRepositoryService($container)), ($container->services['TYPO3\\CMS\\Core\\LinkHandling\\LinkService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\LinkHandling\LinkService::class)), ($container->privates['TYPO3\\CMS\\Redirects\\Service\\RedirectCacheService'] ?? self::getRedirectCacheServiceService($container)), $c, $b);
        $d->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Redirects\\Service\\SlugService'));

        return $container->services['TYPO3\\CMS\\Redirects\\Hooks\\DataHandlerSlugUpdateHook'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\Hooks\DataHandlerSlugUpdateHook::class, $d, $c);
    }

    /**
     * Gets the public 'TYPO3\CMS\Redirects\Http\Middleware\RedirectHandler' shared autowired service.
     *
     * @return \TYPO3\CMS\Redirects\Http\Middleware\RedirectHandler
     */
    protected static function getRedirectHandlerService($container)
    {
        return $container->services['TYPO3\\CMS\\Redirects\\Http\\Middleware\\RedirectHandler'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\Http\Middleware\RedirectHandler::class, ($container->privates['TYPO3\\CMS\\Redirects\\Service\\RedirectService'] ?? self::getRedirectServiceService($container)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)), ($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Redirects\\Http\\Middleware\\RedirectHandler'));
    }

    /**
     * Gets the public 'TYPO3\CMS\Redirects\Report\Status\RedirectStatus' shared autowired service.
     *
     * @return \TYPO3\CMS\Redirects\Report\Status\RedirectStatus
     */
    protected static function getRedirectStatusService($container)
    {
        return $container->services['TYPO3\\CMS\\Redirects\\Report\\Status\\RedirectStatus'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\Report\Status\RedirectStatus::class, ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Redirects\ViewHelpers\TargetPageIdViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Redirects\ViewHelpers\TargetPageIdViewHelper
     */
    protected static function getTargetPageIdViewHelperService($container)
    {
        $container->factories['TYPO3\\CMS\\Redirects\\ViewHelpers\\TargetPageIdViewHelper'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\ViewHelpers\TargetPageIdViewHelper::class);
        };

        return $container->factories['TYPO3\\CMS\\Redirects\\ViewHelpers\\TargetPageIdViewHelper']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Reports\Controller\ReportController' shared autowired service.
     *
     * @return \TYPO3\CMS\Reports\Controller\ReportController
     */
    protected static function getReportControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));

        return $container->services['TYPO3\\CMS\\Reports\\Controller\\ReportController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Reports\Controller\ReportController::class, $a, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), $a, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconRegistry_decorated_1'] ?? self::getIconRegistryDecorated1Service($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Reports\Registry\ReportRegistry::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(RewindableGenerator::class, function () use ($container) {
            yield 0 => ($container->services['TYPO3\\CMS\\Reports\\Report\\Status\\Status'] ?? self::getStatusService($container));
        }, 1)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Reports\Report\Status\Status' shared autowired service.
     *
     * @return \TYPO3\CMS\Reports\Report\Status\Status
     */
    protected static function getStatusService($container)
    {
        return $container->services['TYPO3\\CMS\\Reports\\Report\\Status\\Status'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Reports\Report\Status\Status::class, ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Reports\Registry\StatusRegistry::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(RewindableGenerator::class, function () use ($container) {
            yield 0 => ($container->privates['TYPO3\\CMS\\Install\\Report\\EnvironmentStatusReport'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Install\Report\EnvironmentStatusReport::class));
            yield 1 => ($container->privates['TYPO3\\CMS\\Install\\Report\\InstallStatusReport'] ?? self::getInstallStatusReportService($container));
            yield 2 => ($container->privates['TYPO3\\CMS\\Install\\Report\\SecurityStatusReport'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Install\Report\SecurityStatusReport::class));
            yield 3 => ($container->privates['TYPO3\\CMS\\Reports\\Report\\Status\\ConfigurationStatus'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Reports\Report\Status\ConfigurationStatus::class));
            yield 4 => ($container->privates['TYPO3\\CMS\\Reports\\Report\\Status\\FalStatus'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Reports\Report\Status\FalStatus::class));
            yield 5 => ($container->privates['TYPO3\\CMS\\Reports\\Report\\Status\\SecurityStatus'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Reports\Report\Status\SecurityStatus::class));
            yield 6 => ($container->privates['TYPO3\\CMS\\Reports\\Report\\Status\\SystemStatus'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Reports\Report\Status\SystemStatus::class));
            yield 7 => ($container->privates['TYPO3\\CMS\\Reports\\Report\\Status\\Typo3Status'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Reports\Report\Status\Typo3Status::class));
            yield 8 => ($container->services['TYPO3\\CMS\\Redirects\\Report\\Status\\RedirectStatus'] ?? self::getRedirectStatusService($container));
            yield 9 => ($container->services['TYPO3\\CMS\\Extensionmanager\\Report\\ExtensionComposerStatus'] ?? self::getExtensionComposerStatusService($container));
            yield 10 => ($container->privates['TYPO3\\CMS\\Extensionmanager\\Report\\ExtensionStatus'] ?? self::getExtensionStatusService($container));
        }, 11)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Reports\Report\WarningsForAboutModule' shared autowired service.
     *
     * @return \TYPO3\CMS\Reports\Report\WarningsForAboutModule
     */
    protected static function getWarningsForAboutModuleService($container)
    {
        return $container->services['TYPO3\\CMS\\Reports\\Report\\WarningsForAboutModule'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Reports\Report\WarningsForAboutModule::class, ($container->services['TYPO3\\CMS\\Core\\Registry'] ?? self::getRegistry2Service($container)), ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\RteCKEditor\Controller\BrowseLinksController' autowired service.
     *
     * @return \TYPO3\CMS\RteCKEditor\Controller\BrowseLinksController
     */
    protected static function getBrowseLinksControllerService($container)
    {
        $container->factories['TYPO3\\CMS\\RteCKEditor\\Controller\\BrowseLinksController'] = function ($container) {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\RteCKEditor\Controller\BrowseLinksController::class, ($container->services['TYPO3\\CMS\\Core\\LinkHandling\\LinkService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\LinkHandling\LinkService::class)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\Richtext'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\Richtext::class)), ($container->services['TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory'] ?? self::getLanguageServiceFactoryService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)));

            $instance->injectDependencyOrderingService(($container->services['TYPO3\\CMS\\Core\\Service\\DependencyOrderingService'] ?? self::getDependencyOrderingServiceService($container)));
            $instance->injectPageRenderer(($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)));
            $instance->injectUriBuilder(($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)));
            $instance->injectExtensionConfiguration(($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)));
            $instance->injectBackendViewFactory(($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)));
            $instance->injectEventDispatcher(($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));

            return $instance;
        };

        return $container->factories['TYPO3\\CMS\\RteCKEditor\\Controller\\BrowseLinksController']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\Scheduler\Command\SchedulerCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Scheduler\Command\SchedulerCommand
     */
    protected static function getSchedulerCommandService($container)
    {
        $container->services['TYPO3\\CMS\\Scheduler\\Command\\SchedulerCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Scheduler\Command\SchedulerCommand::class, ($container->services['TYPO3\\CMS\\Scheduler\\Scheduler'] ?? self::getSchedulerService($container)), ($container->services['TYPO3\\CMS\\Scheduler\\Domain\\Repository\\SchedulerTaskRepository'] ?? self::getSchedulerTaskRepositoryService($container)));

        $instance->setName('scheduler:run');
        $instance->setDescription('Start the TYPO3 Scheduler from the command line.');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Scheduler\Command\SchedulerExecuteCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Scheduler\Command\SchedulerExecuteCommand
     */
    protected static function getSchedulerExecuteCommandService($container)
    {
        $container->services['TYPO3\\CMS\\Scheduler\\Command\\SchedulerExecuteCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Scheduler\Command\SchedulerExecuteCommand::class, ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)), ($container->services['TYPO3\\CMS\\Scheduler\\Domain\\Repository\\SchedulerTaskRepository'] ?? self::getSchedulerTaskRepositoryService($container)), ($container->services['TYPO3\\CMS\\Scheduler\\Scheduler'] ?? self::getSchedulerService($container)));

        $instance->setName('scheduler:execute');
        $instance->setDescription('Execute given Scheduler tasks.');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Scheduler\Command\SchedulerListCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Scheduler\Command\SchedulerListCommand
     */
    protected static function getSchedulerListCommandService($container)
    {
        $container->services['TYPO3\\CMS\\Scheduler\\Command\\SchedulerListCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Scheduler\Command\SchedulerListCommand::class, ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)), ($container->services['TYPO3\\CMS\\Scheduler\\Domain\\Repository\\SchedulerTaskRepository'] ?? self::getSchedulerTaskRepositoryService($container)));

        $instance->setName('scheduler:list');
        $instance->setDescription('List all Scheduler tasks.');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Scheduler\Controller\AvailableSchedulerTasksController' shared autowired service.
     *
     * @return \TYPO3\CMS\Scheduler\Controller\AvailableSchedulerTasksController
     */
    protected static function getAvailableSchedulerTasksControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Scheduler\\Controller\\AvailableSchedulerTasksController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Scheduler\Controller\AvailableSchedulerTasksController::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), ($container->services['TYPO3\\CMS\\Core\\Console\\CommandRegistry_decorated_2'] ?? self::getCommandRegistryDecorated2Service($container)), ($container->privates['TYPO3\\CMS\\Scheduler\\Service\\TaskService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Scheduler\Service\TaskService::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Scheduler\Controller\SchedulerModuleController' shared autowired service.
     *
     * @return \TYPO3\CMS\Scheduler\Controller\SchedulerModuleController
     */
    protected static function getSchedulerModuleControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $b = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));

        return $container->services['TYPO3\\CMS\\Scheduler\\Controller\\SchedulerModuleController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Scheduler\Controller\SchedulerModuleController::class, ($container->services['TYPO3\\CMS\\Scheduler\\Scheduler'] ?? self::getSchedulerService($container)), ($container->privates['TYPO3\\CMS\\Scheduler\\Task\\TaskSerializer'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Scheduler\Task\TaskSerializer::class)), ($container->services['TYPO3\\CMS\\Scheduler\\Domain\\Repository\\SchedulerTaskRepository'] ?? self::getSchedulerTaskRepositoryService($container)), $a, $b, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), $a, $b, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)), ($container->privates['TYPO3\\CMS\\Scheduler\\Service\\TaskService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Scheduler\Service\TaskService::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Scheduler\Controller\SchedulerSetupCheckController' shared autowired service.
     *
     * @return \TYPO3\CMS\Scheduler\Controller\SchedulerSetupCheckController
     */
    protected static function getSchedulerSetupCheckControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\Scheduler\\Controller\\SchedulerSetupCheckController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Scheduler\Controller\SchedulerSetupCheckController::class, ($container->services['TYPO3\\CMS\\Core\\Registry'] ?? self::getRegistry2Service($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Scheduler\Domain\Repository\SchedulerTaskRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Scheduler\Domain\Repository\SchedulerTaskRepository
     */
    protected static function getSchedulerTaskRepositoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Scheduler\\Domain\\Repository\\SchedulerTaskRepository'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Scheduler\Domain\Repository\SchedulerTaskRepository::class, ($container->privates['TYPO3\\CMS\\Scheduler\\Task\\TaskSerializer'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Scheduler\Task\TaskSerializer::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Scheduler\Scheduler' shared autowired service.
     *
     * @return \TYPO3\CMS\Scheduler\Scheduler
     */
    protected static function getSchedulerService($container)
    {
        return $container->services['TYPO3\\CMS\\Scheduler\\Scheduler'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Scheduler\Scheduler::class, ($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Scheduler\\Scheduler'), ($container->privates['TYPO3\\CMS\\Scheduler\\Task\\TaskSerializer'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Scheduler\Task\TaskSerializer::class)), ($container->services['TYPO3\\CMS\\Scheduler\\Domain\\Repository\\SchedulerTaskRepository'] ?? self::getSchedulerTaskRepositoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Scheduler\SystemInformation\ToolbarItemProvider' shared autowired service.
     *
     * @return \TYPO3\CMS\Scheduler\SystemInformation\ToolbarItemProvider
     */
    protected static function getToolbarItemProviderService($container)
    {
        return $container->services['TYPO3\\CMS\\Scheduler\\SystemInformation\\ToolbarItemProvider'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Scheduler\SystemInformation\ToolbarItemProvider::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Seo\HrefLang\HrefLangGenerator' shared autowired service.
     *
     * @return \TYPO3\CMS\Seo\HrefLang\HrefLangGenerator
     */
    protected static function getHrefLangGeneratorService($container)
    {
        $a = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer::class, NULL, $container);
        $a->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer'));

        return $container->services['TYPO3\\CMS\\Seo\\HrefLang\\HrefLangGenerator'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Seo\HrefLang\HrefLangGenerator::class, $a, (\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\DataProcessing\LanguageMenuProcessor::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Seo\MetaTag\MetaTagGenerator' shared autowired service.
     *
     * @return \TYPO3\CMS\Seo\MetaTag\MetaTagGenerator
     */
    protected static function getMetaTagGeneratorService($container)
    {
        return $container->services['TYPO3\\CMS\\Seo\\MetaTag\\MetaTagGenerator'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Seo\MetaTag\MetaTagGenerator::class, ($container->services['TYPO3\\CMS\\Core\\MetaTag\\MetaTagManagerRegistry'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\MetaTag\MetaTagManagerRegistry::class)), ($container->services['TYPO3\\CMS\\Extbase\\Service\\ImageService'] ?? self::getImageServiceService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Seo\PageTitle\SeoTitlePageTitleProvider' shared autowired service.
     *
     * @return \TYPO3\CMS\Seo\PageTitle\SeoTitlePageTitleProvider
     */
    protected static function getSeoTitlePageTitleProviderService($container)
    {
        return $container->services['TYPO3\\CMS\\Seo\\PageTitle\\SeoTitlePageTitleProvider'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Seo\PageTitle\SeoTitlePageTitleProvider::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Seo\XmlSitemap\XmlSitemapRenderer' shared autowired service.
     *
     * @return \TYPO3\CMS\Seo\XmlSitemap\XmlSitemapRenderer
     */
    protected static function getXmlSitemapRendererService($container)
    {
        return $container->services['TYPO3\\CMS\\Seo\\XmlSitemap\\XmlSitemapRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Seo\XmlSitemap\XmlSitemapRenderer::class, ($container->services['TYPO3\\CMS\\Core\\TypoScript\\TypoScriptService'] ?? self::getTypoScriptServiceService($container)), ($container->services['TYPO3\\CMS\\Fluid\\Core\\Rendering\\RenderingContextFactory'] ?? self::getRenderingContextFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Setup\Controller\SetupModuleController' autowired service.
     *
     * @return \TYPO3\CMS\Setup\Controller\SetupModuleController
     */
    protected static function getSetupModuleControllerService($container)
    {
        $container->factories['TYPO3\\CMS\\Setup\\Controller\\SetupModuleController'] = function ($container) {
            $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
            $b = ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container));
            $c = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));
            $d = ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container));

            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Setup\Controller\SetupModuleController::class, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->services['TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaProviderRegistry'] ?? self::getMfaProviderRegistryService($container)), $a, $b, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, $c, $d, ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), ($container->services['TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory'] ?? self::getLanguageServiceFactoryService($container)), $d, $c, ($container->services['TYPO3\\CMS\\Core\\FormProtection\\FormProtectionFactory'] ?? self::getFormProtectionFactoryService($container)), ($container->services['TYPO3\\CMS\\Core\\Localization\\Locales'] ?? self::getLocalesService($container)));
        };

        return $container->factories['TYPO3\\CMS\\Setup\\Controller\\SetupModuleController']($container);
    }

    /**
     * Gets the public 'TYPO3\CMS\SysNote\Provider\ButtonBarProvider' shared autowired service.
     *
     * @return \TYPO3\CMS\SysNote\Provider\ButtonBarProvider
     */
    protected static function getButtonBarProviderService($container)
    {
        return $container->services['TYPO3\\CMS\\SysNote\\Provider\\ButtonBarProvider'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\SysNote\Provider\ButtonBarProvider::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\SysNote\Provider\InfoModuleProvider' shared autowired service.
     *
     * @return \TYPO3\CMS\SysNote\Provider\InfoModuleProvider
     */
    protected static function getInfoModuleProviderService($container)
    {
        return $container->services['TYPO3\\CMS\\SysNote\\Provider\\InfoModuleProvider'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\SysNote\Provider\InfoModuleProvider::class, ($container->privates['TYPO3\\CMS\\SysNote\\Renderer\\NoteRenderer'] ?? self::getNoteRendererService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\SysNote\Provider\PageModuleProvider' shared autowired service.
     *
     * @return \TYPO3\CMS\SysNote\Provider\PageModuleProvider
     */
    protected static function getPageModuleProviderService($container)
    {
        return $container->services['TYPO3\\CMS\\SysNote\\Provider\\PageModuleProvider'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\SysNote\Provider\PageModuleProvider::class, ($container->privates['TYPO3\\CMS\\SysNote\\Renderer\\NoteRenderer'] ?? self::getNoteRendererService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\SysNote\Provider\RecordListProvider' shared autowired service.
     *
     * @return \TYPO3\CMS\SysNote\Provider\RecordListProvider
     */
    protected static function getRecordListProviderService($container)
    {
        return $container->services['TYPO3\\CMS\\SysNote\\Provider\\RecordListProvider'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\SysNote\Provider\RecordListProvider::class, ($container->privates['TYPO3\\CMS\\SysNote\\Renderer\\NoteRenderer'] ?? self::getNoteRendererService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\T3editor\Controller\CodeCompletionController' shared autowired service.
     *
     * @return \TYPO3\CMS\T3editor\Controller\CodeCompletionController
     */
    protected static function getCodeCompletionControllerService($container)
    {
        return $container->services['TYPO3\\CMS\\T3editor\\Controller\\CodeCompletionController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\T3editor\Controller\CodeCompletionController::class, ($container->services['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\SysTemplateRepository'] ?? self::getSysTemplateRepositoryService($container)), ($container->services['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\SysTemplateTreeBuilder'] ?? self::getSysTemplateTreeBuilderService($container)), ($container->privates['TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\LossyTokenizer'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\TypoScript\Tokenizer\LossyTokenizer::class)), ($container->privates['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Traverser\\IncludeTreeTraverser'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\TypoScript\IncludeTree\Traverser\IncludeTreeTraverser::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\T3editor\EventListener\InitializeT3editorInEditFileForm' shared autowired service.
     *
     * @return \TYPO3\CMS\T3editor\EventListener\InitializeT3editorInEditFileForm
     */
    protected static function getInitializeT3editorInEditFileFormService($container)
    {
        return $container->services['TYPO3\\CMS\\T3editor\\EventListener\\InitializeT3editorInEditFileForm'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\T3editor\EventListener\InitializeT3editorInEditFileForm::class, ($container->services['TYPO3\\CMS\\T3editor\\Registry\\ModeRegistry'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\T3editor\Registry\ModeRegistry::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\T3editor\Registry\AddonRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\T3editor\Registry\AddonRegistry
     */
    protected static function getAddonRegistryService($container)
    {
        return $container->services['TYPO3\\CMS\\T3editor\\Registry\\AddonRegistry'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\T3editor\Registry\AddonRegistry::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\T3editor\Registry\ModeRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\T3editor\Registry\ModeRegistry
     */
    protected static function getModeRegistryService($container)
    {
        return $container->services['TYPO3\\CMS\\T3editor\\Registry\\ModeRegistry'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\T3editor\Registry\ModeRegistry::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\T3editor\T3editor' shared autowired service.
     *
     * @return \TYPO3\CMS\T3editor\T3editor
     */
    protected static function getT3editorService($container)
    {
        return $container->services['TYPO3\\CMS\\T3editor\\T3editor'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\T3editor\T3editor::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Tstemplate\Controller\ActiveTypoScriptController' shared autowired service.
     *
     * @return \TYPO3\CMS\Tstemplate\Controller\ActiveTypoScriptController
     */
    protected static function getActiveTypoScriptControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $b = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));
        $c = ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container));

        $container->services['TYPO3\\CMS\\Tstemplate\\Controller\\ActiveTypoScriptController'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Tstemplate\Controller\ActiveTypoScriptController::class, $container, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), $a, $b, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), $c, ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), $c, ($container->services['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\SysTemplateRepository'] ?? self::getSysTemplateRepositoryService($container)), ($container->services['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\SysTemplateTreeBuilder'] ?? self::getSysTemplateTreeBuilderService($container)));

        $instance->injectIconFactory($a);
        $instance->injectUriBuilder($b);
        $instance->injectConnectionPool(($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)));
        $instance->injectDataHandler(($container->privates['TYPO3\\CMS\\Core\\DataHandling\\DataHandler'] ?? self::getDataHandlerService($container)));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Tstemplate\Controller\ConstantEditorController' shared autowired service.
     *
     * @return \TYPO3\CMS\Tstemplate\Controller\ConstantEditorController
     */
    protected static function getConstantEditorControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $b = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));

        $container->services['TYPO3\\CMS\\Tstemplate\\Controller\\ConstantEditorController'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Tstemplate\Controller\ConstantEditorController::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), $a, $b, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), ($container->services['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\SysTemplateRepository'] ?? self::getSysTemplateRepositoryService($container)), ($container->services['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\SysTemplateTreeBuilder'] ?? self::getSysTemplateTreeBuilderService($container)), ($container->privates['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Traverser\\IncludeTreeTraverser'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\TypoScript\IncludeTree\Traverser\IncludeTreeTraverser::class)), ($container->services['TYPO3\\CMS\\Core\\TypoScript\\AST\\Traverser\\AstTraverser'] ?? self::getAstTraverserService($container)), ($container->services['TYPO3\\CMS\\Core\\TypoScript\\AST\\AstBuilder'] ?? self::getAstBuilderService($container)), ($container->services['TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\LosslessTokenizer'] ?? self::getLosslessTokenizerService($container)));

        $instance->injectIconFactory($a);
        $instance->injectUriBuilder($b);
        $instance->injectConnectionPool(($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)));
        $instance->injectDataHandler(($container->privates['TYPO3\\CMS\\Core\\DataHandling\\DataHandler'] ?? self::getDataHandlerService($container)));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Tstemplate\Controller\InfoModifyController' shared autowired service.
     *
     * @return \TYPO3\CMS\Tstemplate\Controller\InfoModifyController
     */
    protected static function getInfoModifyControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $b = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));

        $container->services['TYPO3\\CMS\\Tstemplate\\Controller\\InfoModifyController'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Tstemplate\Controller\InfoModifyController::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), $a, $b, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))));

        $instance->injectIconFactory($a);
        $instance->injectUriBuilder($b);
        $instance->injectConnectionPool(($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)));
        $instance->injectDataHandler(($container->privates['TYPO3\\CMS\\Core\\DataHandling\\DataHandler'] ?? self::getDataHandlerService($container)));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Tstemplate\Controller\TemplateAnalyzerController' shared autowired service.
     *
     * @return \TYPO3\CMS\Tstemplate\Controller\TemplateAnalyzerController
     */
    protected static function getTemplateAnalyzerControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $b = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));

        $container->services['TYPO3\\CMS\\Tstemplate\\Controller\\TemplateAnalyzerController'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Tstemplate\Controller\TemplateAnalyzerController::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), $a, $b, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), ($container->services['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\SysTemplateRepository'] ?? self::getSysTemplateRepositoryService($container)), ($container->privates['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Traverser\\IncludeTreeTraverser'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\TypoScript\IncludeTree\Traverser\IncludeTreeTraverser::class)), ($container->privates['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\Traverser\\ConditionVerdictAwareIncludeTreeTraverser'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\TypoScript\IncludeTree\Traverser\ConditionVerdictAwareIncludeTreeTraverser::class)), ($container->services['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\SysTemplateTreeBuilder'] ?? self::getSysTemplateTreeBuilderService($container)), ($container->services['TYPO3\\CMS\\Core\\TypoScript\\Tokenizer\\LosslessTokenizer'] ?? self::getLosslessTokenizerService($container)), ($container->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class)), ($container->services['Psr\\Http\\Message\\StreamFactoryInterface'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class)));

        $instance->injectIconFactory($a);
        $instance->injectUriBuilder($b);
        $instance->injectConnectionPool(($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)));
        $instance->injectDataHandler(($container->privates['TYPO3\\CMS\\Core\\DataHandling\\DataHandler'] ?? self::getDataHandlerService($container)));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Tstemplate\Controller\TemplateRecordsOverviewController' shared autowired service.
     *
     * @return \TYPO3\CMS\Tstemplate\Controller\TemplateRecordsOverviewController
     */
    protected static function getTemplateRecordsOverviewControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $b = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));

        $container->services['TYPO3\\CMS\\Tstemplate\\Controller\\TemplateRecordsOverviewController'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Tstemplate\Controller\TemplateRecordsOverviewController::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), $a, $b, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))));

        $instance->injectIconFactory($a);
        $instance->injectUriBuilder($b);
        $instance->injectConnectionPool(($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)));
        $instance->injectDataHandler(($container->privates['TYPO3\\CMS\\Core\\DataHandling\\DataHandler'] ?? self::getDataHandlerService($container)));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Tstemplate\Hooks\DataHandlerClearCachePostProcHook' shared autowired service.
     *
     * @return \TYPO3\CMS\Tstemplate\Hooks\DataHandlerClearCachePostProcHook
     */
    protected static function getDataHandlerClearCachePostProcHookService($container)
    {
        return $container->services['TYPO3\\CMS\\Tstemplate\\Hooks\\DataHandlerClearCachePostProcHook'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Tstemplate\Hooks\DataHandlerClearCachePostProcHook::class, ($container->services['TYPO3\\CMS\\Core\\Cache\\CacheManager'] ?? self::getCacheManagerService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Viewpage\Controller\ViewModuleController' shared autowired service.
     *
     * @return \TYPO3\CMS\Viewpage\Controller\ViewModuleController
     */
    protected static function getViewModuleControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $b = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));

        return $container->services['TYPO3\\CMS\\Viewpage\\Controller\\ViewModuleController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Viewpage\Controller\ViewModuleController::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), $a, $b, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), $a, $b, ($container->privates['TYPO3\\CMS\\Core\\Domain\\Repository\\PageRepository'] ?? self::getPageRepositoryService($container)), ($container->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? self::getSiteFinderService($container)), ($container->services['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\PolicyRegistry'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Security\ContentSecurityPolicy\PolicyRegistry::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Webhooks\Controller\ManagementController' shared autowired service.
     *
     * @return \TYPO3\CMS\Webhooks\Controller\ManagementController
     */
    protected static function getManagementController3Service($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));
        $b = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));

        return $container->services['TYPO3\\CMS\\Webhooks\\Controller\\ManagementController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Webhooks\Controller\ManagementController::class, $a, $b, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), $b, $a, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), ($container->services['TYPO3\\CMS\\Webhooks\\WebhookTypesRegistry'] ?? self::getWebhookTypesRegistryService($container)), ($container->services['TYPO3\\CMS\\Webhooks\\Repository\\WebhookRepository'] ?? self::getWebhookRepositoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Webhooks\Listener\MessageListener' shared autowired service.
     *
     * @return \TYPO3\CMS\Webhooks\Listener\MessageListener
     */
    protected static function getMessageListenerService($container)
    {
        return $container->services['TYPO3\\CMS\\Webhooks\\Listener\\MessageListener'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Webhooks\Listener\MessageListener::class, ($container->privates['messenger.bus.default'] ?? self::getMessenger_Bus_DefaultService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Webhooks\Message\WebhookMessageFactory::class, ($container->services['TYPO3\\CMS\\Webhooks\\WebhookTypesRegistry'] ?? self::getWebhookTypesRegistryService($container))), ($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Webhooks\\Listener\\MessageListener'));
    }

    /**
     * Gets the public 'TYPO3\CMS\Webhooks\Listener\PageModificationListener' shared autowired service.
     *
     * @return \TYPO3\CMS\Webhooks\Listener\PageModificationListener
     */
    protected static function getPageModificationListenerService($container)
    {
        return $container->services['TYPO3\\CMS\\Webhooks\\Listener\\PageModificationListener'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Webhooks\Listener\PageModificationListener::class, ($container->privates['messenger.bus.default'] ?? self::getMessenger_Bus_DefaultService($container)), ($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Webhooks\\Listener\\PageModificationListener'), ($container->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? self::getSiteFinderService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Webhooks\MessageHandler\WebhookMessageHandler' shared autowired service.
     *
     * @return \TYPO3\CMS\Webhooks\MessageHandler\WebhookMessageHandler
     */
    protected static function getWebhookMessageHandlerService($container)
    {
        return $container->services['TYPO3\\CMS\\Webhooks\\MessageHandler\\WebhookMessageHandler'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Webhooks\MessageHandler\WebhookMessageHandler::class, ($container->services['TYPO3\\CMS\\Webhooks\\Repository\\WebhookRepository'] ?? self::getWebhookRepositoryService($container)), ($container->services['TYPO3\\CMS\\Core\\Http\\RequestFactory'] ?? self::getRequestFactoryService($container)), ($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Webhooks\\MessageHandler\\WebhookMessageHandler'));
    }

    /**
     * Gets the public 'TYPO3\CMS\Webhooks\Repository\WebhookRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Webhooks\Repository\WebhookRepository
     */
    protected static function getWebhookRepositoryService($container)
    {
        return $container->services['TYPO3\\CMS\\Webhooks\\Repository\\WebhookRepository'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Webhooks\Repository\WebhookRepository::class, ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)), ($container->privates['cache.runtime'] ?? self::getCache_RuntimeService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Webhooks\Tca\ItemsProcFunc\WebhookTypesItemsProcFunc' shared autowired service.
     *
     * @return \TYPO3\CMS\Webhooks\Tca\ItemsProcFunc\WebhookTypesItemsProcFunc
     */
    protected static function getWebhookTypesItemsProcFuncService($container)
    {
        return $container->services['TYPO3\\CMS\\Webhooks\\Tca\\ItemsProcFunc\\WebhookTypesItemsProcFunc'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Webhooks\Tca\ItemsProcFunc\WebhookTypesItemsProcFunc::class, ($container->services['TYPO3\\CMS\\Webhooks\\WebhookTypesRegistry'] ?? self::getWebhookTypesRegistryService($container)), ($container->services['TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory'] ?? self::getLanguageServiceFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Webhooks\WebhookTypesRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Webhooks\WebhookTypesRegistry
     */
    protected static function getWebhookTypesRegistryService($container)
    {
        $container->services['TYPO3\\CMS\\Webhooks\\WebhookTypesRegistry'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Webhooks\WebhookTypesRegistry::class);

        $instance->addWebhookType('typo3/redirect-was-hit', 'LLL:EXT:redirects/Resources/Private/Language/locallang_db.xlf:sys_redirect.webhook_type.typo3-redirect-was-hit', 'TYPO3\\CMS\\Redirects\\Message\\RedirectWasHitMessage', 'createFromEvent', 'TYPO3\\CMS\\Redirects\\Event\\RedirectWasHitEvent');
        $instance->addWebhookType('typo3/file-added', 'LLL:EXT:webhooks/Resources/Private/Language/locallang_db.xlf:sys_webhook.webhook_type.typo3-file-added', 'TYPO3\\CMS\\Webhooks\\Message\\FileAddedMessage', 'createFromEvent', 'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileAddedEvent');
        $instance->addWebhookType('typo3/file-removed', 'LLL:EXT:webhooks/Resources/Private/Language/locallang_db.xlf:sys_webhook.webhook_type.typo3-file-removed', 'TYPO3\\CMS\\Webhooks\\Message\\FileRemovedMessage', 'createFromEvent', 'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileDeletedEvent');
        $instance->addWebhookType('typo3/file-updated', 'LLL:EXT:webhooks/Resources/Private/Language/locallang_db.xlf:sys_webhook.webhook_type.typo3-file-updated', 'TYPO3\\CMS\\Webhooks\\Message\\FileUpdatedMessage', 'createFromEvent', 'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileUpdatedInIndexEvent');
        $instance->addWebhookType('typo3/login-error', 'LLL:EXT:webhooks/Resources/Private/Language/locallang_db.xlf:sys_webhook.webhook_type.typo3-login-error', 'TYPO3\\CMS\\Webhooks\\Message\\LoginErrorOccurredMessage', 'createFromEvent', 'TYPO3\\CMS\\Core\\Authentication\\Event\\LoginAttemptFailedEvent');
        $instance->addWebhookType('typo3/mfa-error', 'LLL:EXT:webhooks/Resources/Private/Language/locallang_db.xlf:sys_webhook.webhook_type.typo3-mfa-error', 'TYPO3\\CMS\\Webhooks\\Message\\MfaVerificationErrorOccurredMessage', 'createFromEvent', 'TYPO3\\CMS\\Core\\Authentication\\Event\\MfaVerificationFailedEvent');
        $instance->addWebhookType('typo3/content/page-modification', 'LLL:EXT:webhooks/Resources/Private/Language/locallang_db.xlf:sys_webhook.webhook_type.typo3-content-page-modification', 'TYPO3\\CMS\\Webhooks\\Message\\PageModificationMessage', 'createFromEvent', NULL);

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Command\AutoPublishCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Command\AutoPublishCommand
     */
    protected static function getAutoPublishCommandService($container)
    {
        $container->services['TYPO3\\CMS\\Workspaces\\Command\\AutoPublishCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Command\AutoPublishCommand::class, ($container->services['TYPO3\\CMS\\Workspaces\\Service\\WorkspaceService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\WorkspaceService::class)), ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)));

        $instance->setName('workspace:autopublish');
        $instance->setDescription('Publish a workspace with a publication date.');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Command\CleanupPreviewLinksCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Command\CleanupPreviewLinksCommand
     */
    protected static function getCleanupPreviewLinksCommandService($container)
    {
        $container->services['TYPO3\\CMS\\Workspaces\\Command\\CleanupPreviewLinksCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Command\CleanupPreviewLinksCommand::class, ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)));

        $instance->setName('cleanup:previewlinks');
        $instance->setDescription('Clean up expired preview links from shared workspace previews.');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Command\WorkspaceVersionRecordsCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Command\WorkspaceVersionRecordsCommand
     */
    protected static function getWorkspaceVersionRecordsCommandService($container)
    {
        $container->services['TYPO3\\CMS\\Workspaces\\Command\\WorkspaceVersionRecordsCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Command\WorkspaceVersionRecordsCommand::class, ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)));

        $instance->setName('cleanup:versions');
        $instance->setDescription('Find all versioned records and possibly cleans up invalid records in the database.');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Controller\AjaxController' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Controller\AjaxController
     */
    protected static function getAjaxController2Service($container)
    {
        return $container->services['TYPO3\\CMS\\Workspaces\\Controller\\AjaxController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Controller\AjaxController::class, ($container->services['TYPO3\\CMS\\Workspaces\\Service\\WorkspaceService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\WorkspaceService::class)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Controller\PreviewController' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Controller\PreviewController
     */
    protected static function getPreviewControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container));
        $b = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));

        return $container->services['TYPO3\\CMS\\Workspaces\\Controller\\PreviewController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Controller\PreviewController::class, ($container->services['TYPO3\\CMS\\Workspaces\\Service\\StagesService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\StagesService::class)), ($container->services['TYPO3\\CMS\\Workspaces\\Service\\WorkspaceService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\WorkspaceService::class)), $a, $b, ($container->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? self::getSiteFinderService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $a, ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), $b, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Controller\Remote\ActionHandler' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Controller\Remote\ActionHandler
     */
    protected static function getActionHandlerService($container)
    {
        return $container->services['TYPO3\\CMS\\Workspaces\\Controller\\Remote\\ActionHandler'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Controller\Remote\ActionHandler::class, ($container->services['TYPO3\\CMS\\Workspaces\\Service\\StagesService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\StagesService::class)), ($container->services['TYPO3\\CMS\\Workspaces\\Service\\WorkspaceService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\WorkspaceService::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Controller\Remote\RemoteServer' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Controller\Remote\RemoteServer
     */
    protected static function getRemoteServerService($container)
    {
        return $container->services['TYPO3\\CMS\\Workspaces\\Controller\\Remote\\RemoteServer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Controller\Remote\RemoteServer::class, ($container->services['TYPO3\\CMS\\Workspaces\\Service\\GridDataService'] ?? self::getGridDataServiceService($container)), ($container->services['TYPO3\\CMS\\Workspaces\\Service\\StagesService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\StagesService::class)), ($container->services['TYPO3\\CMS\\Workspaces\\Service\\WorkspaceService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\WorkspaceService::class)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\View\ValueFormatter\FlexFormValueFormatter::class));
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Controller\ReviewController' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Controller\ReviewController
     */
    protected static function getReviewControllerService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container));
        $b = ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container));
        $c = ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container));

        return $container->services['TYPO3\\CMS\\Workspaces\\Controller\\ReviewController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Controller\ReviewController::class, ($container->services['TYPO3\\CMS\\Workspaces\\Service\\WorkspaceService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\WorkspaceService::class)), ($container->services['TYPO3\\CMS\\Workspaces\\Service\\StagesService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\StagesService::class)), $a, $b, $c, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, $c, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? self::getFlashMessageServiceService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container))), ($container->privates['TYPO3\\CMS\\Backend\\Configuration\\TranslationConfigurationProvider'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Configuration\TranslationConfigurationProvider::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\EventListener\PageTreeItemsHighlighter' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\EventListener\PageTreeItemsHighlighter
     */
    protected static function getPageTreeItemsHighlighterService($container)
    {
        return $container->services['TYPO3\\CMS\\Workspaces\\EventListener\\PageTreeItemsHighlighter'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\EventListener\PageTreeItemsHighlighter::class, ($container->services['TYPO3\\CMS\\Workspaces\\Service\\WorkspaceService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\WorkspaceService::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Hook\BackendUtilityHook' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Hook\BackendUtilityHook
     */
    protected static function getBackendUtilityHookService($container)
    {
        return $container->services['TYPO3\\CMS\\Workspaces\\Hook\\BackendUtilityHook'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Hook\BackendUtilityHook::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Hook\DataHandlerHook' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Hook\DataHandlerHook
     */
    protected static function getDataHandlerHook2Service($container)
    {
        return $container->services['TYPO3\\CMS\\Workspaces\\Hook\\DataHandlerHook'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Hook\DataHandlerHook::class, ($container->privates['messenger.bus.default'] ?? self::getMessenger_Bus_DefaultService($container)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\MessageHandler\StageChangeNotificationHandler' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\MessageHandler\StageChangeNotificationHandler
     */
    protected static function getStageChangeNotificationHandlerService($container)
    {
        return $container->services['TYPO3\\CMS\\Workspaces\\MessageHandler\\StageChangeNotificationHandler'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\MessageHandler\StageChangeNotificationHandler::class, ($container->services['TYPO3\\CMS\\Workspaces\\Notification\\StageChangeNotification'] ?? self::getStageChangeNotificationService($container)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Middleware\WorkspacePreview' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Middleware\WorkspacePreview
     */
    protected static function getWorkspacePreviewService($container)
    {
        return $container->services['TYPO3\\CMS\\Workspaces\\Middleware\\WorkspacePreview'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Middleware\WorkspacePreview::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Middleware\WorkspacePreviewPermissions' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Middleware\WorkspacePreviewPermissions
     */
    protected static function getWorkspacePreviewPermissionsService($container)
    {
        return $container->services['TYPO3\\CMS\\Workspaces\\Middleware\\WorkspacePreviewPermissions'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Middleware\WorkspacePreviewPermissions::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Notification\StageChangeNotification' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Notification\StageChangeNotification
     */
    protected static function getStageChangeNotificationService($container)
    {
        $container->services['TYPO3\\CMS\\Workspaces\\Notification\\StageChangeNotification'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Notification\StageChangeNotification::class, ($container->services['TYPO3\\CMS\\Workspaces\\Service\\StagesService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\StagesService::class)), ($container->services['TYPO3\\CMS\\Workspaces\\Preview\\PreviewUriBuilder'] ?? self::getPreviewUriBuilderService($container)), ($container->services['TYPO3\\CMS\\Core\\Mail\\Mailer'] ?? self::getMailerService($container)));

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Workspaces\\Notification\\StageChangeNotification'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Preview\PreviewUriBuilder' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Preview\PreviewUriBuilder
     */
    protected static function getPreviewUriBuilderService($container)
    {
        return $container->services['TYPO3\\CMS\\Workspaces\\Preview\\PreviewUriBuilder'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Preview\PreviewUriBuilder::class, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->services['TYPO3\\CMS\\Workspaces\\Service\\WorkspaceService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\WorkspaceService::class)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Service\Dependency\CollectionService' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Service\Dependency\CollectionService
     */
    protected static function getCollectionServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Workspaces\\Service\\Dependency\\CollectionService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\Dependency\CollectionService::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Service\GridDataService' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Service\GridDataService
     */
    protected static function getGridDataServiceService($container)
    {
        $container->services['TYPO3\\CMS\\Workspaces\\Service\\GridDataService'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\GridDataService::class, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->services['TYPO3\\CMS\\Workspaces\\Service\\WorkspaceService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\WorkspaceService::class)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)));

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Workspaces\\Service\\GridDataService'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Service\HistoryService' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Service\HistoryService
     */
    protected static function getHistoryServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Workspaces\\Service\\HistoryService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\HistoryService::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Service\RecordService' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Service\RecordService
     */
    protected static function getRecordServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Workspaces\\Service\\RecordService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\RecordService::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Service\StagesService' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Service\StagesService
     */
    protected static function getStagesServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Workspaces\\Service\\StagesService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\StagesService::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Service\WorkspaceService' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Service\WorkspaceService
     */
    protected static function getWorkspaceServiceService($container)
    {
        return $container->services['TYPO3\\CMS\\Workspaces\\Service\\WorkspaceService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\WorkspaceService::class);
    }

    /**
     * Gets the public 'backend.middlewares' shared service.
     *
     * @return \ArrayObject
     */
    protected static function getBackend_MiddlewaresService($container)
    {
        return $container->services['backend.middlewares'] = \TYPO3\CMS\Backend\ServiceProvider::getBackendMiddlewares($container);
    }

    /**
     * Gets the public 'backend.modules.warmer' shared service.
     *
     * @return \Closure
     */
    protected static function getBackend_Modules_WarmerService($container)
    {
        return $container->services['backend.modules.warmer'] = \TYPO3\CMS\Backend\ServiceProvider::getBackendModulesWarmer($container);
    }

    /**
     * Gets the public 'backend.modules_decorated_42' shared service.
     *
     * @return \ArrayObject
     */
    protected static function getBackend_ModulesDecorated42Service($container)
    {
        $a = ($container->services['service_provider_registry'] ?? $container->get('service_provider_registry', 1));

        return $container->services['backend.modules_decorated_42'] = $a->extendService('typo3_auto_login', 'backend.modules', $container, $a->extendService('bw_focuspoint_images', 'backend.modules', $container, $a->extendService('calendarize', 'backend.modules', $container, $a->extendService('muldenland', 'backend.modules', $container, $a->extendService('container', 'backend.modules', $container, $a->extendService('news', 'backend.modules', $container, $a->extendService('workspaces', 'backend.modules', $container, $a->extendService('viewpage', 'backend.modules', $container, $a->extendService('tstemplate', 'backend.modules', $container, $a->extendService('t3editor', 'backend.modules', $container, $a->extendService('sys_note', 'backend.modules', $container, $a->extendService('opendocs', 'backend.modules', $container, $a->extendService('filemetadata', 'backend.modules', $container, $a->extendService('felogin', 'backend.modules', $container, $a->extendService('extensionmanager', 'backend.modules', $container, $a->extendService('beuser', 'backend.modules', $container, $a->extendService('belog', 'backend.modules', $container, $a->extendService('webhooks', 'backend.modules', $container, $a->extendService('rte_ckeditor', 'backend.modules', $container, $a->extendService('setup', 'backend.modules', $container, $a->extendService('recycler', 'backend.modules', $container, $a->extendService('reactions', 'backend.modules', $container, $a->extendService('indexed_search', 'backend.modules', $container, $a->extendService('linkvalidator', 'backend.modules', $container, $a->extendService('info', 'backend.modules', $container, $a->extendService('seo', 'backend.modules', $container, $a->extendService('redirects', 'backend.modules', $container, $a->extendService('reports', 'backend.modules', $container, $a->extendService('fluid_styled_content', 'backend.modules', $container, $a->extendService('form', 'backend.modules', $container, $a->extendService('lowlevel', 'backend.modules', $container, $a->extendService('impexp', 'backend.modules', $container, $a->extendService('filelist', 'backend.modules', $container, \TYPO3\CMS\Dashboard\ServiceProvider::configureBackendModules($container, $a->extendService('adminpanel', 'backend.modules', $container, \TYPO3\CMS\Frontend\ServiceProvider::configureBackendModules($container, \TYPO3\CMS\Backend\ServiceProvider::configureBackendModules($container, \TYPO3\CMS\Install\ServiceProvider::configureBackendModules($container, \TYPO3\CMS\Fluid\ServiceProvider::configureBackendModules($container, \TYPO3\CMS\Extbase\ServiceProvider::configureBackendModules($container, $a->extendService('scheduler', 'backend.modules', $container, \TYPO3\CMS\Core\ServiceProvider::configureBackendModules($container, \TYPO3\CMS\Backend\ServiceProvider::getBackendModules($container)))))))))))))))))))))))))))))))))))))))))));
    }

    /**
     * Gets the public 'backend.routes.warmer' shared service.
     *
     * @return \Closure
     */
    protected static function getBackend_Routes_WarmerService($container)
    {
        return $container->services['backend.routes.warmer'] = \TYPO3\CMS\Backend\ServiceProvider::getBackendRoutesWarmer($container);
    }

    /**
     * Gets the public 'backend.routes_decorated_42' shared service.
     *
     * @return \ArrayObject
     */
    protected static function getBackend_RoutesDecorated42Service($container)
    {
        $a = ($container->services['service_provider_registry'] ?? $container->get('service_provider_registry', 1));

        return $container->services['backend.routes_decorated_42'] = $a->extendService('typo3_auto_login', 'backend.routes', $container, $a->extendService('bw_focuspoint_images', 'backend.routes', $container, $a->extendService('calendarize', 'backend.routes', $container, $a->extendService('muldenland', 'backend.routes', $container, $a->extendService('container', 'backend.routes', $container, $a->extendService('news', 'backend.routes', $container, $a->extendService('workspaces', 'backend.routes', $container, $a->extendService('viewpage', 'backend.routes', $container, $a->extendService('tstemplate', 'backend.routes', $container, $a->extendService('t3editor', 'backend.routes', $container, $a->extendService('sys_note', 'backend.routes', $container, $a->extendService('opendocs', 'backend.routes', $container, $a->extendService('filemetadata', 'backend.routes', $container, $a->extendService('felogin', 'backend.routes', $container, $a->extendService('extensionmanager', 'backend.routes', $container, $a->extendService('beuser', 'backend.routes', $container, $a->extendService('belog', 'backend.routes', $container, $a->extendService('webhooks', 'backend.routes', $container, $a->extendService('rte_ckeditor', 'backend.routes', $container, $a->extendService('setup', 'backend.routes', $container, $a->extendService('recycler', 'backend.routes', $container, $a->extendService('reactions', 'backend.routes', $container, $a->extendService('indexed_search', 'backend.routes', $container, $a->extendService('linkvalidator', 'backend.routes', $container, $a->extendService('info', 'backend.routes', $container, $a->extendService('seo', 'backend.routes', $container, $a->extendService('redirects', 'backend.routes', $container, $a->extendService('reports', 'backend.routes', $container, $a->extendService('fluid_styled_content', 'backend.routes', $container, $a->extendService('form', 'backend.routes', $container, $a->extendService('lowlevel', 'backend.routes', $container, $a->extendService('impexp', 'backend.routes', $container, $a->extendService('filelist', 'backend.routes', $container, \TYPO3\CMS\Dashboard\ServiceProvider::configureBackendRoutes($container, $a->extendService('adminpanel', 'backend.routes', $container, \TYPO3\CMS\Frontend\ServiceProvider::configureBackendRoutes($container, \TYPO3\CMS\Backend\ServiceProvider::configureBackendRoutes($container, \TYPO3\CMS\Install\ServiceProvider::configureBackendRoutes($container, \TYPO3\CMS\Fluid\ServiceProvider::configureBackendRoutes($container, \TYPO3\CMS\Extbase\ServiceProvider::configureBackendRoutes($container, $a->extendService('scheduler', 'backend.routes', $container, \TYPO3\CMS\Core\ServiceProvider::configureBackendRoutes($container, \TYPO3\CMS\Backend\ServiceProvider::getBackendRoutes($container)))))))))))))))))))))))))))))))))))))))))));
    }

    /**
     * Gets the public 'calendarizeIndexAmountWidgetConfiguration' shared service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration
     */
    protected static function getCalendarizeIndexAmountWidgetConfigurationService($container)
    {
        return $container->services['calendarizeIndexAmountWidgetConfiguration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration::class, 'calendarizeIndexAmount', 'dashboard.widgets.calendarizeIndexAmount', ['calendarizegroup'], 'LLL:EXT:calendarize/Resources/Private/Language/locallang.xlf:calendarizeIndexAmount.title', 'LLL:EXT:calendarize/Resources/Private/Language/locallang.xlf:calendarizeIndexAmount.description', 'ext-calendarize-wizard-icon', 'small', 'small', []);
    }

    /**
     * Gets the public 'calendarizeNextEventsWidgetConfiguration' shared service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration
     */
    protected static function getCalendarizeNextEventsWidgetConfigurationService($container)
    {
        return $container->services['calendarizeNextEventsWidgetConfiguration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration::class, 'calendarizeNextEvents', 'dashboard.widgets.calendarizeNextEvents', ['calendarizegroup'], 'LLL:EXT:calendarize/Resources/Private/Language/locallang.xlf:calendarizeNextEvents.title', 'LLL:EXT:calendarize/Resources/Private/Language/locallang.xlf:calendarizeNextEvents.description', 'ext-calendarize-wizard-icon', 'medium', 'medium', []);
    }

    /**
     * Gets the public 'container.env_var_processors_locator' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected static function getContainer_EnvVarProcessorsLocatorService($container)
    {
        return $container->services['container.env_var_processors_locator'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\Symfony\Component\DependencyInjection\Argument\ServiceLocator::class, $container->getService ??= $container->getService(...), [
            'TYPO3' => ['privates', 'TYPO3\\CMS\\Core\\DependencyInjection\\EnvVarProcessor', 'getEnvVarProcessorService', false],
        ], [
            'TYPO3' => '?',
        ]);
    }

    /**
     * Gets the public 'content.security.policies_decorated_41' shared service.
     *
     * @return \TYPO3\CMS\Core\Type\Map
     */
    protected static function getContent_Security_PoliciesDecorated41Service($container)
    {
        $a = ($container->services['service_provider_registry'] ?? $container->get('service_provider_registry', 1));

        return $container->services['content.security.policies_decorated_41'] = $a->extendService('typo3_auto_login', 'content.security.policies', $container, $a->extendService('bw_focuspoint_images', 'content.security.policies', $container, $a->extendService('calendarize', 'content.security.policies', $container, $a->extendService('muldenland', 'content.security.policies', $container, $a->extendService('container', 'content.security.policies', $container, $a->extendService('news', 'content.security.policies', $container, $a->extendService('workspaces', 'content.security.policies', $container, $a->extendService('viewpage', 'content.security.policies', $container, $a->extendService('tstemplate', 'content.security.policies', $container, $a->extendService('t3editor', 'content.security.policies', $container, $a->extendService('sys_note', 'content.security.policies', $container, $a->extendService('opendocs', 'content.security.policies', $container, $a->extendService('filemetadata', 'content.security.policies', $container, $a->extendService('felogin', 'content.security.policies', $container, $a->extendService('extensionmanager', 'content.security.policies', $container, $a->extendService('beuser', 'content.security.policies', $container, $a->extendService('belog', 'content.security.policies', $container, $a->extendService('webhooks', 'content.security.policies', $container, $a->extendService('rte_ckeditor', 'content.security.policies', $container, $a->extendService('setup', 'content.security.policies', $container, $a->extendService('recycler', 'content.security.policies', $container, $a->extendService('reactions', 'content.security.policies', $container, $a->extendService('indexed_search', 'content.security.policies', $container, $a->extendService('linkvalidator', 'content.security.policies', $container, $a->extendService('info', 'content.security.policies', $container, $a->extendService('seo', 'content.security.policies', $container, $a->extendService('redirects', 'content.security.policies', $container, $a->extendService('reports', 'content.security.policies', $container, $a->extendService('fluid_styled_content', 'content.security.policies', $container, $a->extendService('form', 'content.security.policies', $container, $a->extendService('lowlevel', 'content.security.policies', $container, $a->extendService('impexp', 'content.security.policies', $container, $a->extendService('filelist', 'content.security.policies', $container, \TYPO3\CMS\Dashboard\ServiceProvider::configureContentSecurityPolicies($container, $a->extendService('adminpanel', 'content.security.policies', $container, \TYPO3\CMS\Frontend\ServiceProvider::configureContentSecurityPolicies($container, \TYPO3\CMS\Backend\ServiceProvider::configureContentSecurityPolicies($container, \TYPO3\CMS\Fluid\ServiceProvider::configureContentSecurityPolicies($container, \TYPO3\CMS\Extbase\ServiceProvider::configureContentSecurityPolicies($container, $a->extendService('scheduler', 'content.security.policies', $container, \TYPO3\CMS\Core\ServiceProvider::configureContentSecurityPolicies($container, \TYPO3\CMS\Core\ServiceProvider::getContentSecurityPolicies($container))))))))))))))))))))))))))))))))))))))))));
    }

    /**
     * Gets the public 'country.provider' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Country\CountryProvider
     */
    protected static function getCountry_ProviderService($container)
    {
        return $container->services['country.provider'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Country\CountryProvider::class);
    }

    /**
     * Gets the public 'dashboard.configuration.warmer' shared service.
     *
     * @return \Closure
     */
    protected static function getDashboard_Configuration_WarmerService($container)
    {
        return $container->services['dashboard.configuration.warmer'] = \TYPO3\CMS\Dashboard\ServiceProvider::getConfigurationWarmer($container);
    }

    /**
     * Gets the public 'dashboard.presets_decorated_1' shared service.
     *
     * @return \ArrayObject
     */
    protected static function getDashboard_PresetsDecorated1Service($container)
    {
        return $container->services['dashboard.presets_decorated_1'] = \TYPO3\CMS\Dashboard\ServiceProvider::configureDashboardPresets($container, \TYPO3\CMS\Dashboard\ServiceProvider::getDashboardPresets($container));
    }

    /**
     * Gets the public 'dashboard.views.widget' shared autowired service.
     *
     * @return \TYPO3\CMS\Fluid\View\StandaloneView
     *
     * @deprecated Since typo3/cms-dashboard 12.0: Injection of "dashboard.views.widget" should not be injected due to a dependency to ServerRequestInterface. Inject BackendViewFactory instead and implement RequestAwareWidgetInterface.
     */
    protected static function getDashboard_Views_WidgetService($container)
    {
        trigger_deprecation('typo3/cms-dashboard', '12.0', 'Injection of "dashboard.views.widget" should not be injected due to a dependency to ServerRequestInterface. Inject BackendViewFactory instead and implement RequestAwareWidgetInterface.');

        return $container->services['dashboard.views.widget'] = \TYPO3\CMS\Dashboard\Views\Factory::widgetTemplate();
    }

    /**
     * Gets the public 'dashboard.widget.docGettingStarted' shared autowired service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\CtaWidget
     */
    protected static function getDashboard_Widget_DocGettingStartedService($container)
    {
        return $container->services['dashboard.widget.docGettingStarted'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\CtaWidget::class, ($container->services['docGettingStartedWidgetConfiguration'] ?? self::getDocGettingStartedWidgetConfigurationService($container)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\View\StandaloneView::class, NULL), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\Provider\ButtonProvider::class, 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.documentation.gettingStarted.content.label', 'https://docs.typo3.org/m/typo3/tutorial-getting-started/main/en-us/Index.html', '_blank'), ['text' => 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.documentation.gettingStarted.text']);
    }

    /**
     * Gets the public 'dashboard.widget.docTSconfig' shared autowired service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\CtaWidget
     */
    protected static function getDashboard_Widget_DocTSconfigService($container)
    {
        return $container->services['dashboard.widget.docTSconfig'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\CtaWidget::class, ($container->services['docTSconfigWidgetConfiguration'] ?? self::getDocTSconfigWidgetConfigurationService($container)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\View\StandaloneView::class, NULL), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\Provider\ButtonProvider::class, 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.documentation.TSconfigReference.content.label', 'https://docs.typo3.org/m/typo3/reference-tsconfig/main/en-us/Index.html', '_blank'), ['text' => 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.documentation.TSconfigReference.text']);
    }

    /**
     * Gets the public 'dashboard.widget.docTypoScriptReference' shared autowired service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\CtaWidget
     */
    protected static function getDashboard_Widget_DocTypoScriptReferenceService($container)
    {
        return $container->services['dashboard.widget.docTypoScriptReference'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\CtaWidget::class, ($container->services['docTypoScriptReferenceWidgetConfiguration'] ?? self::getDocTypoScriptReferenceWidgetConfigurationService($container)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\View\StandaloneView::class, NULL), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\Provider\ButtonProvider::class, 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.documentation.typoscriptReference.content.label', 'https://docs.typo3.org/m/typo3/reference-typoscript/main/en-us/Index.html', '_blank'), ['text' => 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.documentation.typoscriptReference.text']);
    }

    /**
     * Gets the public 'dashboard.widget.failedLogins' shared autowired service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\NumberWithIconWidget
     */
    protected static function getDashboard_Widget_FailedLoginsService($container)
    {
        return $container->services['dashboard.widget.failedLogins'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\NumberWithIconWidget::class, ($container->services['failedLoginsWidgetConfiguration'] ?? self::getFailedLoginsWidgetConfigurationService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\Provider\NumberOfFailedLoginsDataProvider::class), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\View\StandaloneView::class, NULL), ['title' => 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.failedLogins.title', 'subtitle' => 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.failedLogins.subtitle', 'icon' => 'content-elements-login']);
    }

    /**
     * Gets the public 'dashboard.widget.pagesWithoutMetaDescription' shared service.
     *
     * @return \TYPO3\CMS\Seo\Widgets\PagesWithoutDescriptionWidget
     */
    protected static function getDashboard_Widget_PagesWithoutMetaDescriptionService($container)
    {
        return $container->services['dashboard.widget.pagesWithoutMetaDescription'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Seo\Widgets\PagesWithoutDescriptionWidget::class, ($container->services['seo-pagesWithoutMetaDescriptionWidgetConfiguration'] ?? self::getSeopagesWithoutMetaDescriptionWidgetConfigurationService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Seo\Widgets\Provider\PagesWithoutDescriptionDataProvider::class, ($container->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? self::getSiteFinderService($container)), ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)), [3, 4, 6, 7, 199, 254, 255], 8), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)), ['refreshAvailable' => true]);
    }

    /**
     * Gets the public 'dashboard.widget.sysLogErrors' shared autowired service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\BarChartWidget
     */
    protected static function getDashboard_Widget_SysLogErrorsService($container)
    {
        return $container->services['dashboard.widget.sysLogErrors'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\BarChartWidget::class, ($container->services['sysLogErrorsWidgetConfiguration'] ?? self::getSysLogErrorsWidgetConfigurationService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\Provider\SysLogErrorsDataProvider::class), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\View\StandaloneView::class, NULL), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\Provider\SysLogButtonProvider::class, 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.sysLogErrors.buttonText'), ['refreshAvailable' => true]);
    }

    /**
     * Gets the public 'dashboard.widget.t3information' shared autowired service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\T3GeneralInformationWidget
     */
    protected static function getDashboard_Widget_T3informationService($container)
    {
        return $container->services['dashboard.widget.t3information'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\T3GeneralInformationWidget::class, ($container->services['t3informationWidgetConfiguration'] ?? self::getT3informationWidgetConfigurationService($container)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\View\StandaloneView::class, NULL));
    }

    /**
     * Gets the public 'dashboard.widget.t3news' shared autowired service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\RssWidget
     */
    protected static function getDashboard_Widget_T3newsService($container)
    {
        return $container->services['dashboard.widget.t3news'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\RssWidget::class, ($container->services['t3newsWidgetConfiguration'] ?? self::getT3newsWidgetConfigurationService($container)), ($container->privates['cache.dashboard.rss'] ?? self::getCache_Dashboard_RssService($container)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\View\StandaloneView::class, NULL), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\Provider\ButtonProvider::class, 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.t3news.moreItems', 'https://typo3.org/project/news', '_blank'), ['feedUrl' => 'https://typo3.org/rss']);
    }

    /**
     * Gets the public 'dashboard.widget.t3securityAdvisories' shared autowired service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\RssWidget
     */
    protected static function getDashboard_Widget_T3securityAdvisoriesService($container)
    {
        return $container->services['dashboard.widget.t3securityAdvisories'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\RssWidget::class, ($container->services['t3securityAdvisoriesWidgetConfiguration'] ?? self::getT3securityAdvisoriesWidgetConfigurationService($container)), ($container->privates['cache.dashboard.rss'] ?? self::getCache_Dashboard_RssService($container)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\View\StandaloneView::class, NULL), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\Provider\ButtonProvider::class, 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.t3securityAdvisories.moreItems', 'https://typo3.org/help/security-advisories', '_blank'), ['feedUrl' => 'https://typo3.org/rss-security']);
    }

    /**
     * Gets the public 'dashboard.widget.typeOfUsers' shared autowired service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\DoughnutChartWidget
     */
    protected static function getDashboard_Widget_TypeOfUsersService($container)
    {
        return $container->services['dashboard.widget.typeOfUsers'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\DoughnutChartWidget::class, ($container->services['typeOfUsersWidgetConfiguration'] ?? self::getTypeOfUsersWidgetConfigurationService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\Provider\TypeOfUsersChartDataProvider::class, ($container->services['TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory'] ?? self::getLanguageServiceFactoryService($container))), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\View\StandaloneView::class, NULL));
    }

    /**
     * Gets the public 'dashboard.widgetGroups_decorated_1' shared service.
     *
     * @return \ArrayObject
     */
    protected static function getDashboard_WidgetGroupsDecorated1Service($container)
    {
        return $container->services['dashboard.widgetGroups_decorated_1'] = \TYPO3\CMS\Dashboard\ServiceProvider::configureWidgetGroups($container, \TYPO3\CMS\Dashboard\ServiceProvider::getWidgetGroups($container));
    }

    /**
     * Gets the public 'dashboard.widgets.calendarizeIndexAmount' shared service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\NumberWithIconWidget
     */
    protected static function getDashboard_Widgets_CalendarizeIndexAmountService($container)
    {
        return $container->services['dashboard.widgets.calendarizeIndexAmount'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\NumberWithIconWidget::class, configuration: ($container->services['calendarizeIndexAmountWidgetConfiguration'] ?? self::getCalendarizeIndexAmountWidgetConfigurationService($container)), dataProvider: \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Widgets\DataProvider\IndexAmountDataProvider::class, ($container->services['HDNET\\Calendarize\\Domain\\Repository\\IndexRepository'] ?? self::getIndexRepositoryService($container))), backendViewFactory: ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)), options: ['title' => 'LLL:EXT:calendarize/Resources/Private/Language/locallang.xlf:calendarizeIndexAmount.description', 'icon' => 'ext-calendarize-wizard-icon']);
    }

    /**
     * Gets the public 'dashboard.widgets.calendarizeNextEvents' shared service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\ListWidget
     */
    protected static function getDashboard_Widgets_CalendarizeNextEventsService($container)
    {
        return $container->services['dashboard.widgets.calendarizeNextEvents'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\ListWidget::class, ($container->services['calendarizeNextEventsWidgetConfiguration'] ?? self::getCalendarizeNextEventsWidgetConfigurationService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Widgets\DataProvider\NextEventsDataProvider::class, ($container->services['HDNET\\Calendarize\\Domain\\Repository\\IndexRepository'] ?? self::getIndexRepositoryService($container))), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)));
    }

    /**
     * Gets the public 'dashboard.widgets_decorated_1' shared service.
     *
     * @return \ArrayObject
     */
    protected static function getDashboard_WidgetsDecorated1Service($container)
    {
        return $container->services['dashboard.widgets_decorated_1'] = \TYPO3\CMS\Dashboard\ServiceProvider::configureWidgets($container, \TYPO3\CMS\Dashboard\ServiceProvider::getWidgets($container));
    }

    /**
     * Gets the public 'docGettingStartedWidgetConfiguration' shared service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration
     */
    protected static function getDocGettingStartedWidgetConfigurationService($container)
    {
        return $container->services['docGettingStartedWidgetConfiguration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration::class, 'docGettingStarted', 'dashboard.widget.docGettingStarted', ['documentation'], 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.documentation.gettingStarted.title', 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.documentation.gettingStarted.description', 'content-widget-text', 'small', 'small', []);
    }

    /**
     * Gets the public 'docTSconfigWidgetConfiguration' shared service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration
     */
    protected static function getDocTSconfigWidgetConfigurationService($container)
    {
        return $container->services['docTSconfigWidgetConfiguration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration::class, 'docTSconfig', 'dashboard.widget.docTSconfig', ['documentation'], 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.documentation.TSconfigReference.title', 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.documentation.TSconfigReference.description', 'content-widget-text', 'small', 'small', []);
    }

    /**
     * Gets the public 'docTypoScriptReferenceWidgetConfiguration' shared service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration
     */
    protected static function getDocTypoScriptReferenceWidgetConfigurationService($container)
    {
        return $container->services['docTypoScriptReferenceWidgetConfiguration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration::class, 'docTypoScriptReference', 'dashboard.widget.docTypoScriptReference', ['documentation'], 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.documentation.typoscriptReference.title', 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.documentation.typoscriptReference.description', 'content-widget-text', 'small', 'small', []);
    }

    /**
     * Gets the public 'failedLoginsWidgetConfiguration' shared service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration
     */
    protected static function getFailedLoginsWidgetConfigurationService($container)
    {
        return $container->services['failedLoginsWidgetConfiguration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration::class, 'failedLogins', 'dashboard.widget.failedLogins', ['systemInfo'], 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.failedLogins.title', 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.failedLogins.description', 'content-widget-number', 'small', 'small', []);
    }

    /**
     * Gets the public 'frontend.middlewares' shared service.
     *
     * @return \ArrayObject
     */
    protected static function getFrontend_MiddlewaresService($container)
    {
        return $container->services['frontend.middlewares'] = \TYPO3\CMS\Frontend\ServiceProvider::getFrontendMiddlewares($container);
    }

    /**
     * Gets the public 'globalPageTsConfig_decorated_41' shared service.
     *
     * @return \ArrayObject
     */
    protected static function getGlobalPageTsConfigDecorated41Service($container)
    {
        $a = ($container->services['service_provider_registry'] ?? $container->get('service_provider_registry', 1));

        return $container->services['globalPageTsConfig_decorated_41'] = $a->extendService('typo3_auto_login', 'globalPageTsConfig', $container, $a->extendService('bw_focuspoint_images', 'globalPageTsConfig', $container, $a->extendService('calendarize', 'globalPageTsConfig', $container, $a->extendService('muldenland', 'globalPageTsConfig', $container, $a->extendService('container', 'globalPageTsConfig', $container, $a->extendService('news', 'globalPageTsConfig', $container, $a->extendService('workspaces', 'globalPageTsConfig', $container, $a->extendService('viewpage', 'globalPageTsConfig', $container, $a->extendService('tstemplate', 'globalPageTsConfig', $container, $a->extendService('t3editor', 'globalPageTsConfig', $container, $a->extendService('sys_note', 'globalPageTsConfig', $container, $a->extendService('opendocs', 'globalPageTsConfig', $container, $a->extendService('filemetadata', 'globalPageTsConfig', $container, $a->extendService('felogin', 'globalPageTsConfig', $container, $a->extendService('extensionmanager', 'globalPageTsConfig', $container, $a->extendService('beuser', 'globalPageTsConfig', $container, $a->extendService('belog', 'globalPageTsConfig', $container, $a->extendService('webhooks', 'globalPageTsConfig', $container, $a->extendService('rte_ckeditor', 'globalPageTsConfig', $container, $a->extendService('setup', 'globalPageTsConfig', $container, $a->extendService('recycler', 'globalPageTsConfig', $container, $a->extendService('reactions', 'globalPageTsConfig', $container, $a->extendService('indexed_search', 'globalPageTsConfig', $container, $a->extendService('linkvalidator', 'globalPageTsConfig', $container, $a->extendService('info', 'globalPageTsConfig', $container, $a->extendService('seo', 'globalPageTsConfig', $container, $a->extendService('redirects', 'globalPageTsConfig', $container, $a->extendService('reports', 'globalPageTsConfig', $container, $a->extendService('fluid_styled_content', 'globalPageTsConfig', $container, $a->extendService('form', 'globalPageTsConfig', $container, $a->extendService('lowlevel', 'globalPageTsConfig', $container, $a->extendService('impexp', 'globalPageTsConfig', $container, $a->extendService('filelist', 'globalPageTsConfig', $container, \TYPO3\CMS\Dashboard\ServiceProvider::configureGlobalPageTsConfig($container, $a->extendService('adminpanel', 'globalPageTsConfig', $container, \TYPO3\CMS\Frontend\ServiceProvider::configureGlobalPageTsConfig($container, \TYPO3\CMS\Backend\ServiceProvider::configureGlobalPageTsConfig($container, \TYPO3\CMS\Fluid\ServiceProvider::configureGlobalPageTsConfig($container, \TYPO3\CMS\Extbase\ServiceProvider::configureGlobalPageTsConfig($container, $a->extendService('scheduler', 'globalPageTsConfig', $container, \TYPO3\CMS\Core\ServiceProvider::configureGlobalPageTsConfig($container, \TYPO3\CMS\Core\ServiceProvider::getGlobalPageTsConfig($container))))))))))))))))))))))))))))))))))))))))));
    }

    /**
     * Gets the public 'icons_decorated_42' shared service.
     *
     * @return \ArrayObject
     */
    protected static function getIconsDecorated42Service($container)
    {
        $a = ($container->services['service_provider_registry'] ?? $container->get('service_provider_registry', 1));

        return $container->services['icons_decorated_42'] = $a->extendService('typo3_auto_login', 'icons', $container, $a->extendService('bw_focuspoint_images', 'icons', $container, $a->extendService('calendarize', 'icons', $container, $a->extendService('muldenland', 'icons', $container, $a->extendService('container', 'icons', $container, $a->extendService('news', 'icons', $container, $a->extendService('workspaces', 'icons', $container, $a->extendService('viewpage', 'icons', $container, $a->extendService('tstemplate', 'icons', $container, $a->extendService('t3editor', 'icons', $container, $a->extendService('sys_note', 'icons', $container, $a->extendService('opendocs', 'icons', $container, $a->extendService('filemetadata', 'icons', $container, $a->extendService('felogin', 'icons', $container, $a->extendService('extensionmanager', 'icons', $container, $a->extendService('beuser', 'icons', $container, $a->extendService('belog', 'icons', $container, $a->extendService('webhooks', 'icons', $container, $a->extendService('rte_ckeditor', 'icons', $container, $a->extendService('setup', 'icons', $container, $a->extendService('recycler', 'icons', $container, $a->extendService('reactions', 'icons', $container, $a->extendService('indexed_search', 'icons', $container, $a->extendService('linkvalidator', 'icons', $container, $a->extendService('info', 'icons', $container, $a->extendService('seo', 'icons', $container, $a->extendService('redirects', 'icons', $container, $a->extendService('reports', 'icons', $container, $a->extendService('fluid_styled_content', 'icons', $container, $a->extendService('form', 'icons', $container, $a->extendService('lowlevel', 'icons', $container, $a->extendService('impexp', 'icons', $container, $a->extendService('filelist', 'icons', $container, \TYPO3\CMS\Dashboard\ServiceProvider::configureIcons($container, $a->extendService('adminpanel', 'icons', $container, \TYPO3\CMS\Frontend\ServiceProvider::configureIcons($container, \TYPO3\CMS\Backend\ServiceProvider::configureIcons($container, \TYPO3\CMS\Install\ServiceProvider::configureIcons($container, \TYPO3\CMS\Fluid\ServiceProvider::configureIcons($container, \TYPO3\CMS\Extbase\ServiceProvider::configureIcons($container, $a->extendService('scheduler', 'icons', $container, \TYPO3\CMS\Core\ServiceProvider::configureIcons($container, \TYPO3\CMS\Core\ServiceProvider::getIcons($container)))))))))))))))))))))))))))))))))))))))))));
    }

    /**
     * Gets the public 'lowlevel.configuration.module.provider.formyamlconfiguration' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\ConfigurationModuleProvider\FormYamlProvider
     */
    protected static function getLowlevel_Configuration_Module_Provider_FormyamlconfigurationService($container)
    {
        return $container->services['lowlevel.configuration.module.provider.formyamlconfiguration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\ConfigurationModuleProvider\FormYamlProvider::class, ($container->services['TYPO3\\CMS\\Form\\Mvc\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManager2Service($container)));
    }

    /**
     * Gets the public 'lowlevel.configuration.module.provider.reactions' shared autowired service.
     *
     * @return \TYPO3\CMS\Reactions\ConfigurationModuleProvider\ReactionsProvider
     */
    protected static function getLowlevel_Configuration_Module_Provider_ReactionsService($container)
    {
        return $container->services['lowlevel.configuration.module.provider.reactions'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Reactions\ConfigurationModuleProvider\ReactionsProvider::class, ($container->privates['TYPO3\\CMS\\Reactions\\ReactionRegistry'] ?? self::getReactionRegistryService($container)));
    }

    /**
     * Gets the public 'lowlevel.configuration.module.provider.webhooks' shared autowired service.
     *
     * @return \TYPO3\CMS\Webhooks\ConfigurationModuleProvider\WebhookTypesProvider
     */
    protected static function getLowlevel_Configuration_Module_Provider_WebhooksService($container)
    {
        return $container->services['lowlevel.configuration.module.provider.webhooks'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Webhooks\ConfigurationModuleProvider\WebhookTypesProvider::class, ($container->services['TYPO3\\CMS\\Webhooks\\WebhookTypesRegistry'] ?? self::getWebhookTypesRegistryService($container)), ($container->privates['.service_locator.lUAd7EM'] ?? self::get_ServiceLocator_LUAd7EMService($container)));
    }

    /**
     * Gets the public 'middlewares_decorated_41' shared service.
     *
     * @return \ArrayObject
     */
    protected static function getMiddlewaresDecorated41Service($container)
    {
        $a = ($container->services['service_provider_registry'] ?? $container->get('service_provider_registry', 1));

        return $container->services['middlewares_decorated_41'] = $a->extendService('typo3_auto_login', 'middlewares', $container, $a->extendService('bw_focuspoint_images', 'middlewares', $container, $a->extendService('calendarize', 'middlewares', $container, $a->extendService('muldenland', 'middlewares', $container, $a->extendService('container', 'middlewares', $container, $a->extendService('news', 'middlewares', $container, $a->extendService('workspaces', 'middlewares', $container, $a->extendService('viewpage', 'middlewares', $container, $a->extendService('tstemplate', 'middlewares', $container, $a->extendService('t3editor', 'middlewares', $container, $a->extendService('sys_note', 'middlewares', $container, $a->extendService('opendocs', 'middlewares', $container, $a->extendService('filemetadata', 'middlewares', $container, $a->extendService('felogin', 'middlewares', $container, $a->extendService('extensionmanager', 'middlewares', $container, $a->extendService('beuser', 'middlewares', $container, $a->extendService('belog', 'middlewares', $container, $a->extendService('webhooks', 'middlewares', $container, $a->extendService('rte_ckeditor', 'middlewares', $container, $a->extendService('setup', 'middlewares', $container, $a->extendService('recycler', 'middlewares', $container, $a->extendService('reactions', 'middlewares', $container, $a->extendService('indexed_search', 'middlewares', $container, $a->extendService('linkvalidator', 'middlewares', $container, $a->extendService('info', 'middlewares', $container, $a->extendService('seo', 'middlewares', $container, $a->extendService('redirects', 'middlewares', $container, $a->extendService('reports', 'middlewares', $container, $a->extendService('fluid_styled_content', 'middlewares', $container, $a->extendService('form', 'middlewares', $container, $a->extendService('lowlevel', 'middlewares', $container, $a->extendService('impexp', 'middlewares', $container, $a->extendService('filelist', 'middlewares', $container, \TYPO3\CMS\Dashboard\ServiceProvider::configureMiddlewares($container, $a->extendService('adminpanel', 'middlewares', $container, \TYPO3\CMS\Frontend\ServiceProvider::configureMiddlewares($container, \TYPO3\CMS\Backend\ServiceProvider::configureMiddlewares($container, \TYPO3\CMS\Fluid\ServiceProvider::configureMiddlewares($container, \TYPO3\CMS\Extbase\ServiceProvider::configureMiddlewares($container, $a->extendService('scheduler', 'middlewares', $container, \TYPO3\CMS\Core\ServiceProvider::configureMiddlewares($container, \TYPO3\CMS\Core\ServiceProvider::getMiddlewares($container))))))))))))))))))))))))))))))))))))))))));
    }

    /**
     * Gets the public 'seo-pagesWithoutMetaDescriptionWidgetConfiguration' shared service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration
     */
    protected static function getSeopagesWithoutMetaDescriptionWidgetConfigurationService($container)
    {
        return $container->services['seo-pagesWithoutMetaDescriptionWidgetConfiguration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration::class, 'seo-pagesWithoutMetaDescription', 'dashboard.widget.pagesWithoutMetaDescription', ['seo'], 'LLL:EXT:seo/Resources/Private/Language/locallang_dashboard.xlf:widget.pagesWithoutMetaDescription.title', 'LLL:EXT:seo/Resources/Private/Language/locallang_dashboard.xlf:widget.pagesWithoutMetaDescription.description', 'content-widget-list', 'large', 'medium', []);
    }

    /**
     * Gets the public 'sysLogErrorsWidgetConfiguration' shared service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration
     */
    protected static function getSysLogErrorsWidgetConfigurationService($container)
    {
        return $container->services['sysLogErrorsWidgetConfiguration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration::class, 'sysLogErrors', 'dashboard.widget.sysLogErrors', ['systemInfo'], 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.sysLogErrors.title', 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.sysLogErrors.description', 'content-widget-chart-bar', 'medium', 'medium', []);
    }

    /**
     * Gets the public 't3informationWidgetConfiguration' shared service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration
     */
    protected static function getT3informationWidgetConfigurationService($container)
    {
        return $container->services['t3informationWidgetConfiguration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration::class, 't3information', 'dashboard.widget.t3information', ['general'], 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.t3information.title', 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.t3information.description', 'content-widget-text', 'medium', 'medium', []);
    }

    /**
     * Gets the public 't3newsWidgetConfiguration' shared service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration
     */
    protected static function getT3newsWidgetConfigurationService($container)
    {
        return $container->services['t3newsWidgetConfiguration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration::class, 't3news', 'dashboard.widget.t3news', ['news'], 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.t3news.title', 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.t3news.description', 'content-widget-rss', 'large', 'medium', []);
    }

    /**
     * Gets the public 't3securityAdvisoriesWidgetConfiguration' shared service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration
     */
    protected static function getT3securityAdvisoriesWidgetConfigurationService($container)
    {
        return $container->services['t3securityAdvisoriesWidgetConfiguration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration::class, 't3securityAdvisories', 'dashboard.widget.t3securityAdvisories', ['news'], 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.t3securityAdvisories.title', 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.t3securityAdvisories.description', 'content-widget-rss', 'large', 'medium', []);
    }

    /**
     * Gets the public 'typeOfUsersWidgetConfiguration' shared service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration
     */
    protected static function getTypeOfUsersWidgetConfigurationService($container)
    {
        return $container->services['typeOfUsersWidgetConfiguration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration::class, 'typeOfUsers', 'dashboard.widget.typeOfUsers', ['systemInfo'], 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.typeOfUsers.title', 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.typeOfUsers.description', 'content-widget-chart-pie', 'medium', 'small', []);
    }

    /**
     * Gets the private '.service_locator.lUAd7EM' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected static function get_ServiceLocator_LUAd7EMService($container)
    {
        return $container->privates['.service_locator.lUAd7EM'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\Symfony\Component\DependencyInjection\Argument\ServiceLocator::class, $container->getService ??= $container->getService(...), [
            'default' => ['privates', 'Symfony\\Component\\Messenger\\Transport\\Sync\\SyncTransport', 'getSyncTransportService', false],
            'doctrine' => ['privates', 'Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport', 'getDoctrineTransportService', false],
        ], [
            'default' => 'Symfony\\Component\\Messenger\\Transport\\Sync\\SyncTransport',
            'doctrine' => 'Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport',
        ]);
    }

    /**
     * Gets the private 'GeorgRinger\News\Service\SettingsService' shared autowired service.
     *
     * @return \GeorgRinger\News\Service\SettingsService
     */
    protected static function getSettingsServiceService($container)
    {
        $container->privates['GeorgRinger\\News\\Service\\SettingsService'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\GeorgRinger\News\Service\SettingsService::class);

        $instance->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));

        return $instance;
    }

    /**
     * Gets the private 'HDNET\Calendarize\Updates\DateFieldUpdate' shared autowired service.
     *
     * @return \HDNET\Calendarize\Updates\DateFieldUpdate
     */
    protected static function getDateFieldUpdateService($container)
    {
        return $container->privates['HDNET\\Calendarize\\Updates\\DateFieldUpdate'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Updates\DateFieldUpdate::class);
    }

    /**
     * Gets the private 'HDNET\Calendarize\Updates\NewIncludeExcludeStructureUpdate' shared autowired service.
     *
     * @return \HDNET\Calendarize\Updates\NewIncludeExcludeStructureUpdate
     */
    protected static function getNewIncludeExcludeStructureUpdateService($container)
    {
        return $container->privates['HDNET\\Calendarize\\Updates\\NewIncludeExcludeStructureUpdate'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Updates\NewIncludeExcludeStructureUpdate::class);
    }

    /**
     * Gets the private 'HDNET\Calendarize\Updates\PluginUpdater' shared autowired service.
     *
     * @return \HDNET\Calendarize\Updates\PluginUpdater
     */
    protected static function getPluginUpdaterService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container));

        return $container->privates['HDNET\\Calendarize\\Updates\\PluginUpdater'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Updates\PluginUpdater::class, $a->getQueryBuilderForTable('tt_content'), $a->getQueryBuilderForTable('be_groups'), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\FlexForm\FlexFormTools::class, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container))), ($container->services['TYPO3\\CMS\\Core\\Service\\FlexFormService'] ?? self::getFlexFormService2Service($container)));
    }

    /**
     * Gets the private 'HDNET\Calendarize\Updates\PopulateEventSlugs' shared autowired service.
     *
     * @return \HDNET\Calendarize\Updates\PopulateEventSlugs
     */
    protected static function getPopulateEventSlugsService($container)
    {
        return $container->privates['HDNET\\Calendarize\\Updates\\PopulateEventSlugs'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Updates\PopulateEventSlugs::class, ($container->services['HDNET\\Calendarize\\Service\\IndexerService'] ?? self::getIndexerServiceService($container)));
    }

    /**
     * Gets the private 'HDNET\Calendarize\Updates\TillDateFieldUpdate' shared autowired service.
     *
     * @return \HDNET\Calendarize\Updates\TillDateFieldUpdate
     */
    protected static function getTillDateFieldUpdateService($container)
    {
        return $container->privates['HDNET\\Calendarize\\Updates\\TillDateFieldUpdate'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\HDNET\Calendarize\Updates\TillDateFieldUpdate::class);
    }

    /**
     * Gets the private 'Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport' shared autowired service.
     *
     * @return \Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport
     */
    protected static function getDoctrineTransportService($container)
    {
        return $container->privates['Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport'] = (\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Messenger\DoctrineTransportFactory::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\Symfony\Component\Messenger\Transport\Serialization\PhpSerializer::class)))->createTransport(['queue_name' => 'default']);
    }

    /**
     * Gets the private 'Symfony\Component\Messenger\Middleware\HandleMessageMiddleware' shared autowired service.
     *
     * @return \Symfony\Component\Messenger\Middleware\HandleMessageMiddleware
     */
    protected static function getHandleMessageMiddlewareService($container)
    {
        $a = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Messenger\HandlersLocatorFactory::class, $container);
        $a->addHandler('TYPO3\\CMS\\Core\\Messaging\\WebhookMessageInterface', 'TYPO3\\CMS\\Webhooks\\MessageHandler\\WebhookMessageHandler', '__invoke');
        $a->addHandler('TYPO3\\CMS\\Workspaces\\Messages\\StageChangeMessage', 'TYPO3\\CMS\\Workspaces\\MessageHandler\\StageChangeNotificationHandler', '__invoke');

        return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\Symfony\Component\Messenger\Middleware\HandleMessageMiddleware::class, $a->createHandlersLocator());
    }

    /**
     * Gets the private 'Symfony\Component\Messenger\Middleware\SendMessageMiddleware' shared autowired service.
     *
     * @return \Symfony\Component\Messenger\Middleware\SendMessageMiddleware
     */
    protected static function getSendMessageMiddlewareService($container)
    {
        $a = ($container->privates['.service_locator.lUAd7EM'] ?? self::get_ServiceLocator_LUAd7EMService($container));

        if (isset($container->privates['Symfony\\Component\\Messenger\\Middleware\\SendMessageMiddleware'])) {
            return $container->privates['Symfony\\Component\\Messenger\\Middleware\\SendMessageMiddleware'];
        }

        return $container->privates['Symfony\\Component\\Messenger\\Middleware\\SendMessageMiddleware'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\Symfony\Component\Messenger\Middleware\SendMessageMiddleware::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Messenger\TransportLocator::class, $a), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
    }

    /**
     * Gets the private 'Symfony\Component\Messenger\Transport\Sync\SyncTransport' shared autowired service.
     *
     * @return \Symfony\Component\Messenger\Transport\Sync\SyncTransport
     */
    protected static function getSyncTransportService($container)
    {
        $a = ($container->privates['messenger.bus.default'] ?? self::getMessenger_Bus_DefaultService($container));

        if (isset($container->privates['Symfony\\Component\\Messenger\\Transport\\Sync\\SyncTransport'])) {
            return $container->privates['Symfony\\Component\\Messenger\\Transport\\Sync\\SyncTransport'];
        }

        return $container->privates['Symfony\\Component\\Messenger\\Transport\\Sync\\SyncTransport'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\Symfony\Component\Messenger\Transport\Sync\SyncTransport::class, $a);
    }

    /**
     * Gets the private 'TYPO3\CMS\Backend\Authentication\PasswordReset' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Authentication\PasswordReset
     */
    protected static function getPasswordResetService($container)
    {
        $container->privates['TYPO3\\CMS\\Backend\\Authentication\\PasswordReset'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Authentication\PasswordReset::class);

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Backend\\Authentication\\PasswordReset'));

        return $instance;
    }

    /**
     * Gets the private 'TYPO3\CMS\Backend\Backend\ToolbarItems\HelpToolbarItem' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Backend\ToolbarItems\HelpToolbarItem
     */
    protected static function getHelpToolbarItemService($container)
    {
        return $container->privates['TYPO3\\CMS\\Backend\\Backend\\ToolbarItems\\HelpToolbarItem'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Backend\ToolbarItems\HelpToolbarItem::class, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)));
    }

    /**
     * Gets the private 'TYPO3\CMS\Backend\Backend\ToolbarItems\LiveSearchToolbarItem' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Backend\ToolbarItems\LiveSearchToolbarItem
     */
    protected static function getLiveSearchToolbarItemService($container)
    {
        return $container->privates['TYPO3\\CMS\\Backend\\Backend\\ToolbarItems\\LiveSearchToolbarItem'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Backend\ToolbarItems\LiveSearchToolbarItem::class, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)));
    }

    /**
     * Gets the private 'TYPO3\CMS\Backend\Backend\ToolbarItems\UserToolbarItem' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Backend\ToolbarItems\UserToolbarItem
     */
    protected static function getUserToolbarItemService($container)
    {
        return $container->privates['TYPO3\\CMS\\Backend\\Backend\\ToolbarItems\\UserToolbarItem'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Backend\ToolbarItems\UserToolbarItem::class, ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)));
    }

    /**
     * Gets the private 'TYPO3\CMS\Backend\ElementBrowser\DatabaseBrowser' autowired service.
     *
     * @return \TYPO3\CMS\Backend\ElementBrowser\DatabaseBrowser
     */
    protected static function getDatabaseBrowserService($container)
    {
        $container->factories['service_container']['TYPO3\\CMS\\Backend\\ElementBrowser\\DatabaseBrowser'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ElementBrowser\DatabaseBrowser::class, ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)));
        };

        return $container->factories['service_container']['TYPO3\\CMS\\Backend\\ElementBrowser\\DatabaseBrowser']($container);
    }

    /**
     * Gets the private 'TYPO3\CMS\Backend\Search\LiveSearch\DatabaseRecordProvider' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Search\LiveSearch\DatabaseRecordProvider
     */
    protected static function getDatabaseRecordProviderService($container)
    {
        return $container->privates['TYPO3\\CMS\\Backend\\Search\\LiveSearch\\DatabaseRecordProvider'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Search\LiveSearch\DatabaseRecordProvider::class, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory'] ?? self::getLanguageServiceFactoryService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->privates['TYPO3\\CMS\\Backend\\Search\\LiveSearch\\QueryParser'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Search\LiveSearch\QueryParser::class)));
    }

    /**
     * Gets the private 'TYPO3\CMS\Backend\Search\LiveSearch\PageRecordProvider' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Search\LiveSearch\PageRecordProvider
     */
    protected static function getPageRecordProviderService($container)
    {
        return $container->privates['TYPO3\\CMS\\Backend\\Search\\LiveSearch\\PageRecordProvider'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Search\LiveSearch\PageRecordProvider::class, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory'] ?? self::getLanguageServiceFactoryService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->privates['TYPO3\\CMS\\Backend\\Search\\LiveSearch\\QueryParser'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Search\LiveSearch\QueryParser::class)), ($container->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? self::getSiteFinderService($container)));
    }

    /**
     * Gets the private 'TYPO3\CMS\Backend\Toolbar\ToolbarItemsRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Toolbar\ToolbarItemsRegistry
     */
    protected static function getToolbarItemsRegistryService($container)
    {
        return $container->privates['TYPO3\\CMS\\Backend\\Toolbar\\ToolbarItemsRegistry'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Toolbar\ToolbarItemsRegistry::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(RewindableGenerator::class, function () use ($container) {
            yield 0 => ($container->services['TYPO3\\CMS\\Backend\\Backend\\ToolbarItems\\ClearCacheToolbarItem'] ?? self::getClearCacheToolbarItemService($container));
            yield 1 => ($container->privates['TYPO3\\CMS\\Backend\\Backend\\ToolbarItems\\HelpToolbarItem'] ?? self::getHelpToolbarItemService($container));
            yield 2 => ($container->privates['TYPO3\\CMS\\Backend\\Backend\\ToolbarItems\\LiveSearchToolbarItem'] ?? self::getLiveSearchToolbarItemService($container));
            yield 3 => ($container->services['TYPO3\\CMS\\Backend\\Backend\\ToolbarItems\\ShortcutToolbarItem'] ?? self::getShortcutToolbarItemService($container));
            yield 4 => ($container->services['TYPO3\\CMS\\Backend\\Backend\\ToolbarItems\\SystemInformationToolbarItem'] ?? self::getSystemInformationToolbarItemService($container));
            yield 5 => ($container->privates['TYPO3\\CMS\\Backend\\Backend\\ToolbarItems\\UserToolbarItem'] ?? self::getUserToolbarItemService($container));
            yield 6 => ($container->services['TYPO3\\CMS\\Opendocs\\Backend\\ToolbarItems\\OpendocsToolbarItem'] ?? self::getOpendocsToolbarItemService($container));
            yield 7 => ($container->privates['TYPO3\\CMS\\Workspaces\\Backend\\ToolbarItems\\WorkspaceSelectorToolbarItem'] ?? self::getWorkspaceSelectorToolbarItemService($container));
        }, 8));
    }

    /**
     * Gets the private 'TYPO3\CMS\Backend\View\BackendViewFactory' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\View\BackendViewFactory
     */
    protected static function getBackendViewFactoryService($container)
    {
        return $container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\View\BackendViewFactory::class, ($container->services['TYPO3\\CMS\\Fluid\\Core\\Rendering\\RenderingContextFactory'] ?? self::getRenderingContextFactoryService($container)), ($container->services['_early.TYPO3\\CMS\\Core\\Package\\PackageManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Package\\PackageManager', 1)));
    }

    /**
     * Gets the private 'TYPO3\CMS\Beuser\Service\UserInformationService' shared autowired service.
     *
     * @return \TYPO3\CMS\Beuser\Service\UserInformationService
     */
    protected static function getUserInformationServiceService($container)
    {
        return $container->privates['TYPO3\\CMS\\Beuser\\Service\\UserInformationService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Beuser\Service\UserInformationService::class, ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)));
    }

    /**
     * Gets the private 'TYPO3\CMS\Core\DataHandling\DataHandler' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\DataHandling\DataHandler
     */
    protected static function getDataHandlerService($container)
    {
        $container->privates['TYPO3\\CMS\\Core\\DataHandling\\DataHandler'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\DataHandler::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\ReferenceIndexUpdater::class));

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Core\\DataHandling\\DataHandler'));

        return $instance;
    }

    /**
     * Gets the private 'TYPO3\CMS\Core\DependencyInjection\EnvVarProcessor' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\DependencyInjection\EnvVarProcessor
     */
    protected static function getEnvVarProcessorService($container)
    {
        return $container->privates['TYPO3\\CMS\\Core\\DependencyInjection\\EnvVarProcessor'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DependencyInjection\EnvVarProcessor::class);
    }

    /**
     * Gets the private 'TYPO3\CMS\Core\Domain\Repository\PageRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Domain\Repository\PageRepository
     */
    protected static function getPageRepositoryService($container)
    {
        $container->privates['TYPO3\\CMS\\Core\\Domain\\Repository\\PageRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Domain\Repository\PageRepository::class, ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)));

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Core\\Domain\\Repository\\PageRepository'));

        return $instance;
    }

    /**
     * Gets the private 'TYPO3\CMS\Core\Resource\Service\ImageProcessingService' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Service\ImageProcessingService
     */
    protected static function getImageProcessingServiceService($container)
    {
        return $container->privates['TYPO3\\CMS\\Core\\Resource\\Service\\ImageProcessingService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Service\ImageProcessingService::class, ($container->services['TYPO3\\CMS\\Core\\Resource\\ProcessedFileRepository'] ?? self::getProcessedFileRepositoryService($container)), ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)), ($container->services['TYPO3\\CMS\\Core\\Locking\\ResourceMutex'] ?? self::getResourceMutexService($container)));
    }

    /**
     * Gets the private 'TYPO3\CMS\Core\Security\ContentSecurityPolicy\Configuration\DispositionMapFactory' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Security\ContentSecurityPolicy\Configuration\DispositionMapFactory
     */
    protected static function getDispositionMapFactoryService($container)
    {
        return $container->privates['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Configuration\\DispositionMapFactory'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Security\ContentSecurityPolicy\Configuration\DispositionMapFactory::class, ($container->privates['TYPO3\\CMS\\Core\\Configuration\\Features'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\Features::class)));
    }

    /**
     * Gets the private 'TYPO3\CMS\Core\Security\ContentSecurityPolicy\MutationRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Security\ContentSecurityPolicy\MutationRepository
     */
    protected static function getMutationRepositoryService($container)
    {
        return $container->privates['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\MutationRepository'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Security\ContentSecurityPolicy\MutationRepository::class, ($container->services['content.security.policies_decorated_41'] ?? self::getContent_Security_PoliciesDecorated41Service($container)), ($container->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? self::getSiteFinderService($container)), ($container->privates['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\ModelService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Security\ContentSecurityPolicy\ModelService::class)), ($container->privates['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\ScopeRepository'] ?? self::getScopeRepositoryService($container)), ($container->privates['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Reporting\\ResolutionRepository'] ?? self::getResolutionRepositoryService($container)), ($container->privates['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Configuration\\DispositionMapFactory'] ?? self::getDispositionMapFactoryService($container)));
    }

    /**
     * Gets the private 'TYPO3\CMS\Core\Security\ContentSecurityPolicy\Reporting\ReportRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Security\ContentSecurityPolicy\Reporting\ReportRepository
     */
    protected static function getReportRepositoryService($container)
    {
        return $container->privates['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Reporting\\ReportRepository'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Security\ContentSecurityPolicy\Reporting\ReportRepository::class, ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)));
    }

    /**
     * Gets the private 'TYPO3\CMS\Core\Security\ContentSecurityPolicy\Reporting\ResolutionRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Security\ContentSecurityPolicy\Reporting\ResolutionRepository
     */
    protected static function getResolutionRepositoryService($container)
    {
        return $container->privates['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\Reporting\\ResolutionRepository'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Security\ContentSecurityPolicy\Reporting\ResolutionRepository::class, ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)));
    }

    /**
     * Gets the private 'TYPO3\CMS\Core\Security\ContentSecurityPolicy\ScopeRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Security\ContentSecurityPolicy\ScopeRepository
     */
    protected static function getScopeRepositoryService($container)
    {
        return $container->privates['TYPO3\\CMS\\Core\\Security\\ContentSecurityPolicy\\ScopeRepository'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Security\ContentSecurityPolicy\ScopeRepository::class, ($container->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? self::getSiteFinderService($container)));
    }

    /**
     * Gets the private 'TYPO3\CMS\Core\Site\SiteFinder' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Site\SiteFinder
     */
    protected static function getSiteFinderService($container)
    {
        return $container->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Site\SiteFinder::class, ($container->services['TYPO3\\CMS\\Core\\Configuration\\SiteConfiguration'] ?? self::getSiteConfigurationService($container)));
    }

    /**
     * Gets the private 'TYPO3\CMS\Core\TypoScript\IncludeTree\TreeFromLineStreamBuilder' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\TypoScript\IncludeTree\TreeFromLineStreamBuilder
     */
    protected static function getTreeFromLineStreamBuilderService($container)
    {
        return $container->privates['TYPO3\\CMS\\Core\\TypoScript\\IncludeTree\\TreeFromLineStreamBuilder'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\TypoScript\IncludeTree\TreeFromLineStreamBuilder::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Security\FileNameValidator::class));
    }

    /**
     * Gets the private 'TYPO3\CMS\Dashboard\DashboardRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Dashboard\DashboardRepository
     */
    protected static function getDashboardRepositoryService($container)
    {
        return $container->privates['TYPO3\\CMS\\Dashboard\\DashboardRepository'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\DashboardRepository::class, ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)), ($container->services['TYPO3\\CMS\\Dashboard\\WidgetRegistry'] ?? self::getWidgetRegistryService($container)), $container);
    }

    /**
     * Gets the private 'TYPO3\CMS\Extbase\ContentObject\ExtbasePluginContentObject' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\ContentObject\ExtbasePluginContentObject
     */
    protected static function getExtbasePluginContentObjectService($container)
    {
        $container->factories['service_container']['TYPO3\\CMS\\Extbase\\ContentObject\\ExtbasePluginContentObject'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\ContentObject\ExtbasePluginContentObject::class);
        };

        return $container->factories['service_container']['TYPO3\\CMS\\Extbase\\ContentObject\\ExtbasePluginContentObject']($container);
    }

    /**
     * Gets the private 'TYPO3\CMS\Extbase\Mvc\Dispatcher' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Mvc\Dispatcher
     */
    protected static function getDispatcherService($container)
    {
        return $container->privates['TYPO3\\CMS\\Extbase\\Mvc\\Dispatcher'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\Dispatcher::class, $container, ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));
    }

    /**
     * Gets the private 'TYPO3\CMS\Extensionmanager\Package\ComposerDeficitDetector' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Package\ComposerDeficitDetector
     */
    protected static function getComposerDeficitDetectorService($container)
    {
        return $container->privates['TYPO3\\CMS\\Extensionmanager\\Package\\ComposerDeficitDetector'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Package\ComposerDeficitDetector::class, ($container->services['TYPO3\\CMS\\Extensionmanager\\Utility\\ListUtility'] ?? self::getListUtilityService($container)));
    }

    /**
     * Gets the private 'TYPO3\CMS\Extensionmanager\Report\ExtensionStatus' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Report\ExtensionStatus
     */
    protected static function getExtensionStatusService($container)
    {
        return $container->privates['TYPO3\\CMS\\Extensionmanager\\Report\\ExtensionStatus'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Report\ExtensionStatus::class, ($container->services['TYPO3\\CMS\\Extensionmanager\\Remote\\RemoteRegistry'] ?? self::getRemoteRegistryService($container)), ($container->services['TYPO3\\CMS\\Extensionmanager\\Utility\\ListUtility'] ?? self::getListUtilityService($container)), ($container->services['TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory'] ?? self::getLanguageServiceFactoryService($container)));
    }

    /**
     * Gets the private 'TYPO3\CMS\Extensionmanager\Service\ComposerManifestProposalGenerator' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Service\ComposerManifestProposalGenerator
     */
    protected static function getComposerManifestProposalGeneratorService($container)
    {
        return $container->privates['TYPO3\\CMS\\Extensionmanager\\Service\\ComposerManifestProposalGenerator'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Service\ComposerManifestProposalGenerator::class, ($container->services['TYPO3\\CMS\\Core\\Http\\RequestFactory'] ?? self::getRequestFactoryService($container)), ($container->services['TYPO3\\CMS\\Extensionmanager\\Utility\\EmConfUtility'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Utility\EmConfUtility::class)));
    }

    /**
     * Gets the private 'TYPO3\CMS\Filelist\ElementBrowser\CreateFolderBrowser' shared autowired service.
     *
     * @return \TYPO3\CMS\Filelist\ElementBrowser\CreateFolderBrowser
     */
    protected static function getCreateFolderBrowserService($container)
    {
        return $container->privates['TYPO3\\CMS\\Filelist\\ElementBrowser\\CreateFolderBrowser'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Filelist\ElementBrowser\CreateFolderBrowser::class, ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)));
    }

    /**
     * Gets the private 'TYPO3\CMS\Filelist\ElementBrowser\FileBrowser' autowired service.
     *
     * @return \TYPO3\CMS\Filelist\ElementBrowser\FileBrowser
     */
    protected static function getFileBrowserService($container)
    {
        $container->factories['service_container']['TYPO3\\CMS\\Filelist\\ElementBrowser\\FileBrowser'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Filelist\ElementBrowser\FileBrowser::class, ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)));
        };

        return $container->factories['service_container']['TYPO3\\CMS\\Filelist\\ElementBrowser\\FileBrowser']($container);
    }

    /**
     * Gets the private 'TYPO3\CMS\Filelist\ElementBrowser\FolderBrowser' autowired service.
     *
     * @return \TYPO3\CMS\Filelist\ElementBrowser\FolderBrowser
     */
    protected static function getFolderBrowserService($container)
    {
        $container->factories['service_container']['TYPO3\\CMS\\Filelist\\ElementBrowser\\FolderBrowser'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Filelist\ElementBrowser\FolderBrowser::class, ($container->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? self::getIconFactoryService($container)), ($container->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? self::getPageRendererService($container)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->privates['TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)));
        };

        return $container->factories['service_container']['TYPO3\\CMS\\Filelist\\ElementBrowser\\FolderBrowser']($container);
    }

    /**
     * Gets the private 'TYPO3\CMS\Form\Mvc\Configuration\YamlSource' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\Mvc\Configuration\YamlSource
     */
    protected static function getYamlSourceService($container)
    {
        $container->privates['TYPO3\\CMS\\Form\\Mvc\\Configuration\\YamlSource'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Mvc\Configuration\YamlSource::class);

        $instance->injectFilePersistenceSlot(($container->services['TYPO3\\CMS\\Form\\Slot\\FilePersistenceSlot'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Slot\FilePersistenceSlot::class)));

        return $instance;
    }

    /**
     * Gets the private 'TYPO3\CMS\FrontendLogin\Configuration\RecoveryConfiguration' shared autowired service.
     *
     * @return \TYPO3\CMS\FrontendLogin\Configuration\RecoveryConfiguration
     */
    protected static function getRecoveryConfigurationService($container)
    {
        $container->privates['TYPO3\\CMS\\FrontendLogin\\Configuration\\RecoveryConfiguration'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FrontendLogin\Configuration\RecoveryConfiguration::class, ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)), ($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)), ($container->privates['TYPO3\\CMS\\Core\\Crypto\\Random'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Crypto\Random::class)), ($container->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? self::getHashServiceService($container)));

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\FrontendLogin\\Configuration\\RecoveryConfiguration'));

        return $instance;
    }

    /**
     * Gets the private 'TYPO3\CMS\FrontendLogin\Domain\Repository\FrontendUserRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\FrontendLogin\Domain\Repository\FrontendUserRepository
     */
    protected static function getFrontendUserRepositoryService($container)
    {
        return $container->privates['TYPO3\\CMS\\FrontendLogin\\Domain\\Repository\\FrontendUserRepository'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FrontendLogin\Domain\Repository\FrontendUserRepository::class, ($container->privates['TYPO3\\CMS\\FrontendLogin\\Service\\UserService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FrontendLogin\Service\UserService::class)), ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)), ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)));
    }

    /**
     * Gets the private 'TYPO3\CMS\FrontendLogin\Redirect\RedirectHandler' shared autowired service.
     *
     * @return \TYPO3\CMS\FrontendLogin\Redirect\RedirectHandler
     */
    protected static function getRedirectHandler2Service($container)
    {
        $a = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\Web\Routing\UriBuilder::class);
        $a->injectConfigurationManager(($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container)));
        $a->injectExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));
        $b = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FrontendLogin\Validation\RedirectUrlValidator::class, ($container->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? self::getSiteFinderService($container)));
        $b->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\FrontendLogin\\Validation\\RedirectUrlValidator'));
        $c = ($container->privates['TYPO3\\CMS\\FrontendLogin\\Service\\UserService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FrontendLogin\Service\UserService::class));

        return $container->privates['TYPO3\\CMS\\FrontendLogin\\Redirect\\RedirectHandler'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FrontendLogin\Redirect\RedirectHandler::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FrontendLogin\Redirect\RedirectModeHandler::class, $a, $b, $c, ($container->privates['TYPO3\\CMS\\FrontendLogin\\Domain\\Repository\\FrontendUserRepository'] ?? self::getFrontendUserRepositoryService($container)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FrontendLogin\Domain\Repository\FrontendUserGroupRepository::class, $c, ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container)))), $b, ($container->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? self::getContextService($container)));
    }

    /**
     * Gets the private 'TYPO3\CMS\FrontendLogin\Service\RecoveryService' shared autowired service.
     *
     * @return \TYPO3\CMS\FrontendLogin\Service\RecoveryService
     */
    protected static function getRecoveryServiceService($container)
    {
        $a = ($container->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? self::getConfigurationManagerService($container));
        $b = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\Web\Routing\UriBuilder::class);
        $b->injectConfigurationManager($a);
        $b->injectExtensionService(($container->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? self::getExtensionServiceService($container)));

        return $container->privates['TYPO3\\CMS\\FrontendLogin\\Service\\RecoveryService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FrontendLogin\Service\RecoveryService::class, ($container->services['TYPO3\\CMS\\Core\\Mail\\Mailer'] ?? self::getMailerService($container)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)), $a, ($container->privates['TYPO3\\CMS\\FrontendLogin\\Configuration\\RecoveryConfiguration'] ?? self::getRecoveryConfigurationService($container)), $b);
    }

    /**
     * Gets the private 'TYPO3\CMS\Frontend\ContentObject\CaseContentObject' autowired service.
     *
     * @return \TYPO3\CMS\Frontend\ContentObject\CaseContentObject
     */
    protected static function getCaseContentObjectService($container)
    {
        $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\CaseContentObject'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\CaseContentObject::class);
        };

        return $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\CaseContentObject']($container);
    }

    /**
     * Gets the private 'TYPO3\CMS\Frontend\ContentObject\ContentContentObject' autowired service.
     *
     * @return \TYPO3\CMS\Frontend\ContentObject\ContentContentObject
     */
    protected static function getContentContentObjectService($container)
    {
        $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\ContentContentObject'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\ContentContentObject::class);
        };

        return $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\ContentContentObject']($container);
    }

    /**
     * Gets the private 'TYPO3\CMS\Frontend\ContentObject\ContentObjectArrayContentObject' autowired service.
     *
     * @return \TYPO3\CMS\Frontend\ContentObject\ContentObjectArrayContentObject
     */
    protected static function getContentObjectArrayContentObjectService($container)
    {
        $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectArrayContentObject'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\ContentObjectArrayContentObject::class);
        };

        return $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectArrayContentObject']($container);
    }

    /**
     * Gets the private 'TYPO3\CMS\Frontend\ContentObject\ContentObjectArrayInternalContentObject' autowired service.
     *
     * @return \TYPO3\CMS\Frontend\ContentObject\ContentObjectArrayInternalContentObject
     */
    protected static function getContentObjectArrayInternalContentObjectService($container)
    {
        $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectArrayInternalContentObject'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\ContentObjectArrayInternalContentObject::class);
        };

        return $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectArrayInternalContentObject']($container);
    }

    /**
     * Gets the private 'TYPO3\CMS\Frontend\ContentObject\FilesContentObject' autowired service.
     *
     * @return \TYPO3\CMS\Frontend\ContentObject\FilesContentObject
     */
    protected static function getFilesContentObjectService($container)
    {
        $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\FilesContentObject'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\FilesContentObject::class);
        };

        return $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\FilesContentObject']($container);
    }

    /**
     * Gets the private 'TYPO3\CMS\Frontend\ContentObject\FluidTemplateContentObject' autowired service.
     *
     * @return \TYPO3\CMS\Frontend\ContentObject\FluidTemplateContentObject
     */
    protected static function getFluidTemplateContentObjectService($container)
    {
        $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\FluidTemplateContentObject'] = function ($container) {
            $a = ($container->services['TYPO3\\CMS\\Frontend\\ContentObject\\ContentDataProcessor'] ?? self::getContentDataProcessorService($container));

            if (isset($container->privates['TYPO3\\CMS\\Frontend\\ContentObject\\FluidTemplateContentObject'])) {
                return $container->privates['TYPO3\\CMS\\Frontend\\ContentObject\\FluidTemplateContentObject'];
            }

            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\FluidTemplateContentObject::class, $a);
        };

        return $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\FluidTemplateContentObject']($container);
    }

    /**
     * Gets the private 'TYPO3\CMS\Frontend\ContentObject\HierarchicalMenuContentObject' autowired service.
     *
     * @return \TYPO3\CMS\Frontend\ContentObject\HierarchicalMenuContentObject
     */
    protected static function getHierarchicalMenuContentObjectService($container)
    {
        $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\HierarchicalMenuContentObject'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\HierarchicalMenuContentObject::class);
        };

        return $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\HierarchicalMenuContentObject']($container);
    }

    /**
     * Gets the private 'TYPO3\CMS\Frontend\ContentObject\ImageContentObject' autowired service.
     *
     * @return \TYPO3\CMS\Frontend\ContentObject\ImageContentObject
     */
    protected static function getImageContentObjectService($container)
    {
        $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\ImageContentObject'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\ImageContentObject::class, ($container->services['TYPO3\\CMS\\Core\\Service\\MarkerBasedTemplateService'] ?? self::getMarkerBasedTemplateServiceService($container)));
        };

        return $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\ImageContentObject']($container);
    }

    /**
     * Gets the private 'TYPO3\CMS\Frontend\ContentObject\ImageResourceContentObject' autowired service.
     *
     * @return \TYPO3\CMS\Frontend\ContentObject\ImageResourceContentObject
     */
    protected static function getImageResourceContentObjectService($container)
    {
        $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\ImageResourceContentObject'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\ImageResourceContentObject::class);
        };

        return $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\ImageResourceContentObject']($container);
    }

    /**
     * Gets the private 'TYPO3\CMS\Frontend\ContentObject\LoadRegisterContentObject' autowired service.
     *
     * @return \TYPO3\CMS\Frontend\ContentObject\LoadRegisterContentObject
     */
    protected static function getLoadRegisterContentObjectService($container)
    {
        $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\LoadRegisterContentObject'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\LoadRegisterContentObject::class);
        };

        return $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\LoadRegisterContentObject']($container);
    }

    /**
     * Gets the private 'TYPO3\CMS\Frontend\ContentObject\RecordsContentObject' autowired service.
     *
     * @return \TYPO3\CMS\Frontend\ContentObject\RecordsContentObject
     */
    protected static function getRecordsContentObjectService($container)
    {
        $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\RecordsContentObject'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\RecordsContentObject::class);
        };

        return $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\RecordsContentObject']($container);
    }

    /**
     * Gets the private 'TYPO3\CMS\Frontend\ContentObject\RestoreRegisterContentObject' autowired service.
     *
     * @return \TYPO3\CMS\Frontend\ContentObject\RestoreRegisterContentObject
     */
    protected static function getRestoreRegisterContentObjectService($container)
    {
        $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\RestoreRegisterContentObject'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\RestoreRegisterContentObject::class);
        };

        return $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\RestoreRegisterContentObject']($container);
    }

    /**
     * Gets the private 'TYPO3\CMS\Frontend\ContentObject\ScalableVectorGraphicsContentObject' autowired service.
     *
     * @return \TYPO3\CMS\Frontend\ContentObject\ScalableVectorGraphicsContentObject
     */
    protected static function getScalableVectorGraphicsContentObjectService($container)
    {
        $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\ScalableVectorGraphicsContentObject'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\ScalableVectorGraphicsContentObject::class);
        };

        return $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\ScalableVectorGraphicsContentObject']($container);
    }

    /**
     * Gets the private 'TYPO3\CMS\Frontend\ContentObject\TextContentObject' autowired service.
     *
     * @return \TYPO3\CMS\Frontend\ContentObject\TextContentObject
     */
    protected static function getTextContentObjectService($container)
    {
        $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\TextContentObject'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\TextContentObject::class);
        };

        return $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\TextContentObject']($container);
    }

    /**
     * Gets the private 'TYPO3\CMS\Frontend\ContentObject\UserContentObject' autowired service.
     *
     * @return \TYPO3\CMS\Frontend\ContentObject\UserContentObject
     */
    protected static function getUserContentObjectService($container)
    {
        $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\UserContentObject'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\UserContentObject::class);
        };

        return $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\UserContentObject']($container);
    }

    /**
     * Gets the private 'TYPO3\CMS\Frontend\ContentObject\UserInternalContentObject' autowired service.
     *
     * @return \TYPO3\CMS\Frontend\ContentObject\UserInternalContentObject
     */
    protected static function getUserInternalContentObjectService($container)
    {
        $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\UserInternalContentObject'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\UserInternalContentObject::class);
        };

        return $container->factories['service_container']['TYPO3\\CMS\\Frontend\\ContentObject\\UserInternalContentObject']($container);
    }

    /**
     * Gets the private 'TYPO3\CMS\Frontend\DataProcessing\CommaSeparatedValueProcessor' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\DataProcessing\CommaSeparatedValueProcessor
     */
    protected static function getCommaSeparatedValueProcessorService($container)
    {
        return $container->privates['TYPO3\\CMS\\Frontend\\DataProcessing\\CommaSeparatedValueProcessor'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\DataProcessing\CommaSeparatedValueProcessor::class);
    }

    /**
     * Gets the private 'TYPO3\CMS\Frontend\DataProcessing\FilesProcessor' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\DataProcessing\FilesProcessor
     */
    protected static function getFilesProcessorService($container)
    {
        return $container->privates['TYPO3\\CMS\\Frontend\\DataProcessing\\FilesProcessor'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\DataProcessing\FilesProcessor::class);
    }

    /**
     * Gets the private 'TYPO3\CMS\Frontend\DataProcessing\FlexFormProcessor' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\DataProcessing\FlexFormProcessor
     */
    protected static function getFlexFormProcessorService($container)
    {
        return $container->privates['TYPO3\\CMS\\Frontend\\DataProcessing\\FlexFormProcessor'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\DataProcessing\FlexFormProcessor::class);
    }

    /**
     * Gets the private 'TYPO3\CMS\Frontend\DataProcessing\GalleryProcessor' autowired service.
     *
     * @return \TYPO3\CMS\Frontend\DataProcessing\GalleryProcessor
     */
    protected static function getGalleryProcessorService($container)
    {
        $container->factories['service_container']['TYPO3\\CMS\\Frontend\\DataProcessing\\GalleryProcessor'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\DataProcessing\GalleryProcessor::class);
        };

        return $container->factories['service_container']['TYPO3\\CMS\\Frontend\\DataProcessing\\GalleryProcessor']($container);
    }

    /**
     * Gets the private 'TYPO3\CMS\Frontend\DataProcessing\LanguageMenuProcessor' autowired service.
     *
     * @return \TYPO3\CMS\Frontend\DataProcessing\LanguageMenuProcessor
     */
    protected static function getLanguageMenuProcessorService($container)
    {
        $container->factories['service_container']['TYPO3\\CMS\\Frontend\\DataProcessing\\LanguageMenuProcessor'] = function ($container) {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\DataProcessing\LanguageMenuProcessor::class);
        };

        return $container->factories['service_container']['TYPO3\\CMS\\Frontend\\DataProcessing\\LanguageMenuProcessor']($container);
    }

    /**
     * Gets the private 'TYPO3\CMS\Frontend\DataProcessing\SiteLanguageProcessor' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\DataProcessing\SiteLanguageProcessor
     */
    protected static function getSiteLanguageProcessorService($container)
    {
        return $container->privates['TYPO3\\CMS\\Frontend\\DataProcessing\\SiteLanguageProcessor'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\DataProcessing\SiteLanguageProcessor::class);
    }

    /**
     * Gets the private 'TYPO3\CMS\Frontend\DataProcessing\SiteProcessor' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\DataProcessing\SiteProcessor
     */
    protected static function getSiteProcessorService($container)
    {
        return $container->privates['TYPO3\\CMS\\Frontend\\DataProcessing\\SiteProcessor'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\DataProcessing\SiteProcessor::class);
    }

    /**
     * Gets the private 'TYPO3\CMS\Frontend\DataProcessing\SplitProcessor' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\DataProcessing\SplitProcessor
     */
    protected static function getSplitProcessorService($container)
    {
        return $container->privates['TYPO3\\CMS\\Frontend\\DataProcessing\\SplitProcessor'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\DataProcessing\SplitProcessor::class);
    }

    /**
     * Gets the private 'TYPO3\CMS\Install\Report\InstallStatusReport' shared autowired service.
     *
     * @return \TYPO3\CMS\Install\Report\InstallStatusReport
     */
    protected static function getInstallStatusReportService($container)
    {
        return $container->privates['TYPO3\\CMS\\Install\\Report\\InstallStatusReport'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Install\Report\InstallStatusReport::class, ($container->services['TYPO3\\CMS\\Install\\Service\\UpgradeWizardsService'] ?? self::getUpgradeWizardsServiceService($container)));
    }

    /**
     * Gets the private 'TYPO3\CMS\Install\Updates\BackendGroupsExplicitAllowDenyMigration' shared autowired service.
     *
     * @return \TYPO3\CMS\Install\Updates\BackendGroupsExplicitAllowDenyMigration
     */
    protected static function getBackendGroupsExplicitAllowDenyMigrationService($container)
    {
        return $container->privates['TYPO3\\CMS\\Install\\Updates\\BackendGroupsExplicitAllowDenyMigration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Install\Updates\BackendGroupsExplicitAllowDenyMigration::class);
    }

    /**
     * Gets the private 'TYPO3\CMS\Install\Updates\BackendModulePermissionMigration' shared autowired service.
     *
     * @return \TYPO3\CMS\Install\Updates\BackendModulePermissionMigration
     */
    protected static function getBackendModulePermissionMigrationService($container)
    {
        return $container->privates['TYPO3\\CMS\\Install\\Updates\\BackendModulePermissionMigration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Install\Updates\BackendModulePermissionMigration::class);
    }

    /**
     * Gets the private 'TYPO3\CMS\Install\Updates\BackendUserLanguageMigration' shared autowired service.
     *
     * @return \TYPO3\CMS\Install\Updates\BackendUserLanguageMigration
     */
    protected static function getBackendUserLanguageMigrationService($container)
    {
        return $container->privates['TYPO3\\CMS\\Install\\Updates\\BackendUserLanguageMigration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Install\Updates\BackendUserLanguageMigration::class);
    }

    /**
     * Gets the private 'TYPO3\CMS\Install\Updates\CollectionsExtractionUpdate' shared autowired service.
     *
     * @return \TYPO3\CMS\Install\Updates\CollectionsExtractionUpdate
     */
    protected static function getCollectionsExtractionUpdateService($container)
    {
        return $container->privates['TYPO3\\CMS\\Install\\Updates\\CollectionsExtractionUpdate'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Install\Updates\CollectionsExtractionUpdate::class);
    }

    /**
     * Gets the private 'TYPO3\CMS\Install\Updates\DatabaseRowsUpdateWizard' shared autowired service.
     *
     * @return \TYPO3\CMS\Install\Updates\DatabaseRowsUpdateWizard
     */
    protected static function getDatabaseRowsUpdateWizardService($container)
    {
        return $container->privates['TYPO3\\CMS\\Install\\Updates\\DatabaseRowsUpdateWizard'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Install\Updates\DatabaseRowsUpdateWizard::class);
    }

    /**
     * Gets the private 'TYPO3\CMS\Install\Updates\FeLoginModeExtractionUpdate' shared autowired service.
     *
     * @return \TYPO3\CMS\Install\Updates\FeLoginModeExtractionUpdate
     */
    protected static function getFeLoginModeExtractionUpdateService($container)
    {
        return $container->privates['TYPO3\\CMS\\Install\\Updates\\FeLoginModeExtractionUpdate'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Install\Updates\FeLoginModeExtractionUpdate::class);
    }

    /**
     * Gets the private 'TYPO3\CMS\Install\Updates\MigrateSiteSettingsConfigUpdate' shared autowired service.
     *
     * @return \TYPO3\CMS\Install\Updates\MigrateSiteSettingsConfigUpdate
     */
    protected static function getMigrateSiteSettingsConfigUpdateService($container)
    {
        return $container->privates['TYPO3\\CMS\\Install\\Updates\\MigrateSiteSettingsConfigUpdate'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Install\Updates\MigrateSiteSettingsConfigUpdate::class);
    }

    /**
     * Gets the private 'TYPO3\CMS\Install\Updates\PasswordPolicyForFrontendUsersUpdate' shared autowired service.
     *
     * @return \TYPO3\CMS\Install\Updates\PasswordPolicyForFrontendUsersUpdate
     */
    protected static function getPasswordPolicyForFrontendUsersUpdateService($container)
    {
        return $container->privates['TYPO3\\CMS\\Install\\Updates\\PasswordPolicyForFrontendUsersUpdate'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Install\Updates\PasswordPolicyForFrontendUsersUpdate::class);
    }

    /**
     * Gets the private 'TYPO3\CMS\Install\Updates\ShortcutRecordsMigration' shared autowired service.
     *
     * @return \TYPO3\CMS\Install\Updates\ShortcutRecordsMigration
     */
    protected static function getShortcutRecordsMigrationService($container)
    {
        return $container->privates['TYPO3\\CMS\\Install\\Updates\\ShortcutRecordsMigration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Install\Updates\ShortcutRecordsMigration::class);
    }

    /**
     * Gets the private 'TYPO3\CMS\Install\Updates\SvgFilesSanitization' shared autowired service.
     *
     * @return \TYPO3\CMS\Install\Updates\SvgFilesSanitization
     */
    protected static function getSvgFilesSanitizationService($container)
    {
        return $container->privates['TYPO3\\CMS\\Install\\Updates\\SvgFilesSanitization'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Install\Updates\SvgFilesSanitization::class);
    }

    /**
     * Gets the private 'TYPO3\CMS\Install\Updates\SysFileCollectionIdentifierMigration' shared autowired service.
     *
     * @return \TYPO3\CMS\Install\Updates\SysFileCollectionIdentifierMigration
     */
    protected static function getSysFileCollectionIdentifierMigrationService($container)
    {
        return $container->privates['TYPO3\\CMS\\Install\\Updates\\SysFileCollectionIdentifierMigration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Install\Updates\SysFileCollectionIdentifierMigration::class);
    }

    /**
     * Gets the private 'TYPO3\CMS\Install\Updates\SysFileMountIdentifierMigration' shared autowired service.
     *
     * @return \TYPO3\CMS\Install\Updates\SysFileMountIdentifierMigration
     */
    protected static function getSysFileMountIdentifierMigrationService($container)
    {
        return $container->privates['TYPO3\\CMS\\Install\\Updates\\SysFileMountIdentifierMigration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Install\Updates\SysFileMountIdentifierMigration::class);
    }

    /**
     * Gets the private 'TYPO3\CMS\Install\Updates\SysLogChannel' shared autowired service.
     *
     * @return \TYPO3\CMS\Install\Updates\SysLogChannel
     */
    protected static function getSysLogChannelService($container)
    {
        return $container->privates['TYPO3\\CMS\\Install\\Updates\\SysLogChannel'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Install\Updates\SysLogChannel::class);
    }

    /**
     * Gets the private 'TYPO3\CMS\Install\Updates\SysLogSerializationUpdate' shared autowired service.
     *
     * @return \TYPO3\CMS\Install\Updates\SysLogSerializationUpdate
     */
    protected static function getSysLogSerializationUpdateService($container)
    {
        return $container->privates['TYPO3\\CMS\\Install\\Updates\\SysLogSerializationUpdate'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Install\Updates\SysLogSerializationUpdate::class);
    }

    /**
     * Gets the private 'TYPO3\CMS\Install\Updates\SysTemplateNoWorkspaceMigration' shared autowired service.
     *
     * @return \TYPO3\CMS\Install\Updates\SysTemplateNoWorkspaceMigration
     */
    protected static function getSysTemplateNoWorkspaceMigrationService($container)
    {
        return $container->privates['TYPO3\\CMS\\Install\\Updates\\SysTemplateNoWorkspaceMigration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Install\Updates\SysTemplateNoWorkspaceMigration::class);
    }

    /**
     * Gets the private 'TYPO3\CMS\Reactions\ReactionRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Reactions\ReactionRegistry
     */
    protected static function getReactionRegistryService($container)
    {
        return $container->privates['TYPO3\\CMS\\Reactions\\ReactionRegistry'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Reactions\ReactionRegistry::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(RewindableGenerator::class, function () use ($container) {
            yield 'create-record' => ($container->services['TYPO3\\CMS\\Reactions\\Reaction\\CreateRecordReaction'] ?? self::getCreateRecordReactionService($container));
        }, 1));
    }

    /**
     * Gets the private 'TYPO3\CMS\Redirects\Service\RedirectCacheService' shared autowired service.
     *
     * @return \TYPO3\CMS\Redirects\Service\RedirectCacheService
     */
    protected static function getRedirectCacheServiceService($container)
    {
        return $container->privates['TYPO3\\CMS\\Redirects\\Service\\RedirectCacheService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\Service\RedirectCacheService::class, ($container->services['TYPO3\\CMS\\Core\\Cache\\CacheManager'] ?? self::getCacheManagerService($container)));
    }

    /**
     * Gets the private 'TYPO3\CMS\Redirects\Service\RedirectService' shared autowired service.
     *
     * @return \TYPO3\CMS\Redirects\Service\RedirectService
     */
    protected static function getRedirectServiceService($container)
    {
        $container->privates['TYPO3\\CMS\\Redirects\\Service\\RedirectService'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\Service\RedirectService::class, ($container->privates['TYPO3\\CMS\\Redirects\\Service\\RedirectCacheService'] ?? self::getRedirectCacheServiceService($container)), ($container->services['TYPO3\\CMS\\Core\\LinkHandling\\LinkService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\LinkHandling\LinkService::class)), ($container->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? self::getSiteFinderService($container)), ($container->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? self::getEventDispatcherInterfaceDecorated1Service($container)));

        $instance->setLogger(($container->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $container->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Redirects\\Service\\RedirectService'));

        return $instance;
    }

    /**
     * Gets the private 'TYPO3\CMS\SysNote\Renderer\NoteRenderer' shared autowired service.
     *
     * @return \TYPO3\CMS\SysNote\Renderer\NoteRenderer
     */
    protected static function getNoteRendererService($container)
    {
        return $container->privates['TYPO3\\CMS\\SysNote\\Renderer\\NoteRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\SysNote\Renderer\NoteRenderer::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\SysNote\Domain\Repository\SysNoteRepository::class, ($container->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? self::getConnectionPoolService($container))), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)));
    }

    /**
     * Gets the private 'TYPO3\CMS\Workspaces\Backend\ToolbarItems\WorkspaceSelectorToolbarItem' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Backend\ToolbarItems\WorkspaceSelectorToolbarItem
     */
    protected static function getWorkspaceSelectorToolbarItemService($container)
    {
        return $container->privates['TYPO3\\CMS\\Workspaces\\Backend\\ToolbarItems\\WorkspaceSelectorToolbarItem'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Backend\ToolbarItems\WorkspaceSelectorToolbarItem::class, ($container->services['TYPO3\\CMS\\Workspaces\\Service\\WorkspaceService'] ??= \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\WorkspaceService::class)), ($container->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? self::getUriBuilderService($container)), ($container->privates['TYPO3\\CMS\\Backend\\View\\BackendViewFactory'] ?? self::getBackendViewFactoryService($container)), ($container->services['TYPO3\\CMS\\Backend\\Module\\ModuleProvider'] ?? self::getModuleProviderService($container)));
    }

    /**
     * Gets the private 'cache.dashboard.rss' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface
     */
    protected static function getCache_Dashboard_RssService($container)
    {
        return $container->privates['cache.dashboard.rss'] = ($container->services['TYPO3\\CMS\\Core\\Cache\\CacheManager'] ?? self::getCacheManagerService($container))->getCache('dashboard_rss');
    }

    /**
     * Gets the private 'cache.runtime' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface
     */
    protected static function getCache_RuntimeService($container)
    {
        return $container->privates['cache.runtime'] = ($container->services['TYPO3\\CMS\\Core\\Cache\\CacheManager'] ?? self::getCacheManagerService($container))->getCache('runtime');
    }

    /**
     * Gets the private 'cache.typoscript' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Cache\Frontend\PhpFrontend
     */
    protected static function getCache_TyposcriptService($container)
    {
        return $container->privates['cache.typoscript'] = ($container->services['TYPO3\\CMS\\Core\\Cache\\CacheManager'] ?? self::getCacheManagerService($container))->getCache('typoscript');
    }

    /**
     * Gets the private 'messenger.bus.default' shared autowired service.
     *
     * @return \Symfony\Component\Messenger\MessageBusInterface
     */
    protected static function getMessenger_Bus_DefaultService($container)
    {
        return $container->privates['messenger.bus.default'] = (\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Messenger\BusFactory::class, ['default' => \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(RewindableGenerator::class, function () use ($container) {
            yield 0 => ($container->privates['Symfony\\Component\\Messenger\\Middleware\\SendMessageMiddleware'] ?? self::getSendMessageMiddlewareService($container));
            yield 1 => self::getHandleMessageMiddlewareService($container);
        }, 2)]))->createBus();
    }

    /**
     * Gets the private 'news.cache' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Cache\Frontend\PhpFrontend
     */
    protected static function getNews_CacheService($container)
    {
        return $container->privates['news.cache'] = \TYPO3\CMS\Core\Core\Bootstrap::createCache('news');
    }

    /**
     * Gets the public 'TYPO3\CMS\Recordlist\LinkHandler\RecordLinkHandler' alias.
     *
     * @return object The "TYPO3\CMS\Backend\LinkHandler\RecordLinkHandler" service.
     */
    protected static function getRecordLinkHandler2Service($container)
    {
        trigger_deprecation('typo3/cms-backend', '12.0', 'Usage of "TYPO3\\CMS\\Recordlist\\LinkHandler\\RecordLinkHandler" is deprecated. Please use "TYPO3\\CMS\\Backend\\LinkHandler\\RecordLinkHandler" instead.');

        return $container->get('TYPO3\\CMS\\Backend\\LinkHandler\\RecordLinkHandler');
    }
}

class CreateRecordReactionGhost3d5ed12 extends \TYPO3\CMS\Reactions\Reaction\CreateRecordReaction implements \Symfony\Component\VarExporter\LazyObjectInterface
{
    use \Symfony\Component\VarExporter\LazyGhostTrait;

    private const LAZY_OBJECT_PROPERTY_SCOPES = [
        "\0".parent::class."\0".'responseFactory' => [parent::class, 'responseFactory', parent::class],
        "\0".parent::class."\0".'streamFactory' => [parent::class, 'streamFactory', parent::class],
        'responseFactory' => [parent::class, 'responseFactory', parent::class],
        'streamFactory' => [parent::class, 'streamFactory', parent::class],
    ];
}

// Help opcache.preload discover always-needed symbols
class_exists(\Symfony\Component\VarExporter\Internal\Hydrator::class);
class_exists(\Symfony\Component\VarExporter\Internal\LazyObjectRegistry::class);
class_exists(\Symfony\Component\VarExporter\Internal\LazyObjectState::class);

#